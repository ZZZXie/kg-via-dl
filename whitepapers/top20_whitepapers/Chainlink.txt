Chainlink 2.0: Next Steps in the Evolution of
Decentralized Oracle Networks
Lorenz Breidenbach1 Christian Cachin2 Benedict Chan1
Alex Coventry1 Steve Ellis1 Ari Juels3 Farinaz Koushanfar4
Andrew Miller5 Brendan Magauran1 Daniel Moroz6
Sergey Nazarov1 Alexandru Topliceanu1 Florian Tram`er7
Fan Zhang8
15 April 2021
v1.0
1Chainlink Labs
2The author is a faculty member at University of Bern. He co-authored this work in his separate
capacity as an advisor to Chainlink Labs.
3TheauthorisafacultymemberatCornellTech. Heco-authoredthisworkinhisseparatecapacity
as Chief Scientist at Chainlink Labs.
4TheauthorisafacultymemberatUniversityofCalifornia,SanDiego. Sheco-authoredthiswork
in her separate capacity as an advisor to Chainlink Labs.
5The author is a faculty member at University of Illinois Urbana-Champaign. He co-authored this
work in his separate capacity as an advisor on Chainlink.
6The author is a PhD candidate at Harvard University. He co-authored this work while on leave
from Harvard, in his capacity as a researcher at Chainlink Labs.
7The author is a PhD candidate at Stanford University. He co-authored this work in his separate
capacity as an advisor to Chainlink Labs.
8The author will be joining the faculty of Duke University in fall 2021. He co-authored this work
in his current capacity as a researcher at Chainlink Labs.
1
Abstract
In this whitepaper, we articulate a vision for the evolution of Chainlink be-
yond its initial conception in the original Chainlink whitepaper. We foresee
an increasingly expansive role for oracle networks, one in which they comple-
ment and enhance existing and new blockchains by providing fast, reliable, and
conﬁdentiality-preserving universal connectivity and oﬀ-chain computation for
smart contracts.
The foundation of our plan is what we call Decentralized Oracle Networks, or
DONs for short. A DON is a network maintained by a committee of Chainlink
nodes. It supports any of an unlimited range of oracle functions chosen for
deployment by the committee. A DON thus acts as a powerful abstraction layer,
oﬀering interfaces for smart contracts to extensive oﬀ-chain resources and highly
eﬃcient yet decentralized oﬀ-chain computing resources within the DON itself.
With DONs as a springboard, Chainlink plans to focus on advances in seven
key areas:
• Hybrid smart contracts: Oﬀering a powerful, general framework for aug-
mentingexistingsmartcontractcapabilitiesbysecurelycomposingon-chain
andoﬀ-chaincomputingresourcesintowhatwecallhybrid smart contracts.
• Abstracting away complexity: Presenting developers and users with simple
functionality eliminates the need for familiarity with complex underlying
protocols and system boundaries.
• Scaling: Ensuringthatoracleservicesachievethelatenciesandthroughputs
demanded by high-performance decentralized systems.
• Conﬁdentiality: Enablingnext-generationsystemsthatcombineblockchains’
innatetransparencywithstrongnewconﬁdentialityprotectionsforsensitive
data.
• Order-fairness for transactions: Supportingtransactionsequencinginways
that are fair for end users and prevent front-running and other attacks by
bots and exploitative miners.
• Trust-minimization: Creating a highly trustworthy layer of support for
smart contracts and other oracle-dependent systems by means of decen-
tralization, strong anchoring in high-security blockchains, cryptographic
techniques, and cryptoeconomic guarantees.
• Incentive-based (cryptoeconomic) security: Rigorously designing and ro-
bustly deploying mechanisms that ensure nodes in DONs have strong eco-
nomic incentives to behave reliably and correctly, even in the face of well-
resourced adversaries.
WepresentpreliminaryandongoinginnovationsbytheChainlinkcommunity
in each of these areas, providing a picture of the broadening and increasingly
powerful capabilities planned for the Chainlink network.
2
Contents
1 Introduction 6
1.1 Decentralized Oracle Networks . . . . . . . . . . . . . . . . . . . . . . . 7
1.2 Seven Key Design Goals . . . . . . . . . . . . . . . . . . . . . . . . . . 8
1.3 Organization of this Paper . . . . . . . . . . . . . . . . . . . . . . . . . 19
2 Security Model and Goals 19
2.1 Current Architectural Model . . . . . . . . . . . . . . . . . . . . . . . . 20
2.2 Consensus Assumptions . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.3 Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
2.4 Note on Trust Models . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
3 Decentralized Oracle Network Interface and Capabilities 23
3.1 Networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.2 Computation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
3.3 Storage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
3.4 Transaction-Execution Framework (TEF) . . . . . . . . . . . . . . . . . 27
3.5 Mempool Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
3.6 Stepping Stones: Existing Chainlink Capabilities . . . . . . . . . . . . . 29
3.6.1 Oﬀ-Chain Reporting (OCR) . . . . . . . . . . . . . . . . . . . . 29
3.6.2 DECO and Town Crier . . . . . . . . . . . . . . . . . . . . . . . 30
3.6.3 Existing On-Chain Chainlink Services . . . . . . . . . . . . . . . 31
3.6.4 Node Reputation / Performance History . . . . . . . . . . . . . 33
4 Decentralized Services Enabled by Decentralized Oracle Networks 34
4.1 Proof of Reserves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
4.2 Interfacing with Enterprise / Legacy Systems . . . . . . . . . . . . . . 35
4.3 Decentralized Identity . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
4.4 Priority Channels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
4.5 Conﬁdentiality-Preserving DeFi / Mixicles . . . . . . . . . . . . . . . . 41
5 Fair Sequencing Services 43
5.1 The Front-Running Problem . . . . . . . . . . . . . . . . . . . . . . . . 45
5.1.1 Oracle Front-Running . . . . . . . . . . . . . . . . . . . . . . . 45
5.1.2 Front-Running User Transactions . . . . . . . . . . . . . . . . . 47
5.2 FSS Details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
5.2.1 Transaction Processing . . . . . . . . . . . . . . . . . . . . . . . 48
5.2.2 Transaction Atomicity . . . . . . . . . . . . . . . . . . . . . . . 51
5.3 Fair Transaction Sequencing . . . . . . . . . . . . . . . . . . . . . . . . 53
5.4 Network-Layer Considerations . . . . . . . . . . . . . . . . . . . . . . . 56
5.5 Entity-Level Fairness Policies . . . . . . . . . . . . . . . . . . . . . . . 57
3
6 The DON Transaction-Execution Framework
(DON-TEF) 57
6.1 TEF Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
6.2 Transaction Routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
6.3 Syncing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
6.4 Reorgs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
7 Trust Minimization 65
7.1 Data-Source Authentication . . . . . . . . . . . . . . . . . . . . . . . . 65
7.1.1 The Limitations of Authenticated Data Origination . . . . . . . 67
7.1.2 Conﬁdentiality . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
7.1.3 Combining Source Data . . . . . . . . . . . . . . . . . . . . . . 68
7.1.4 Processing Source Data . . . . . . . . . . . . . . . . . . . . . . . 69
7.2 DON Trust Minimization . . . . . . . . . . . . . . . . . . . . . . . . . . 70
7.2.1 Failover Clients . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
7.2.2 Minority Reports . . . . . . . . . . . . . . . . . . . . . . . . . . 70
7.3 Guard Rails . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
7.4 Trust-Minimized Governance . . . . . . . . . . . . . . . . . . . . . . . . 72
7.5 Public-Key Infrastructure . . . . . . . . . . . . . . . . . . . . . . . . . 73
8 DON Deployment Considerations 75
8.1 Rollout Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
8.2 Dynamic DON Membership . . . . . . . . . . . . . . . . . . . . . . . . 76
8.3 DON Accountability . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
9 Economics and Cryptoeconomics 78
9.1 Staking Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
9.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
9.3 Modeling Assumptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
9.3.1 First-Tier Incentive Model: Rational Actors . . . . . . . . . . . 85
9.3.2 Second-Tier Adjudication Model: Correctness by Assumption . 85
9.3.3 Adversarial Model . . . . . . . . . . . . . . . . . . . . . . . . . 86
9.3.4 How Much Cryptoeconomic Security Is Enough? . . . . . . . . . 87
9.4 Staking Mechanism: Sketch . . . . . . . . . . . . . . . . . . . . . . . . 87
9.4.1 Further Mechanism Details . . . . . . . . . . . . . . . . . . . . . 89
9.4.2 Quadratic Staking Impact . . . . . . . . . . . . . . . . . . . . . 90
9.4.3 Realization of Second Tier . . . . . . . . . . . . . . . . . . . . . 91
9.4.4 Misreporting Insurance . . . . . . . . . . . . . . . . . . . . . . . 93
9.5 Single-Round Variant . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
9.6 Implicit-Incentive Framework (IIF) . . . . . . . . . . . . . . . . . . . . 95
9.6.1 Future Fee Opportunity . . . . . . . . . . . . . . . . . . . . . . 96
9.6.2 Speculative FFO . . . . . . . . . . . . . . . . . . . . . . . . . . 97
9.6.3 External Reputation . . . . . . . . . . . . . . . . . . . . . . . . 98
4
9.6.4 Open IIF Analytics . . . . . . . . . . . . . . . . . . . . . . . . . 98
9.7 Putting It All Together: Node Operator Incentives . . . . . . . . . . . 99
9.8 The Virtuous Cycle of Economic Security . . . . . . . . . . . . . . . . . 100
9.9 Additional Factors Driving Network Growth . . . . . . . . . . . . . . . 101
10 Conclusion 102
A Glossary 116
B DON Interface: Further Details 119
B.1 Networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
B.1.1 Integrity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
B.1.2 Conﬁdentiality . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
B.1.3 Availability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
B.2 Computation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
B.2.1 Trusted Execution Environments (TEEs) . . . . . . . . . . . . . 122
B.2.2 TEE Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
B.2.3 Secure Multi-Party Computation (MPC) . . . . . . . . . . . . . 124
B.3 Storage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
B.4 Resource Pricing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
C Adapter Examples 126
C.1 Oracle-Mediated Data-Source Access (MediatedReport) . . . . . . . . . 126
C.2 Cross-Ledger Reports (XL-Report-Read) . . . . . . . . . . . . . . . . . . 127
C.3 Conﬁdential Switch (ConfSwitch) . . . . . . . . . . . . . . . . . . . . . 128
D Functional Signatures 129
D.1 Functional Signatures for Combining Data . . . . . . . . . . . . . . . . 130
D.2 Discretized Functional Signatures . . . . . . . . . . . . . . . . . . . . . 130
E Prospective Bribery 134
F Random vs. Committee-Based Oracle Selection 135
5
1 Introduction
Blockchain oracles are often viewed today as decentralized services with one objective:
to forward data from oﬀ-chain resources onto blockchains. It’s a short step, though,
from forwarding data to computing on it, storing it, or transmitting it bidirection-
ally. This observation justiﬁes a much broader notion of oracles’ functionality. So too
do the growing service requirements of smart contracts and increasingly multifaceted
technologies that rely on oracle networks. In short, an oracle can and will need to
be a general-purpose, bidirectional, compute-enabled interface between and among on-
chain and oﬀ-chain systems. Oracles’ role in the blockchain ecosystem is to enhance
the performance, functionality, and interoperability of smart contracts so that they can
bring new trust models and transparency to a multiplicity of industries. This transfor-
mation will come about through broadening use of hybrid smart contracts, which fuse
blockchains’ special properties with the unique capabilities of oﬀ-chain systems such as
oracle networks and thereby achieve far greater reach and power than on-chain systems
in isolation.
In this whitepaper, we articulate a vision for what we call Chainlink 2.0, an evo-
lution of Chainlink beyond its initial conception in the original Chainlink whitepa-
per [98]. We foresee an increasingly expansive role for oracle networks, one in which
they complement and enhance existing and new blockchains by providing fast, reli-
able, and conﬁdentiality-preserving universal connectivity and computation for hybrid
smart contracts. We believe that oracle networks will even evolve to become utilities
for exporting high-integrity blockchain-grade data to systems beyond the blockchain
ecosystem.
Today, Chainlink nodes run by a diverse set of entities come together in oracle net-
works to relay data to smart contracts in what are known as reports. We can view such
oracle nodes as a committee similar to that in a classical-consensus blockchain [72],
but with the goal of supporting existing blockchains, rather than providing freestand-
ing functionality. With veriﬁable random functions (VRF) and Oﬀ-Chain Reporting
(OCR), Chainlink is already evolving toward a general-purpose framework and infras-
tructure for providing the computational resources that smart contracts require for
advanced functionality.
The foundation of our plan for Chainlink 2.0 is what we call Decentralized Oracle
Networks, or DONs for short. Since we introduced the term “oracle network” in the
original Chainlink whitepaper [98], oracles have developed ever richer functionality and
breadth of application. In this paper, we oﬀer a fresh deﬁnition of the term according
to our future vision for the Chainlink ecosystem. In this view, a DON is a network
maintained by a committee of Chainlink nodes. Rooted in a consensus protocol, it
supports any of an unlimited range of oracle functions chosen for deployment by the
committee. A DON thus acts as a blockchain abstraction layer, providing interfaces
to oﬀ-chain resources for both smart contracts and other systems. It also provides
access to highly eﬃcient yet decentralized oﬀ-chain computing resources. In general,
a DON supports operations on a main chain. Its goal is to enable secure and ﬂexi-
6
ble hybrid smart contracts, which combine on-chain and oﬀ-chain computation with
connection to external resources.
We emphasize that even with the use of committees in DONs, Chainlink itself
remains inherently permissionless. DONs act as the foundation of a permissionless
frameworkinwhichnodescancometogethertoimplementcustomoraclenetworkswith
their own regimes for node inclusion, which may be permissioned or permissionless.
With DONs as a foundation, we plan to focus in Chainlink 2.0 on advances in seven
key areas: hybrid smart contracts, abstracting away complexity, scaling, conﬁdential-
ity, order-fairness for transactions, trust minimization, and incentive-based (cryptoeco-
nomic) security. In this paper introduction, we present an overview of Decentralized
Oracle Networks in Section 1.1 and then our seven key areas of innovation in Sec-
tion 1.2. We describe the organization of the rest of this paper in Section 1.3.
1.1 Decentralized Oracle Networks
Decentralized Oracle Networks are designed to enhance and extend the capabilities
of smart contracts on a target blockchain or main chain through functions that are
not available natively. They do so by providing the three basic resources found in
computing systems: networking, storage, and computation. A DON aims to oﬀer
these resources with strong conﬁdentiality, integrity, and availability properties,1 as
well as accountability.
DONs are formed by committees of oracle nodes that cooperate to fulﬁll a speciﬁc
joborchoosetoestablishalong-livedrelationshipinordertoprovidepersistentservices
to clients. DONs are designed in a blockchain-agnostic way. They promise to serve as
a powerful and ﬂexible tool for application developers to create oﬀ-chain support for
their smart contracts on any supported main chain.
Two types of functionalities realize the capabilities of a DON: executables and
adapters. Executables are programs that run continuously and in a decentralized man-
ner on the DON. While they do not directly store main-chain assets, they have im-
portant beneﬁts, including high performance and the ability to perform conﬁdential
computation. Executables run autonomously on a DON and perform deterministic
operations. They work in hand with adapters that link the DON to external resources
and may be called by executables. Adapters, as we envision them for DONs, are a
generalization of the external adapters in Chainlink today. While existing adapters
typically only fetch data from data sources, adapters may operate bidirectionally; in
DONs, they may additionally leverage joint computation by DON nodes to achieve
additional features, such as encrypting reports for privacy-preserving consumption by
an executable.
To provide a sense of a DON’s basic operation, Fig. 1 shows conceptually how a
DON might be used to send reports to a blockchain and thus achieve traditional, exist-
ing oracle functionality. DONs can provide many additional features, however, beyond
1The “CIA triad” of information security [123, p. 26, §2.3.5].
7
Chainlink’s existing networks. For example, within the general structure of Fig. 1,
the executable could record fetched asset-price data on the DON, using such data to
compute, e.g., a trailing average for its reports.
Figure 1: Conceptual ﬁgure showing as an example how a Decentralized Oracle Net-
work can realize basic oracle functionality, i.e., relay oﬀ-chain data to a contract. An
executable uses adapters to fetch oﬀ-chain data, which it computes on, sending output
over another adapter to a target blockchain. (Adapters are initiated by code in the
DON, represented by small blue boxes; arrows show the direction of data ﬂow for this
particular example.) The executable can additionally read and write to local DON
storage to keep state and/or communicate with other executables. Flexible network-
ing, computation, and storage in DONs, all represented here, enable a host of novel
applications.
AmajorbeneﬁtofDONsistheirabilitytobootstrapnewblockchainservices. DONs
areavehiclebywhichexistingoraclenetworkscanquicklystandupserviceapplications
that would today require the creation of purpose-built networks. We give a number of
examples of such applications in Section 4.
In Section 3, we provide more details on DONs, describing their capabilities in
terms of the interface they present to developers and users.
1.2 Seven Key Design Goals
Here we brieﬂy review the seven key focuses enumerated above for the evolution of
Chainlink, namely:
8
Hybrid smart contracts: Central to our vision for Chainlink is the idea of securely
combining on-chain and oﬀ-chain components in smart contracts. We refer to contracts
realizing this idea as hybrid smart contracts or hybrid contracts.2
Blockchains are and will continue to play two critical roles in decentralized-service
ecosystems: They are both the loci where cryptocurrency ownership is represented
and robust anchors for decentralized services. Smart contracts must therefore be repre-
sented or executed on chain, but their on-chain capabilities are severely limited. Purely
on-chaincontractcodeisslow, expensive, andinsular, unabletobeneﬁtfromreal-world
data and a variety of functionalities that are inherently unachievable on chain, includ-
ingvariousformsofconﬁdentialcomputation,generationof(pseudo)randomnesssecure
against miner / validator manipulation, etc.
For smart contracts to realize their full potential therefore requires smart contracts
to be architected with two parts: an on-chain part (which we typically denote by SC)
and an oﬀ-chain part, an executable running on a DON (which we typically denote by
exec). The goal is to achieve a secure composition of on-chain functionality with the
multiplicity of oﬀ-chain services that DONs aim to provide. Together, the two parts
make up a hybrid contract. We present the idea conceptually in Fig. 2. Already today,
Chainlink services3 such as data feeds and VRFs are enabling otherwise unachievable
smart contract applications, ranging from DeFi to fairly generated NFTs to decentral-
ized insurance, as ﬁrst steps toward a more general framework. As Chainlink services
expand and grow more performant according to our vision in this whitepaper, so too
will the power of smart contract systems across all blockchains.
Our other six key focuses in this whitepaper may be viewed as acting in the service
of the ﬁrst, overarching one of hybrid contracts. These focuses involve removing visible
complexity from hybrid contracts, creating additional oﬀ-chain services that enable the
construction of ever more capable hybrid contracts, and, in the case of trust minimiza-
tion, bolstering the security properties achieved by hybrid contracts. We leave the idea
of hybrid contracts implicit throughout much of the paper, but any combination of
MAINCHAIN logic with a DON may be viewed as a hybrid contract.
Abstracting away complexity: DONs are designed to make use of decentralized
systemseasyfordevelopersandusersbyabstractingawaytheoftencomplexmachinery
behind DONs’ powerful and ﬂexible array of services. Existing Chainlink services
already have this feature. For example, data feeds in Chainlink today present on-
chain interfaces that do not require developers to concern themselves with protocol-
level details, such as the means by which OCR enforces consensus reporting among a
2Theideaofon-chain/oﬀ-chaincontractcompositionhasarisenpreviouslyinvariousconstrained
forms, e.g., layer-2 systems, TEE-based blockchains [80], etc. Our goal is to support and generalize
these approaches and ensure that they can encompass oﬀ-chain data access and other key oracle
services.
3Chainlinkservicescompriseavarietyofdecentralizedservicesandfunctionalityavailablethrough
thenetwork. Theyareoﬀeredbythenumerousnodeoperatorscomposedintovariousoraclenetworks
across the ecosystem.
9
Figure 2: Conceptual ﬁgure depicting on-chain / oﬀ-chain contract composition. A
hybrid smart contract (cid:13)3 consists of two complementary components: an on-chain
component SC(cid:13)1, resident on a blockchain, and an oﬀ-chain component exec(cid:13)2 that
executes on a DON. The DON serves as a bridge between the two components as well
as connecting the hybrid contract with oﬀ-chain resources such as web services, other
blockchains, decentralized storage, etc.
decentralized set of nodes. DONs go a step further in the sense that they expand the
range of services for which Chainlink can oﬀer developers an abstraction layer with
accompanying streamlined interfaces for high-level services.
We present several application examples in Section 4 that highlight this approach.
We envision enterprises, for instance, using DONs as a form of secure middleware to
connect their legacy systems to blockchains. (See Section 4.2.) This use of DONs ab-
stracts away the complexity of general blockchain dynamics (fees, reorgs, etc.). It also
abstracts away the features of speciﬁc blockchains, thereby enabling enterprises to con-
nect their existing systems to an ever-broadening array of blockchain systems without
a need for specialized expertise in these systems or, more generally, in decentralized-
systems development.
Ultimately, our ambition is to push the degree of abstraction achieved by Chainlink
to thepoint of implementing what we refer toas adecentralized metalayer. Sucha layer
would abstract away the on-chain / oﬀ-chain distinction for all classes of developers
and users of DApps, allowing seamless creation and use of decentralized services.
10
To simplify the development process, developers could specify DApp functional-
ity in the metalayer as a virtual application in a uniﬁed machine model. They could
then use a decentralized-metalayer compiler to instantiate the DApp automatically as
a set of interoperating decentralized functionalities spanning blockchains, DONs, and
external services. (One of these external services could be an enterprise system, mak-
ing the metalayer useful for applications involving legacy enterprise systems.) Such
compilation is akin to how modern compilers and software-development kits (SDKs)
support generalist programmers in using the full potential of heterogeneous hardware
architectures consisting of a general-purpose CPU and specialized hardware like GPUs,
machine-learning accelerators, or trusted enclaves. Fig. 3 presents this idea at a con-
ceptual level.
Hybrid smart contracts are a ﬁrst step along the way to this vision and to a con-
cept we call meta contracts. Meta contracts are applications coded on a decentralized
metalayer and implicitly encompass on-chain logic (smart contracts), as well as oﬀ-
chain computation and connectivity among various blockchains and existing oﬀ-chain
services. Given the need for language and compiler support, new security models, and
conceptual and technical harmonization of disparate technologies, however, realization
of a true decentralized metalayer is an ambitious goal to which we aspire over a long
time horizon. It is nonetheless a helpful ideal model to keep in mind while reading
this paper, not detailed here, but something we plan to focus on in our future work on
Chainlink.
Scaling: A goal of preeminent importance in our evolving designs is enabling the
Chainlink network to meet the growing scaling needs of the blockchain ecosystem.
With network congestion becoming a recurring problem in existing permissionless
blockchains [86], new and more performant blockchain designs are coming into use,
e.g., [103, 120, 203], as well as complementary layer-2 scaling technologies, e.g., [5,
12, 121, 141, 169, 186, 187]. Oracle services must achieve latencies and throughputs
that meet the performance demands of these systems while minimizing on-chain fees
(e.g., gas costs) for contract operators and ordinary users alike. With DONs, Chainlink
functionality aims to go further and deliver performance high enough for purely web-
based systems.
DONs derive much of their performance gain from their use of fast, committee-
based or permissionless consensus protocols, which they combine with the blockchains
they support. We expect many DONs with diﬀerent conﬁgurations to run in paral-
lel; diﬀerent DApps and users can navigate tradeoﬀs in underlying consensus choices
according to their application requirements.
DONs may be viewed in eﬀect as layer-2 technologies. We expect that among
other services, DONs will support the Transaction Execution Framework (TEF), which
facilitates eﬃcient integration of DONs and thus oracles with other high-performance
layer-2 systems—e.g., rollups, systems which bundle transactions oﬀ chain to achieve
performance improvements. We introduce the TEF in Section 6.
11
Figure 3: Conceptual ﬁgure showing ideal realization of a decentralized metalayer. For
ease of development, a developer speciﬁes a DApp, highlighted in pink, as a virtual
application in a uniﬁed machine model. A decentralized-metalayer compiler automati-
cally generates corresponding interoperating functionalities: smart contracts (denoted
by SC), logic (denoted by exec) on DONs, adapters connecting to target external ser-
vices, and so forth, as indicated in yellow highlight.
Fig. 4 shows conceptually how DONs improve blockchain (smart contract) scaling
by concentrating transaction and oracle-report processing oﬀ chain, rather than on
chain. This shift in the main locus of computation reduces transaction latency and
fees while boosting transaction throughput.
Conﬁdentiality: Blockchains provide unprecedented transparency for smart con-
tracts and the applications they realize. But there is a basic tension between trans-
parency and conﬁdentiality. Today, for example, users’ decentralized exchange trans-
12
Figure 4: Conceptual ﬁgure showing how Decentralized Oracle Networks improve the
scaling of blockchain-enabled smart contracts. Figure(cid:13)A shows a conventional oracle
architecture. Transactions are sent directly to the blockchain, as are oracle reports.
Thus the blockchain, highlighted in yellow, is the main locus for transaction process-
ing. Figure(cid:13)B shows use of a DON to support contracts on the blockchain. A DON
executable processes transactions along with data from external systems and forwards
results—e.g., bundled transactions or contract state changes resulting from the trans-
actions’ eﬀects—to the blockchain. The DON, highlighted in yellow, is thus the main
locus for transaction processing.
actions are recorded on chain, making it easy to monitor exchange behavior, but also
making users’ ﬁnancial transactions publicly visible. Similarly, data relayed to smart
contracts remains on chain. This makes such data conveniently auditable, but acts as
a disincentive for data providers wishing to furnish smart contracts with sensitive or
proprietary data.
Webelievethatoraclenetworkswillplayapivotalroleincatalyzingnext-generation
systems that combine blockchains’ innate transparency with new conﬁdentiality pro-
tections. In this paper, we show how they will do so using three main approaches:
• Conﬁdentiality-preserving adapters: Two technologies with planned deployment
inChainlink’snetworks,DECO[234]andTownCrier[233],enableoraclenodesto
retrieve data from oﬀ-chain systems in ways that protect user privacy and data
conﬁdentiality. They will play a key role in the design of adapters for DONs.
(See Section 3.6.2 for details on these two technologies.)
• Conﬁdential computation: DONs can simply conceal their computation from re-
lying blockchains. Using secure multi-party computation and/or trusted execu-
tion environments, stronger conﬁdentiality is also possible in which DON nodes
compute over data into which they themselves do not have visibility.
13
• Support for conﬁdential layer-2 systems: The TEF is designed to support a va-
riety of layer-2 systems, many of which use zero-knowledge proofs to provide
various forms of transaction conﬁdentiality.
We discuss these approaches in Section 3 (with additional details in Section 6, Ap-
pendix B.1, and Appendix B.2).
Fig. 5 presents a conceptual view of how sensitive data might ﬂow from exter-
nal sources to a smart contract by means of conﬁdentiality-preserving adapters and
conﬁdential computation in a DON.
Figure 5: Conceptual diagram of conﬁdentiality-preserving operations in a DON on
sensitive data (highlighted in yellow). Sensitive source data (black circles) in web
serversisextractedtotheDONusingconﬁdentiality-preservingadapters(blue, double-
arrowed lines). The DON receives derived data (hollow circles) from these adapters—
the result of applying either a function or, e.g., secret-sharing, to the sensitive source
data. An executable on the DON may apply conﬁdential computation to derived data
to construct a report (double circle), which it sends over an adapter to the blockchain.
We believe that powerful tools for handling conﬁdential data will open up a whole
range of applications. Among these are private decentralized (and centralized) ﬁ-
nance, decentralized identity, credit-based on-chain lending, and more eﬃcient and
user-friendly know-your-customer and accreditation protocols, as we discuss in Sec-
tion 4.
Order-fairness for transactions: Today’s blockchain designs have a dirty little
open secret: They are ephemerally centralized. Miners and validators can order trans-
14
actions however they choose. Transaction order can also be manipulated by users as
a function of the network fees they pay (e.g., gas prices in Ethereum) and to some
extent by taking advantage of fast network connections. Such manipulation can, for
example, take the form of front-running, in which a strategic actor such as a miner
observes a user’s transaction and inserts its own exploitative transaction into an earlier
position in the same block—eﬀectively stealing money from the user by leveraging ad-
vance knowledge of the user’s transaction. For example, a bot may place a buy order
before a user’s. It can then take advantage of the asset price increase induced by the
user’s trade.
Front-runningbysomebotsthatharmsordinaryusers—analogoustohigh-frequency
trading on Wall Street—is already prevalent and well documented [90], as are related
attacks such as back-running [159] and automated transaction mimicking [195]. Pro-
posals to systematize order exploitation by miners have even surfaced recently [110].
Layer-2technologiessuchasrollupsdon’tsolvetheproblem,butmerelyre-centralize
ordering, placing it in the hands of the entity that creates a rollup.
One of our goals is to introduce into Chainlink a service called Fair Sequencing
Services (FSS) [137]. FSS helps smart contract designers ensure fair ordering for their
transactions and avoid front-running, back-running, and related attacks on user trans-
actions as well as other types of transactions, such as oracle report transmission. FSS
enables a DON to implement ideas such as the rigorous, temporal notion of order-
fairnessintroducedin[144]. Asanincidentalbeneﬁt, FSScanalsolower users’ network
fees (e.g., gas costs).
Brieﬂy, in FSS, transactions pass through the DON, rather than propagating di-
rectly to a target smart contract. The DON orders the transactions and then forwards
them to the contract.
Figure 6: Example of how FSS is beneﬁcial. Fig.(cid:13)A shows how a miner, exploiting its
centralizedpowertoordertransactions, mayswapapairoftransactions: transaction(cid:13)1
arrives before(cid:13)2, but the miner instead sequences it after(cid:13)2. In contrast, Fig.(cid:13)B shows
how a DON decentralizes the ordering process among DON nodes. If a quorum of
honest nodes receive (cid:13)1 before (cid:13)2, the FSS causes (cid:13)1 to appear before (cid:13)2 on chain—
preventing miner reordering by attaching contract-enforceable sequence numbers.
Fig. 6 compares standard mining with FSS. It shows how in standard mining,
15
the process of transaction ordering is centralized with the miner and thus subject to
manipulation, such as reordering a pair of transactions with respect to their arrival
times. In contrast, in FSS, the process is decentralized among DON nodes. Assuming
a quorum of honest nodes, FSS helps enforce policies such as temporal ordering of
transactions, reducing opportunities for manipulation by miners and other entities.
Additionally, since users need not compete for preferential ordering based on gas price,
theycanpayrelativelylowgasprices(whiletransactionsfromtheDONcanbebatched
for gas savings).
Trust minimization: Our general aim in the design of DONs is to facilitate a highly
trustworthy layer of support for smart contracts and other oracle-dependent systems
by means of decentralization, cryptographic tools, and cryptoeconomic guarantees.
A DON itself is decentralized, and users can choose from any available DON that
supports the main chain on which they wish to operate or spawn additional DONs
with committees of nodes they trust.
For some applications, however, particularly smart contracts, Chainlink users may
favoratrustmodelthattreatsthemainchainsupportedbyaDONasmoretrustworthy
than the DON itself. For such users, we already have or plan to incorporate into the
architecture of the Chainlink network a number of mechanisms that enable contracts
on a main chain to strengthen the security assurances provided by DONs, while at the
same time also enforcing protections against the possibility of corrupted data sources
such as the web servers from which the DON obtains data.
We describe these mechanisms in Section 7. They fall under ﬁve main headings:
• Data-source authentication: Tools that enable data providers to digitally sign
their data and thereby strengthen the chain of custody between the origin and
relying contract.
• DON minority reports: Flags issued by a minority subset of DON nodes that
observes majority malfeasance in the DON.
• Guard rails: Logic on a main chain that detects anomalous conditions and pauses
or halts contract execution (or invokes other remediations).
• Trust-minimized governance: Use of gradual-release updates to facilitate com-
munity inspection, as well as decentralized emergency interventions for rapid
response to system failures.
• Decentralized entity authentication: Use of public-key infrastructure (PKI) to
identify entities in the Chainlink network.
Fig. 7 presents a conceptual schematic of our trust-minimization goals.
Incentive-based (cryptoeconomic) security: Decentralization of report genera-
tion across oracle nodes helps ensure security even when some nodes are corrupted.
16
Figure 7: Conceptual depiction of Chainlink’s trust-minimization goal, which is to
minimize users’ need for correct behavior of the DON and data sources such as web
servers. Yellow highlights in the ﬁgure indicate trust-minimization loci: the DON and
individual or minority sets of web servers. Pink highlights indicate system components
that are highly trustworthy by assumption: contracts on the blockchain and a majority
of web servers, i.e., web servers in the aggregate.
Equally important, though, is ensuring that nodes have a ﬁnancial incentive to be-
have correctly. Staking, i.e., requiring nodes to provide deposits of LINK and slashing
(conﬁscating) these deposits in case of misbehavior, will play a key role in Chain-
link. It is an important incentive design already used in a number of blockchains,
e.g., [81, 103, 120, 204].
Staking in Chainlink, however, looks very diﬀerent from staking in standalone
blockchains. Staking in blockchains aims to prevent attacks on consensus. It has a
diﬀerent goal in Chainlink: to ensure timely delivery of correct oracle reports. A well-
designed staking system for an oracle network should render attacks such as bribery
unproﬁtable for an adversary, even when the target is a smart contract with high
monetary value.
In this paper, we present a general approach to staking in Chainlink with three key
innovations:
17
1. A powerful adversarial model that encompasses attacks overlooked in existing
approaches. One example is what we call prospective bribery. This is a form of
bribery that determines which nodes receive bribes on a conditional basis, e.g.,
oﬀers guaranteed bribes in advance to nodes that a staking mechanism selects at
random for particular roles (such as triggering report adjudication).
2. Super-linear staking impact, meaning informally that to be successful, an ad-
versary must have a budget $B greater than the combined deposits of all oracle
nodes. More precisely, we mean that as a function of n, $B(n) (cid:29) $dn in a
network of n oracle nodes each with a ﬁxed deposit amount $d (more formally,
$B(n) is asymptotically larger in n than $dn). Fig. 8 gives a conceptual view of
this property.
3. The Implicit-Incentive Framework (IIF), an incentive model we have devised to
encompass empirically measurable incentives beyond explicit deposited staking
funds, including nodes’ future fee opportunities. The IIF extends the notion of
stake beyond explicit node deposits.
Figure 8: Conceptual diagram depicting super-linear scaling in Chainlink staking. The
bribe $B(n) required by an adversary grows faster in n than the combined deposits
$dn of all oracle nodes.
We show how the IIF and super-linear staking impact together induce what we
call a virtuous cycle of economic security for oracle networks. When new users enter
18
the system, increasing potential future earnings from running Chainlink nodes, the
marginal cost of economic security drops for current and future users. In a regime of
elastic demand, this diminished cost incentivizes additional users to make use of the
network, continuously perpetuating adoption in an ongoing virtuous cycle.
Note: While this whitepaper outlines important elements of our vision for the evolu-
tionofChainlink, itisinformalandincludesfewdetailedtechnicalspeciﬁcs. Weplanto
release focused technical papers on additional features and approaches as they evolve.
Furthermore, it is important to emphasize that many elements of the vision presented
here (scaling improvements, conﬁdentiality technologies, FSS, etc.) can and will be
deployed in preliminary form even before advanced DONs become a basic feature of
Chainlink.
1.3 Organization of this Paper
We present our security model and notation in Section 2 and outline the Decentralized
Oracle Network API in Section 3. In Section 4, we present a number of examples of
applications for which DONs provide an appealing deployment platform. Readers can
learn most of the key concepts of the paper by reading up to this point.
The remainder of the paper contains further details. We describe Fair Sequencing
Services (FSS) in Section 5 and the Transaction-Execution Framework (TEF) in Sec-
tion 6. We describe our approach to trust minimization in Section 7. We consider some
important DON deployment requirements, namely incremental rollout of features, dy-
namicledgermembership, andaccountabilityinSection8. Finally,inSection9,wegive
an overview of our developing approach to incentive design. We conclude in Section 10.
To help readers who have limited familiarity with the concepts in this paper, we
provide a glossary in Appendix A. We present further detail on the DON interface
and functionality in Appendix B and present some example adapters in Appendix C.
In Appendix D, we describe a cryptographic primitive for trust-minimized data-source
authentication called functional signatures and introduce a new variant called dis-
cretized functional signatures. We discuss some considerations bearing on committee
selection for DONs in Appendix F.
2 Security Model and Goals
A Decentralized Oracle Network is a distinct distributed system that we expect will
initially be implemented typically—although not necessarily—by a committee-based
consensus protocol and run by a set of oracle nodes. A DON is designed primarily
to augment the capabilities of a smart contract on a main chain with oracle reports
and other services, but it can provide those same supporting services to other non-
blockchain systems, and thus need not be associated with a particular main chain.
19
The model and properties we consider are therefore largely independent of the use of
the particular applications of a DON.
2.1 Current Architectural Model
ItisimportanttoemphasizethatChainlinktodayisnotamonolithicservice,butrather
a permissionless framework within which it is possible to launch distinct, independent
networks of oracle nodes [77]. Networks have heterogeneous sets of node operators and
designs. They may also diﬀer in terms of the types of services they provide, which can
include, e.g., data feeds, Proof of Reserves, veriﬁable randomness, and so forth. Other
diﬀerences can include the degree of decentralization, size of the network in terms of
locked value it supports, and various service-level parameters, such as data frequency
and accuracy.
Chainlink’s permissionless model encourages the growth of an ecosystem in which
providers specialize in the services they are best able to furnish to the community. This
model is likely to result in lower costs to users and higher service quality than a model
that requires all nodes and networks to provide a full range of services, an approach
that can easily devolve into system-wide adoption of the services representing the least
common denominator of resources available to nodes.
As Chainlink evolves toward DON-based designs in Chainlink 2.0, we continue to
support the model of a permissionless, open framework, keeping in view the goal of
providing users with a range of service choices that globally result in the best match
with particular application requirements.
2.2 Consensus Assumptions
We use the term Decentralized Oracle Network to encompass the full functionality of
the oracle system we describe: both the data structure that oracle nodes maintain and
the core API layered on top of it.
We use the term ledger (lower case), denoted by L, to mean the underlying data
structure maintained by a DON and used to support the particular services it provides.
We emphasize that our DON framework does not treat L as a freestanding system like
a blockchain: Its purpose is to support blockchains and other systems. Blockchains are,
of course, one way of realizing a trustworthy ledger, but there are others. We expect
DONs in many cases to realize their underlying ledgers using Byzantine Fault Tolerant
(BFT) systems, which considerably predate blockchains such as Bitcoin [174]. We use
BFT-type notation and properties throughout the paper for convenience, although we
emphasize that DONs can be realized using permissionless consensus protocols.
Conceptually, a ledger L is a bulletin board on which data is linearly ordered.
We view a ledger generally as having a few key properties commonly ascribed to
blockchains [115]. A ledger is:
• Append-only: Data, once added, cannot be removed or modiﬁed.
20
• Public: Anyone can read its contents, which are consistent across time in the
view of all users.4
• Available: The ledger can always be written to by authorized writers and read
by anyone in a timely way.
Alternative properties are possible in the ledger for a DON when realized by a
committee. For instance, ledger write access might be restricted to certain users, as
might read access for some applications, i.e., the ledger need not be public as deﬁned
above. Similarly, ledger rules might permit modiﬁcation or redaction of data. We don’t
explicitly consider such variants in this paper, however.
The modular design of DONs can support any of a wide variety of modern BFT
protocols, e.g., Hotstuﬀ [231]. The exact choice will depend on trust assumptions and
networkcharacteristicsamongtheoraclenodes. ADONcouldinprinciplealternatively
useahighlyperformantpermissionlessblockchainforitsledgerinitsrolesupportingan
equally scalable layer-2 or blockchain system. Similarly, hybridization is also possible:
The DON could in principle be composed of nodes that are validators in an existing
blockchain, e.g., in Proof-of-Stake systems in which committees are selected to execute
transactions, e.g.,[8,81,120,146,204]. Thisparticularmodeofoperationrequiresthat
nodes operate in a dual-use manner, i.e., operate both as blockchain nodes and DON
nodes. (See Section 8.2 for a discussion of techniques to ensure continuity in changing
committees and Appendix F for some caveats on random committee selection.)
In practice, in modern BFT algorithms, nodes digitally sign messages on the ledger.
WeassumeforconveniencethatLhasanassociatedpublickeypk andthatitscontents
L
are signed by the corresponding private key. This general notation applies even when
data on L are signed using threshold signatures.5 Threshold signatures are convenient,
as they enable a persistent identity for a DON even with changes of membership in
the nodes running it. (See Appendix B.1.3.) We thus assume that sk is secret-shared
L
in a (k,n)-threshold manner for some security parameter k, e.g., k = 2f + 1 and
n = 3f +1, where f is the number of potentially faulty nodes. (By choosing k in this
way, we ensure that faulty nodes can neither learn sk nor mount a denial-of-service
L
attack preventing its use.)
A message on L takes the form M = (m,z), where m is a string and z a unique
sequential index number. Where applicable, we write messages in the form m =
hMessageType : payloadi. The message type MessageType is syntactic sugar that in-
dicates the function of a particular message.
4Incaseswhereablockchainwithoutﬁnalityrealizesaledger,inconsistencyistypicallyabstracted
away by disregarding insuﬃciently deep blocks or “pruning” [115].
5In practice, some code bases, e.g., LibraBFT [205], a variant of Hotstuﬀ, have currently adopted
multi-signatures, rather than threshold signatures, trading oﬀ reduced communication complexity for
simplerengineering. Withsomeaddedcost,oraclenodescanappendthresholdsignaturestomessages
written to L even if the consensus protocol used for L doesn’t employ them.
21
2.3 Notation
We denote the set of n oracle nodes running the ledger by O = {O }n . Such a
i i=1
set of nodes is often called a committee. For simplicity, we assume that the set of
oracles implementing DON functionality, i.e., services on top of L, is identical with
that maintaining L, but they can be distinct. We let pk denote the public key of
i
player O , and sk the corresponding private key.
i i
Most BFT algorithms require at least n = 3f +1 nodes, where f is the number of
potentially faulty nodes; remaining nodes are honest, in the sense that they follow the
protocol exactly as speciﬁed. We refer to the committee O as honest if it meets this
requirement, i.e., has greater than a 2/3-fraction of honest nodes. Unless otherwise
stated, we assume that O is honest (and a static model of corruption). We use pk /
O
sk interchangeably with pk / sk , depending on the context.
O L L
We let σ = Sig [m] denote a signature on message m with respect to pk, i.e., using
pk
corresponding private key sk. Let verify(pk,σ,m) → {false,true} denote a corre-
sponding signature veriﬁcation algorithm. (We leave key generation implicit through-
out the paper.)
We use the notation S to denote a data source and S to denote the full set of
n sources in a given context. We denote by MAINCHAIN a smart-contract enabled
S
blockchain supported by a DON. We use the term relying contract to denote any smart
contract on MAINCHAIN that communicates with a DON, and use the notation SC to
denote such a contract.
We generally assume that a DON supports a single main chain MAINCHAIN, al-
though it can support multiple such chains, as we show in examples in Section 4. A
DON can and typically will support multiple relying contracts on MAINCHAIN. (As
noted above, a DON can alternatively support non-blockchain services.)
2.4 Note on Trust Models
Asnotedabove, DONsmaybebuiltatopcommittee-basedconsensusprotocols, andwe
expect they will commonly use such protocols. There are many strong arguments that
one of the two alternatives, committee-based or permissionless blockchains, provides
stronger security than the other.
It is important to recognize that the security of committee-based vs. permissionless
decentralized systems is incommensurable. Compromising a PoW or a PoS blockchain
via 51% attack requires that an adversary obtain majority resources ephemerally and
potentially anonymously, for example by renting hash power in a PoW system. Such
attacks in practice have already impacted several blockchains [200, 34]. In contrast,
compromising a committee-based system means corrupting a threshold number (typi-
cally one-third) of its nodes, where the nodes may be publicly known, well resourced,
and trustworthy entities.
On the other hand, committee-based systems (as well as “hybrid” permissionless
systems that support committees) can support more functionality than strictly per-
22
missionless systems. This includes the ability to maintain persistent secrets, such as
signing and/or encryption keys—one possibility in our designs.
WeemphasizethatDONscaninprinciplebebuiltatopeitheracommittee-basedor
permissionless consensus protocol and DON deployers may ultimately choose to adopt
either approach.
Bolstering trust models: A key feature of Chainlink today is the ability of users to
select nodes based on decentralized records of their performance histories, as discussed
in Section 3.6.4. The staking mechanism and Implicit-Incentive Framework we intro-
duce in Section 9 together constitute a broadly scoped and rigorous mechanism-design
framework that will empower users with a greatly expanded ability to gauge the secu-
rity of DONs. This same framework will also make it possible for DONs themselves
to enforce various security requirements on participating nodes and ensure operation
within strong trust models.
It is also possible using tools described in this paper for DONs to enforce spe-
cial trust-model requirements, such as compliance with regulatory requirements. For
example, using techniques discussed in Section 4.3, nodes can present evidence of
node-operator characteristics, e.g., territory of operation, that can be used to help
enforce compliance with, e.g., the General Data Protection Regulation (GDPR) Ar-
ticle 3 (“Territorial Scope”) [105]. Such compliance can otherwise be challenging to
meet in decentralized systems [45].
Additionally, in Section 7 we discuss plans to strengthen the robustness of DONs
through trust-minimization mechanisms on the main chains they support.
3 Decentralized Oracle Network Interface and Ca-
pabilities
Here we brieﬂy sketch the capabilities of DONs in terms of the simple but powerful
interface they are designed to realize.
Applications on a DON are composed of executables and adapters. An executable is
a program whose core logic is a deterministic program, analogous to a smart contract.
An executable also has a number of accompanying initiators, programs that call entry
pointsintheexecutable’slogicwhenpredeterminedeventsoccur—e.g., atcertaintimes
(like a cron job), when a price crosses a threshold, etc.—much like Keepers (see Sec-
tion 3.6.3). Adapters provide interfaces to oﬀ-chain resources and may be called by
either the initiators or core logic in executables. As their behavior may depend on that
of external resources, initiators and adapters may behave non-deterministically.
We describe the DON developer interface and the functioning of executables and
adapters in terms of the three resources typically used to characterize computing sys-
tems: networking, compute, and storage. We give a brief overview of each of these
resources below and provide more details in Appendix B.
23
3.1 Networking
Adapters are interfaces through which executables running on a DON can send and
receive data from oﬀ-DON systems. Adapters may be viewed as a generalization of
the adapters used in Chainlink today [20]. Adapters may be bidirectional—i.e., they
cannot just pull, but push data from a DON to a web server. They may also leverage
distributed protocols as well as cryptographic functionality such as secure multi-party
computation.
Figure 9: Adapters connecting a DON, denoted DON , with a range of diﬀerent re-
1
sources, including another DON, denoted DON , a blockchain (main chain) and its
2
mempool, external storage, a web server, and IoT devices (via a web server).
Examples of external resources for which adapters might be created are shown
in Fig. 9. They include:
• Blockchains: An adapter can deﬁne how to send transactions to a blockchain and
how to read blocks, individual transactions, or other state from it. An adapter
can also be deﬁned for a blockchain’s mempool. (See Section 3.5.)
• Web servers: Adapters can deﬁne APIs through which data may be retrieved
from web servers, including legacy systems that are not specially adapted for
interfacing with DONs. Such adapters can also include APIs to send data to
such servers. The web servers to which a DON connects may serve as gateways
to additional resources, such as Internet-of-Things (IoT) devices.
24
• External storage: An adapter can deﬁne methods to read and write to storage
services outside the DON, such as a decentralized ﬁle system [40, 188] or cloud
storage.
• Other DONs: Adapters can retrieve and transmit data between DONs.
We expect that initial deployments of DONs will include a set of building block
adaptersforsuchcommonlyusedexternalresourcesandwillfurtherallowDON-speciﬁc
adapters to be published by DON nodes. As smart contract developers write adapters
today, we expect that they will build even more powerful adapters using this advanced
functionality.
We expect that ultimately it will be possible for users to create new adapters in a
permissionless manner.
Some adapters must be constructed in a way that ensures the persistence and avail-
ability of external resources controlled by a DON. For example, cloud storage may
require maintenance of a cloud services account. Additionally, a DON can perform
decentralized management of private keys on behalf of users (as in, e.g., [160]) and/or
executables. Consequently, the DON is capable of controlling resources, such as cryp-
tocurrency, that may be used, e.g., for sending transactions on a target blockchain.
See Appendix B.1 for further details on DON adapters, as Appendix C for a few
example adapters.
3.2 Computation
An executable is the basic unit of code on a DON. An executable is a pair exec =
(logic,init). Here, logic is a deterministic program with a number of designated entry
points (logic ,logic ,...,logic ) and init is a set of corresponding initiators
1 2 ‘
(init ,init ,...,init ). To ensure the full auditability of the DON, an executable’s logic
1 2 e
uses the underlying ledgerL for all inputs and outputs. Thus, for instance, any adapter
data serving as input to an executable must be stored ﬁrst on L.
Initiators: Initiators in Chainlink today cause event-dependent job executions on
Chainlink nodes [21]. Initiators in DONs function in much the same way. A DON ini-
tiator, however, is speciﬁcally associated with an executable. An initiator may depend
on an external event or state, on the current time, or on a predicate on DON state.
Withtheirdependencyonevents, initiatorsmayofcoursebehavenon-deterministically
(as of course may adapters). An initiator can execute within individual DON nodes
and so need not rely on an adapter. (See Example 1 below.)
Initiators are an important feature distinguishing executables from smart contracts.
Because an executable can run in response to an initiator, it can eﬀectively operate
autonomously, as of course by extension can a hybrid contract incorporating the exe-
cutable. One form of initiators today are Chainlink Keepers, which provide transaction
25
automation services, triggering smart contract execution—such as liquidation of un-
dercollateralized loans and execution of limit-order trades—based on oracle reports.
Conveniently, initiators in DONs may also be viewed as a way of specifying the
service agreements that apply to an executable, as they deﬁne the circumstances under
which the DON must call it.
The following example illustrates how initiators work within an executable:
Example 1 (Deviation-triggered price feed). A smart contract SC may require fresh
price-feed data (see Section 3.6.3) whenever there is a substantial change, e.g., 1%, in
the exchange rate between a pair of assets, e.g., ETH-USD. Volatility-sensitive price
feeds are supported in Chainlink today, but it is instructive to see how they can be
realized on a DON by means of an executable exec .
feed
The executable exec maintains the most recent ETH-USD price r on L, in the
feed
form of a sequence of hNewPrice : j,ri entries, where j is an index incremented with
each price update.
An initiator init causes each node O to monitor the current ETH-USD price for
1 i
deviations of at least 1% from the most recently stored price r with index j. Upon
detection of such a deviation, O writes its current view r of the new price to L using
i i
an entry of the form hPriceView : i,j +1,r i.
i
A second initiator init ﬁres when at least k such PriceView-entries with new price
2
values for index j + 1 created by distinct nodes have accumulated on L. Then, init
2
invokes an entry point logic to compute the median ρ of the ﬁrst k fresh, valid price-
2
view values and writes a fresh value hNewPrice : j +1,ρi to L . (Operationally, nodes
may take turns as designated writers.)
A third initiator init watches for NewPrice entries on L. Whenever a new report
3
hNewPrice : j,ri appears there, it invokes an entry point logic that pushes (j,r) to SC
3
using an adapter.
As we have noted, an executable is similar in its capabilities to a smart contract.
Apartfromitshigherperformance, though, itdiﬀersfromatypicalmainchaincontract
in two essential ways:
1. Conﬁdentiality: An executable can perform conﬁdential computation, i.e., a se-
cret program may process cleartext inputs, or a published program may process
secret input data, or a combination of both. In a simple model, secret data can
be accessed by DON nodes, which conceal intermediate results and disclose only
processed and sanitized values to MAINCHAIN. It is also possible to conceal sen-
sitive data from DONs themselves: DONs are meant to support approaches such
as multi-party computation, e.g., [42, 157], and trusted execution environments
(TEEs) [84, 133, 152, 229] for this purpose.6
6By extension, keeping executables themselves secret with respect to DON nodes is also possible,
although this is only practical today for non-trivial executables using TEEs.
26
2. Supporting role: An executable is meant to support smart contracts on a main
chain, rather than replace them. An executable has several limitations that a
smart contract does not:
(a) Trust model: An executable operates within the trust model deﬁned by the
DON: Its correct execution relies on the honest behavior of O. (A main
chain can, however, provide some guard rails against DON malfeasance, as
discussed in Section 7.3.)
(b) Asset access: A DON can control an account on a blockchain—and thus
control assets on it through an adapter. But a DON cannot authoritatively
represent assets created on a main chain, e.g., Ether or ERC20 tokens, since
their native chain maintains the authoritative record of their ownership.
(c) Lifecycle: DONs may be stood up intentionally with limited lifetimes, as
deﬁned by on-chain service level agreements between DONs and the owners
of relying contracts. Blockchains, in contrast, are meant to function as
permanent archival systems.
See Appendix B.2 for further details on DON computation.
3.3 Storage
As a committee-based system, a DON can store moderate amounts of data persistently
on L at much lower cost than a permissionless blockchain. Additionally, via adapters,
DONs can reference external decentralized systems for data storage, e.g., Filecoin [85],
and can thereby connect such systems to smart contracts. This option is particularly
attractive for bulk data as a means of addressing the pervasive problem of “bloat” in
blockchain systems.
DONs can thus store data locally or externally for use in their speciﬁcally sup-
ported services. A DON can additionally make use of such data in a conﬁdential way,
computing on data that is: (1) secret-shared across DON nodes or encrypted under
a key managed by DON nodes in ways suitable for secure multi-party computation
or partial or fully homomorphic encryption; or (2) protected using a trusted execution
environment.
We expect that DONs will adopt a simple memory-management model common to
smart-contractsystems: Anexecutablemayonlywritetoitsownmemory. Executables
may, however, read from the memory of other executables.
See Appendix B.3 for further details on DON storage.
3.4 Transaction-Execution Framework (TEF)
DONs are intended to support contracts on a main chain MAINCHAIN (or on multi-
ple main chains). The Transaction-Execution Framework (TEF), discussed in detail
27
in Section 6, is a general-purpose approach to the eﬃcient execution of a contract
SC across MAINCHAIN and a DON. The TEF is intended to support FSS and layer-2
technologies—simultaneously, if desired. Indeed, it is likely to serve as the main vehicle
for use of FSS (and for that reason, we do not further discuss FSS in this section).
Brieﬂy,inTEFanoriginaltargetcontractSCdesignedordevelopedforMAINCHAIN
is refactored into a hybrid contract. This refactoring produces the two interoperating
pieces of the hybrid contract: a MAINCHAIN contract SC that we refer to for clarity
a
in the context of TEFs as an anchor contract and an executable exec on a DON. The
s
contract SC custodies users’ assets, executes authoritative state transitions, and also
a
provides guard rails (see Section 7.3) against failures in the DON. The executable exec
s
sequences transactions and provides associated oracle data for them. It can bundle
transactions for SC in any of a number of ways—e.g., using validity-proof-based or
a
optimistic rollups, conﬁdential execution by the DON, etc.
We expect to develop tools that make it easy for developers to partition a contract
SC written in a high-level language into pieces of MAINCHAIN and DON logic, SC and
a
exec respectively, that compose securely and eﬃciently.
s
UsingTEFtointegratehigh-performancetransactionschemeswithhigh-performance
oracles is integral to our oracle scaling approach.
3.5 Mempool Services
An important application-layer feature that we intend to deploy on DONs in support
of FSS and the TEF are Mempool Services (MS). MS may be viewed as an adapter,
but one with ﬁrst-class support.
MS provides support for legacy-compatible transaction processing. In this use, MS
ingests from a main chain’s mempool those transactions intended for a target contract
SC on MAINCHAIN. MS then passes these transactions to an executable on the DON,
where they are processed in the desired way. MS data can be used by the DON
to compose transactions that can then be passed directly to SC from the DON or
to another contract that calls SC. For example, the DON can forward transactions
harvested via MS, or it can use MS data to set gas prices for transactions it sends to
MAINCHAIN.
Because it monitors the mempool, MS can obtain transactions from users inter-
acting directly with SC. Thus users may continue to generate their transactions using
legacy software, i.e., applications unaware of the existence of MS and MS-conﬁgured
contracts. (In this case, SC must be changed to ignore the original transactions and
accept only those processed by the MS, so as to avoid double-processing.)
For use with a target contract SC, MS can be used with FSS and/or the TEF.
28
3.6 Stepping Stones: Existing Chainlink Capabilities
3.6.1 Oﬀ-Chain Reporting (OCR)
Oﬀ-Chain Reporting (OCR) [60] is a mechanism in Chainlink for oracle report aggrega-
tion and transmission to a relying contract SC. Recently deployed for Chainlink price
feed networks, it represents a ﬁrst step along the path to full DONs.
At its core, OCR is a BFT protocol designed to operate in a partially synchronous
network. It ensures liveness and correctness in the presence of f < n/3 arbitrarily
faulty nodes, guaranteeing the properties of Byzantine reliable broadcast, but it is not
a complete BFT consensus protocol. Nodes do not maintain message logs that are
consistent in the sense of representing a ledger that is identical in all of their views,
and the leader of the protocol may equivocate without violating safety.
OCR is currently designed for a particular message type: medianized aggregation of
(at least 2f+1) values reported by participating nodes. It provides a key assurance on
the reports it outputs for SC, called attested reports: The median value in an attested
report is equal to or lies between values reported by two honest nodes. This property is
the key safety condition for OCR. The leader may have some inﬂuence on the median
value in an attested report, but only subject to this correctness condition. OCR can
be extended to message types that aggregate values in diﬀerent ways.
While the Chainlink network’s liveness and correctness goals today do not require
OCR to be a full-blown consensus protocol, they do require OCR to provide some addi-
tional forms of functionality not present in conventional BFT protocols, most notably:
1. All-or-nothing oﬀ-chain report broadcast: OCR ensures that an attested report
is made quickly available to all honest nodes or none of them. This is a fairness
property that helps ensure that honest nodes have an opportunity to participate
in attested report transmission.
2. Reliable transmission: OCR ensures, even in the presence of faulty or malicious
nodes, that all OCR reports and messages are transmitted to SC within a certain,
pre-deﬁned interval of time. This is a liveness property.
3. Contract-based trust minimization: SC ﬁlters out potentially erroneous OCR-
generated reports, e.g., if their reported values deviate signiﬁcantly from other
recently received ones. This is a form of extra-protocol correctness enforcement.
All three of these properties will play a natural role in DONs. All-or-nothing oﬀ-
chain (DON) broadcast is an important building block for cryptoeconomic assurances
around reliable transmission, which is in turn an essential adapter property. Trust
minimization in SC is a type of guard rail, as discussed in Section 7.3.
OCR also provides a basis for operational deployment and reﬁnement of BFT pro-
tocols in Chainlink’s oracle networks and thus, as noted above, a path to the full
functionality of DONs.
29
3.6.2 DECO and Town Crier
DECO [234] and Town Crier [233] are a pair of related technologies currently being
developed in Chainlink networks.
Mostwebserverstodayallowuserstoconnectoverasecurechannelusingaprotocol
called Transport Layer Security (TLS) [94]. (HTTPS indicates a variant of HTTP that
is enabled with TLS, i.e., URLs preﬁxed with “https” denote use of TLS for security.)
Most TLS-enabled servers have a notable limitation, though: They don’t digitally sign
data. Consequently, a user or Prover cannot present the data she receives from a server
to a third party or Veriﬁer, such as an oracle or smart contract, in a way that ensures
the data’s authenticity.
Even if a server were to digitally sign data, there remains a problem of conﬁden-
tiality. A Prover may wish to redact or modify sensitive data before presenting it to a
Veriﬁer. Digital signatures are designed speciﬁcally to invalidate modiﬁed data, how-
ever. They thus prevent a Prover from making conﬁdentiality-preserving alterations
to data. (See Section 7.1 for more discussion.)
DECO and Town Crier are designed to allow a Prover to obtain data from a web
server and present it to a Veriﬁer in a way that ensures integrity and conﬁdentiality.
The two systems preserve integrity in the sense that they ensure that data presented by
the Prover to the Veriﬁer originates authentically from the target server. They support
conﬁdentiality in the sense of allowing the Prover to redact or modify data (while still
preserving integrity).
A key feature of both systems is that they do not require any modiﬁcations to a
target web server. They can operate with any existing TLS-enabled server. In fact,
they are transparent to the server: From the viewpoint of the server, the Prover is
establishing an ordinary connection.
The two systems have similar goals, but diﬀer in their trust models and implemen-
tations as we now brieﬂy explain.
DECO makes fundamental use of cryptographic protocols to achieve its integrity
and conﬁdentiality properties. While establishing a session with a target server us-
ing DECO, the Prover engages at the same time in an interactive protocol with the
Veriﬁer. This protocol enables the Prover to prove to the Veriﬁer that it has received
a given piece of data D from the server during its current session. The Prover can
alternatively present the Veriﬁer with a zero-knowledge proof of some property of D
and thus not reveal D directly.
In a typical use of DECO, a user or a single node can export data D from a private
session with a web server to all of the nodes in a DON. As a result, the full DON can
attest to the authenticity of D (or a fact derived from D via a zero-knowledge proof).
In addition to the example applications given later in the paper, this capability can be
used to amplify high-integrity access to a data source by a DON. Even if only one node
has direct access to a data source—due, for instance, to an exclusive arrangement with
a data provider—it remains possible for the entire DON to attest to the correctness of
30
reports emitted by that node.
Town Crier relies on the use of a trusted execution environment (TEE) such as Intel
SGX. Brieﬂy, a TEE functions as a kind of black box that executes applications in a
tamperproof and conﬁdential way. In principle, even the owner of the host on which
the TEE is running can neither (undetectably) alter a TEE-protected application nor
view the application’s state, which may include secret data.
Town Crier can achieve all of the functionality of DECO and more. DECO con-
strains the Prover to interaction with a single Veriﬁer. In contrast, Town Crier enables
a Prover to generate a publicly veriﬁable proof on data D fetched from a target server,
i.e., a proof that anyone, even a smart contract, can verify directly. Town Crier can
also securely ingest and make use of secrets (e.g., user credentials).
The main limitation of Town Crier is its reliance on TEEs. Production TEEs have
recently been shown to have a number of serious vulnerabilities, although the technol-
ogy is in its infancy and will undoubtedly mature. See Appendices B.2.1 and B.2.2 for
further discussion of TEEs.
For a few example applications of DECO and Town Crier, see Sections 4.3, 4.5
and 9.4.3 and Appendix C.1.
3.6.3 Existing On-Chain Chainlink Services
Chainlink oracle networks provide a number of main services across a multiplicity of
blockchains and other decentralized systems today. Further evolution as described
in this whitepaper will endow these existing services with additional capabilities and
reach. Three examples are:
Data feeds: Today, the majority of Chainlink users relying on smart contracts make
use of data feeds. These are reports on the current value of key pieces of data according
toauthoritativeoﬀ-chainsources. Forexample,price feedsarefeedsreportingtheprices
of assets—cryptocurrencies, commodities, forex, indexes, equities, etc.—according to
exchanges or data-aggregation services. Such feeds today already help secure billions
of dollars in on-chain value through their use in DeFi systems such as Aave [147] and
Synthetix [208]. Other examples of Chainlink data feeds include weather data for
parametric crop insurance [75] and election data [93], among a number of others.
The deployment of DONs and other technologies described in this paper will en-
hance provision of data feeds in Chainlink networks in many ways, including:
• Scaling: OCR and subsequently DONs aim to enable Chainlink services to scale
dramatically across the many blockchains they support. For example, we expect
that DONs will help increase the number of data feeds provided by nodes using
Chainlink from 100s to 1000s and beyond. Such scaling will help the Chainlink
ecosystem achieve its goal of furnishing data relevant to smart contracts compre-
hensively and both meeting and anticipating existing and future needs.
31
• Enhanced security: By storing intermediate reports, DONs will retain records
of node behaviors for high-ﬁdelity monitoring and measurement of their perfor-
mance and accuracy, enabling strong empirical grounding of reputation systems
for Chainlink nodes. FSS and the TEF will enable price feeds to be incorporated
with transaction data in ﬂexible ways that prevent attacks such as front-running.
(Explicit) staking will bolster existing cryptoeconomic protection of the security
of data feeds.
• Feed agility: As blockchain-agnostic systems (indeed, more broadly, consumer-
agnosticsystems),DONscanfacilitatetheprovisionofdatafeedstoamultiplicity
of relying systems. A single DON can push a given feed simultaneously to a set
of diﬀerent blockchains, eliminating the need for per-chain oracle networks and
enabling rapid deployment of existing feeds on new blockchains and of additional
feeds across currently serviced blockchains.
• Conﬁdentiality: The ability to perform generalized computation in a DON en-
ables computations on sensitive data to take place oﬀ chain, avoiding on-chain
exposure. Additionally, using DECO or Town Crier, it is possible to achieve
even stronger conﬁdentiality, allowing report generation based on data that isn’t
exposed even to DON nodes. See Section 4.3 and Section 4.5 for examples.
Veriﬁable Random Functions (VRFs): Several types of DApps require a veriﬁ-
ably correct source of randomness to enable veriﬁcation of their own fair operation.
Non-Fungible Tokens (NFTs) are an example. The rarity of NFT features in Aaveg-
otchi [23] and Axie Inﬁnity [35] is determined by Chainlink VRF, as is the distribution
of NFTs by means of ticket-based drawings in Ether Cards [102]; the wide variety of
gaming DApps whose outcomes are randomized; and unconventional ﬁnancial instru-
ments, e.g., no-loss savings games such as PoolTogether [89], which allocate funds to
random winners. Other blockchain and non-blockchain applications also require secure
sources of randomness, including selection of decentralized-system committees and the
execution of lotteries.
While block hashes can serve as a source of unpredictable randomness, they are vul-
nerable to manipulation by adversarial miners (and to some extent by users submitting
transactions). Chainlink VRF [78] oﬀers a considerably more secure alternative. An
oracle has an associated private / public key pair (sk,pk) whose private key is main-
tained oﬀ chain and whose public key pk is published. To output a random value, it
applies sk to an unpredictable seed x furnished by a relying contract (e.g., a block hash
and DApp-speciﬁc parameters) using a function F, yielding y = F (x) along with a
sk
proof of correctness. (See [180] for the VRF available on Chainlink.) What makes a
VRF veriﬁable is the fact that with knowledge of pk, it is possible to check the correct-
ness of the proof and therefore of y. The value y is consequently unpredictable to an
adversary that cannot predict x or learn sk and infeasible for the service to manipulate.
32
Chainlink VRF may be viewed as just one of a family of applications that in-
volve custodianship of private keys oﬀ chain. More generally, DONs can oﬀer secure,
decentralized storage of individual keys for applications and/or users, and combine
this capability with generalized computation. The result is a host of applications, of
which we give some examples in this paper, including key management for Proof of
Reserves (see Section 4.1) and for users’ decentralized credentials (and other digital
assets) (see Section 4.3).
Keepers: Chainlink Keepers [87] enable developers to write code for decentralized
execution of oﬀ-chain jobs, generally to trigger execution of relying smart contracts.
Before the advent of Keepers, it was common for developers to operate such oﬀ-chain
logic themselves, creating centralized points of failure (as well as considerable du-
plicated development eﬀort). Keepers instead provide an easy-to-use framework for
decentralized outsourcing of these operations, enabling shorter development cycles and
strong assurance of liveness and other security properties. Keepers can support any
of a wide variety of triggering goals, including price-dependent liquidation of loans or
execution of ﬁnancial transactions, time-dependent initiation of airdrops or payments
in systems with yield harvesting, and so forth.
In the DON framework, initiators may be viewed as a generalization of Keep-
ers in several senses. Initiators may make use of adapters, and thus can leverage a
modularized library of interfaces to on-chain and oﬀ-chain systems, permitting rapid
development of secure, sophisticated functionality. Initiators initiate computation in
executables, which themselves oﬀer the full versatility of DONs, permitting the wide
range of decentralized services we present in this paper for on-chain and oﬀ-chain ap-
plications.
3.6.4 Node Reputation / Performance History
The existing Chainlink ecosystem natively documents the performance histories of
contributing nodes on chain. This feature has given rise to a collection of reputation-
oriented resources that ingest, ﬁlter, and visualize performance data on individual
node operators and data feeds. Users can reference these resources to make informed
decisions in their selection of nodes and to monitor the operation of existing networks.
Similar capabilities will help users choose DONs.
For example, permissionless marketplaces today such as market.link allow node
operators to list their oracle services and attest to their oﬀ-chain identities through
services such as Keybase [4], which bind the proﬁle of a node in Chainlink to its
owner’s existing domain names and social media accounts. Additionally, performance
analytics tools, such as those available at market.link and reputation.link, allow
userstoviewstatisticsonthehistoricalperformanceofindividualnodes,includingtheir
average response latency, the deviation of values in their reports from consensus values
relayed on chain, revenue generated, jobs fulﬁlled, and more. These analytics tools also
allow users to track the adoption of various oracle networks by other users, a form of
33
implicit endorsement of the nodes securing such networks. The result is a ﬂat “web of
trust” in which, by using particular nodes, high-value decentralized applications create
a signal of their trust in those nodes that other users can observe and factor into their
own node-selection decisions.
With DONs (and initially with OCR) comes a shift in transaction processing and
contract activity more generally oﬀ chain. A decentralized model for recording node
performance remains possible within the DON itself. Indeed, the high performance
and data capacity of DONs make it possible to construct records in a ﬁne-grained
way and also to perform decentralized computation on these records, yielding trust-
worthy summaries that can be consumed by reputation services and checkpointed on
MAINCHAIN.
While it is possible for a DON in principle to misrepresent the behavior of con-
stituent nodes if a large fraction of nodes is corrupted, we note that the collective
performance of a DON itself in delivering on-chain data is visible on MAINCHAIN
and thus cannot be misrepresented. Additionally, we plan to explore mechanisms that
incentivize accurate internal reporting of node behaviors in a DON. For example, by re-
porting the subset of high-performing nodes that most quickly return data contributing
to a report relayed on chain, a DON creates an incentive for nodes to contest incorrect
reports: Incorrectly including nodes in this subset means incorrectly excluding nodes
that should have been included and therefore invalidly penalizing them. Repeated re-
porting failures by a DON would also create an incentive for honest nodes to leave the
DON.
Decentralized compilation of accurate performance histories and the consequent
ability of users to identify high-performing nodes and for node operators to build
reputations are important distinguishing features of the Chainlink ecosystem. We
show in Section 9 how we can reason about them as a key piece of a rigorous and
expansive view of the economic security provided by DONs.
4 Decentralized Services Enabled by Decentralized
Oracle Networks
To illustrate the versatility of DONs and how they enable a host of new services,
we present ﬁve examples of DON-based applications in this section and describe the
hybrid contracts that realize them: (1) Proof of Reserves, a form of cross-chain service;
(2) Interfacing with enterprise / legacy systems, that is, creating a middleware-based
abstraction layer that facilitates development of blockchain applications with minimal
blockchain-speciﬁc code or expertise; (3) Decentralized identity, tools enabling users to
obtainandmanagetheirownidentitydocumentsandcredentials; (4)Priority channels,
aservicethatensurestimelyinclusionofcritical-infrastructuretransactions(e.g.,oracle
reports) on a blockchain; and (5) Conﬁdentiality-preserving DeFi, that is, ﬁnancial
smart contracts that conceal the sensitive data of participating parties. Here, we
34
use SC to denote the MAINCHAIN part of a hybrid contract and describe the DON
component separately or in terms of an executable exec.
4.1 Proof of Reserves
For many applications, it is useful to relay state between or among blockchains. A
popular application of such services is cryptocurrency wrapping. Wrapped coins such
as WBTC [15] are becoming a popular asset in Decentralized Finance (DeFi). They
involve depositing the “wrapped” backing asset on its source blockchain MAINCHAIN(1)
and creating a corresponding token on a diﬀerent, target blockchain MAINCHAIN(2).
For example, WBTC is an ERC20 token on the Ethereum blockchain that corresponds
to BTC on the Bitcoin blockchain.
BecausecontractsonMAINCHAIN(2) donothavedirectvisibilityintoMAINCHAIN(1),
they must rely explicitly or implicitly on an oracle to report on deposits of the wrapped
asset in a smart contract, producing what is sometimes called a Proof of Reserves. In
WBTC [15], for example, custodian BitGo holds BTC and issues WBTC, with the
Chainlink network providing Proofs of Reserve [76].
A DON can itself provide a Proof of Reserves. With a DON, however, it is possible
to go further. A DON can manage secrets and, through use of appropriate adapters,
can transact on any desired blockchain. Consequently, it is possible for the DON to act
as one among a number of custodians—or even as a sole, decentralized custodian—for
a wrapped asset. DONs can thereby serve as a platform to enhance the security of
existing services that use Proofs of Reserves.
Forexample,supposethatMAINCHAIN(1) isBitcoinandMAINCHAIN(2) isEthereum.
On MAINCHAIN(2), a contract SC issues tokens representing wrapped BTC. The DON
controls a BTC address addr(1) . To wrap BTC, then, a user U sends X BTC from
DON
addr(1) to addr(1) along with a MAINCHAIN(2)-address addr(2). The DON monitors
U DON U
addr(1) via an adapter to MAINCHAIN(1). On observing U’s deposit, with suﬃ-
DON
ciently high-probability conﬁrmation, it sends a message to SC via an adapter to
MAINCHAIN(2). This message instructs SC to mint X tokens for addr(2).
U
For U to release X tokens, the reverse happens. On MAINCHAIN(1), however,
addr(1) sends X BTC to addr(1) (or to another address, if thus requested by the user).
DON U
Theseprotocolscanbeadapted, ofcourse, toworkwithexchanges, ratherthandirectly
with users.
4.2 Interfacing with Enterprise / Legacy Systems
DONs can serve as bridges between and among blockchains, as in the example of Proof
of Reserves, but another objective is for them to act as bidirectional bridges between
blockchains and legacy systems [176] or blockchain-like systems such as central bank
digital currencies [30].
Enterprises face a number of challenges in connecting their existing systems and
processes to decentralized systems, including:
35
• Blockchain agility: Blockchain systems change rapidly. An enterprise may con-
front the rapid new appearance or rise in popularity of blockchains on which
counterparties wish to conduct transactions, but for which the enterprise has no
support in its existing infrastructure. In general, blockchains’ dynamism makes
it diﬃcult for individual enterprises to remain abreast of the full ecosystem.
• Blockchain-speciﬁc development resources: For many organizations, hiring or in-
cubating cutting-edge blockchain expertise is diﬃcult, particularly in view of the
challenge of agility.
• Private-key management: Managingprivatekeysforblockchainsorcryptocurren-
cies requires operational expertise distinct from that of traditional cybersecurity
practices and unavailable to many enterprises.
• Conﬁdentiality: Enterprises are leery of exposing their sensitive and proprietary
data on chain.
To address the ﬁrst three of these diﬃculties, developers can simply use a DON
as a secure middleware layer to enable enterprise systems to read from or write to
blockchains. The DON can abstract away detailed technical considerations such as
gas dynamics, chain reorganization, and so forth, for both developers and users. By
presenting a streamlined blockchain interface to enterprise systems, a DON can thus
considerably simplify the development of blockchain-aware enterprise applications, re-
moving the burden from enterprises of acquiring or incubating blockchain-speciﬁc de-
velopment resources.
Such use of DONs is especially attractive in that it enables enterprise developers to
create smart-contract applications that are largely blockchain agnostic. As a result, the
larger the set of blockchains for which a DON is instrumented to act as middleware, the
larger the set of blockchains to which enterprise users can gain easy access. Developers
can port applications from existing blockchains to new ones with minimal modiﬁcation
to their internally developed applications.
To address the additional problem of conﬁdentiality, developers can appeal to the
tools we introduce in this paper and expect to deploy in support of DON applications.
These include DECO and Town Crier Section 3.6.2 as well as conﬁdentiality-preserving
API modiﬁcations discussed in Section 7.1.2 and a number of application-speciﬁc ap-
proaches covered in the remainder of this section. These DON systems can provide
high-integrity, on-chain attestations about enterprise system state without revealing
sensitive enterprise source data on chain.
4.3 Decentralized Identity
Decentralized identity is a general term for the notion that users should be able to
obtain and manage their own credentials, rather than relying on third parties to do
so. Decentralized credentials are attestations to attributes or assertions of the holder,
36
which are often called claims. Credentials are digitally signed by entities, often called
issuers,thatcanauthoritativelyassociateclaimswithusers. Inmostproposedschemes,
claims are associated with a Decentralized Identiﬁer (DID), a universal identiﬁer for
a given user. Credentials are bound to a public key whose private key the user holds.
The user can thus prove possession of a claim using her private key.
Visionary as decentralized identity is, existing and proposed schemes, e.g., [14, 92,
129, 216], have three severe limitations:
• Lack of legacy compatibility: Existing decentralized identity systems rely on a
community of authorities, called issuers, to produce DID credentials. Because
existingwebservicesdonotgenerallydigitallysigndata,issuersmustbelaunched
as special-purpose systems. Because there is no incentive to do this without a
decentralized-identity ecosystem, a chicken-and-the-egg problem results. In other
words, it’s unclear how to bootstrap an issuer ecosystem.
• Unworkable key management: Decentralized identity systems require users to
manage private keys, something that experience with cryptocurrency has shown
to be an unworkable onus. It is estimated that some 4,000,000 Bitcoin have been
lost forever because of key management failures [194], and many users store their
crypto assets with exchanges [193], thereby undermining decentralization.
• Lack of privacy-preserving Sybil resistance: A basic security requirement of ap-
plications such as voting, fair allocation of tokens during token sales, etc. is that
users be unable to assert multiple identities. Existing decentralized identity pro-
posals require users to reveal their real-world identities in order to achieve such
Sybil resistance, thereby undermining important privacy assurances.
Itis possibleto addressthese problems usinga combination ofacommittee ofnodes
performing distributed computation within a DON and the use of tools such as DECO
or Town Crier, as shown in a system called CanDID [160].
DECO or Town Crier can by design turn existing web services without modiﬁcation
intoconﬁdentiality-preservingcredentialissuers. TheyenableaDONtoexportrelevant
data for this purpose into a credential while concealing sensitive data that should not
appear in the credential.
Inaddition,tofacilitatekeyrecoveryforusers,thusaddressingthekey-management
problem, a DON can allow users to store private keys in secret-shared form. Users can
recover their keys by proving to the nodes in the DON—similarly, using Town Crier or
DECO—an ability to log into accounts with a set of predetermined web providers (e.g.,
Twitter, Google, Facebook). The beneﬁt of using Town Crier or DECO, as opposed to
OAUTH, is user privacy. Those two tools enable a user to avoid revealing to the DON
a web provider identiﬁer—from which real-world identities can often be derived.
Finally, to provide Sybil resistance, as shown in [160], it is possible for a DON to
perform a privacy-preserving transformation of unique real-world identiﬁers for users
(e.g., Social Security Numbers (SSNs)) into on-chain identiﬁers upon user registration.
37
The system can thereby detect duplicate registrations without sensitive data such as
SSNs being revealed to individual DON nodes.7
ADONcanprovideanyoftheseservicesonbehalfofexternaldecentralizedidentity
systems on permissionless or permissioned blockchains, e.g., instances of Hyperledger
Indy [129].
Example application: KYC: Decentralized identity holds promise as a means to
streamline requirements for ﬁnancial applications on blockchains while improving user
privacy. Two challenges it can help address are accreditation and compliance obliga-
tions under anti-money-laundering / know-your-customer (AML / KYC) regulations.
AML regulations in many countries require ﬁnancial institutions (and other busi-
nesses) to establish and verify the identities of individuals and businesses with which
they perform transactions. KYC forms one component of a ﬁnancial institution’s
broaderAMLpolicy,whichalsotypicallyinvolvesmonitoringuserbehaviorsandwatch-
ing fund ﬂows, among other things.
KYC typically involves user presentation of identity credentials in some form (e.g.,
entry into an online web form, holding up an identity document in front of a user’s face
inavideosession, etc.). Securecreationofandpresentationofdecentralizedcredentials
could in principle be a beneﬁcial alternative in several respects, namely by: (1) Making
the KYC process more eﬃcient for users and ﬁnancial institutions, because once a
credential is obtained, it could be presented seamlessly to any ﬁnancial institution;
(2) Reducing fraud by reducing opportunities for identity theft through compromise
of personally identiﬁable information (PII) and spooﬁng during video veriﬁcation; and
(3) Reducing the risk of PII compromise in ﬁnancial institutions, as users retain control
of their own data.
Given the multi-billion-dollar penalties paid by ﬁnancial institutions for AML com-
pliance failures, and the many ﬁnancial institutions spending millions of dollars annu-
ally on KYC, improvements could yield considerable savings for ﬁnancial institutions
and, by extension, for consumers [196]. While the traditional ﬁnancial sector is slow
to adopt new compliance tools, DeFi systems are increasingly embracing it [43].
Example application: Under-collateralized loans: Most DeFi applications that
support lending today originate only fully collateralized loans. These are loans made
to borrowers who deposit cryptocurrency assets of value exceeding that of the loans.
Interest has arisen recently in what the DeFi community generally refers to as under-
collateralizedloans. These, bycontrast, areloansforwhichthecorrespondingcollateral
has value that is less than that of the principal of the loan. Under-collateralized loans
resemble loans often made by traditional ﬁnancial institutions. Rather than relying
on deposited collateral as a guarantee of loan repayment, they instead base lending
decisions on the credit histories of borrowers.
7This transformation relies on a distributed pseudorandom function (PRF).
38
Under-collateralized loans constitute a nascent but growing part of the DeFi lend-
ing market. They rely upon mechanisms like those employed by traditional ﬁnancial
institutions, such as legal contracts [91]. An essential requirement for their growth
will be the ability to furnish data on user creditworthiness—a key factor in conven-
tional lending decisions—to DeFi systems in a way that provides strong integrity, i.e.,
assurance of correct data.
A DON-enabled decentralized identity system would enable would-be borrowers to
generate high-assurance credentials attesting to their creditworthiness while preserving
the conﬁdentiality of sensitive information. Speciﬁcally, borrowers can generate these
credentials based on records from authoritative online sources while exposing only the
data attested to by the DON, without exposing other, potentially sensitive data. For
example, a borrower can generate a credential indicating that her credit score with a
set of credit bureaus exceeds a particular threshold (e.g., 750), without revealing her
precise score or any other data in her records. Additionally, if desired, such credentials
can be generated anonymously, i.e., the user’s name can be treated as sensitive data
and itself not exposed to oracle nodes or in her decentralized credential. The credential
itself can be used on chain or oﬀ chain, depending on the application.
In summary, a borrower can provide essential information to lenders on their credit
histories with strong integrity and without risk of exposure of unnecessary, sensitive
data.
A borrower can also provide a variety of other conﬁdentiality-preserving credentials
helpful in making lending decisions. For example, credentials can attest to a borrower’s
possession of (oﬀ-chain) assets, as we show in our next example.
Example application: Accreditation: Many jurisdictions limit the class of in-
vestor to which unregistered securities may be sold. For example, in the U.S., SEC
Regulation D stipulates that to be accredited for such investment opportunities, an
individual must possess a net worth of $1 million, meet certain minimum income re-
quirements, or have certain professional qualiﬁcations [209, 210]. Current accreditation
processes are cumbersome and ineﬃcient, often requiring a letter of attestation from
an accountant, or similar evidence.
A decentralized identity system would enable users to generate credentials from
existing online ﬁnancial services accounts that prove compliance with accreditation
regulations, facilitating a more eﬃcient and privacy-preserving KYC process. The
privacy-preserving properties of DECO and Town Crier, moreover, would allow these
credentials to be generated with a strong assurance of integrity without directly reveal-
ing details of a user’s ﬁnancial status. For example, a user could generate a credential
proving that she has a net worth of at least $1 million without revealing any additional
information about her ﬁnancial status.
4.4 Priority Channels
Priority channels are a useful new service that is easy to build using a DON. Their
39
goal is to deliver select, high-priority transactions in a timely way on MAINCHAIN
during periods of network congestion. Priority channels may be viewed as a form of
futures contract on block space and thus as a cryptocommodity, a term coined as part
of Project Chicago [61, 136].
Priority channels are intended speciﬁcally for miners to enable infrastructure ser-
vices, such as oracles, governance functions for contracts, etc.—not for ordinary user-
level activities such as ﬁnancial transactions. In fact, as designed here, a priority
channel implemented by less than 100% of the mining power in the network can only
provide loose bounds on delivery times, preventing its use for highly speed-dependent
goals such as front-running.
Figure 10: A priority channel is a guarantee by a miner M—or, more generally, a
set of miners M—to a user U that her transaction τ will be mined within D blocks
of inclusion in the mempool. A contract SC can use DON monitoring to enforce the
service terms of the channel.
A priority channel takes the form of an agreement between a miner or set of miners
(or mining pools) M that provides the channel and a user U that pays a fee for access.
M agrees that when U submits a transaction τ to the mempool (with any gas price,
40
but a pre-agreed-upon gas limit), M will place it on chain within the next D blocks.8
The idea is depicted schematically in Fig. 10.
Priority-channel contract description: A priority channel may be realized as a
hybrid smart contract roughly as follows. We let SC denote the logic on MAINCHAIN
and that on the DON by exec.
SC accepts a deposit / stake $d from M and an advance payment $p from U. A
DON executable exec monitors the mempool, triggering on placement of a transaction
by U. It sends a success message to SC if U submits a transaction that M mines in
a timely way and a failure message in case of a service failure.
SC sends payment $p to M given a success message and sends all remaining funds,
including $d, to U if it receives a failure message. Upon successful termination, it
releases deposit $d to M.
The miner M can of course provide priority channels simultaneously to multiple
usersandcanopenaprioritychannelwithU forapre-agreed-uponnumberofmessages.
4.5 Conﬁdentiality-Preserving DeFi / Mixicles
Today, DeFi applications [1] provide little to no conﬁdentiality for users: All transac-
tions are visible on chain. Various zero-knowledge-based approaches, e.g., [149, 217],
can provide transaction privacy, and the TEF is general enough to support them. But
these approaches are not comprehensive, and do not, for example, typically conceal the
asset on which a transaction is based.
The broad set of computational tools we ultimately intend to support in DONs will
enable privacy in a number of diﬀerent ways that can plug such gaps, helping comple-
ment the privacy assurances of other systems. For example, Mixicles, a conﬁdentiality-
preserving DeFi instrument proposed by Chainlink Labs researchers [135], can conceal
the asset type backing a ﬁnancial instrument, and ﬁt very naturally into the DON
framework.
Mixicles are most easily explained in terms of their use to realize a simple binary
option. A binary option is a ﬁnancial instrument in which two users, which we’ll
refer to here for consistency with [135] as players, bet on an event with two possible
outcomes, e.g., whether or not an asset exceeds a target price at a predesignated time.
The following example illustrates the idea.
Example 2. Alice and Bob are parties to a binary option based on the value of an asset
called Carol’s Bubble Token (CBT). Alice bets that CBT will have a market price of at
least 250 USD at time T = noon on 21 June 2025; Bob bets the reverse. Each player
deposits 100 ETH by a prespeciﬁed deadline. The player with the winning position
receives 200 ETH (i.e., gains 100 ETH).
8D must of course be large enough to ensure that M can comply with high probability. For
instance, if M controls 20% of the mining power in the network, it might choose D = 100, ensuring
a failure probability of ≈2×10−10, i.e., less than one in a billion.
41
Given an existing Chainlink oracle network O, it is easy to implement a smart
contract SC that realizes the agreement in Example 2. The two players each deposit
100 ETH in SC. Sometime after T, a query q is sent to O requesting the price r of
CBT at time T. O sends a report r of this price to SC. SC then sends money to Alice
if r ≥ 250 and Bob if not. This approach, however, reveals r on chain—making it easy
for an observer to deduce the asset underlying the binary option.
In the terminology of Mixicles, it is helpful to think conceptually of the outcome
of SC in terms of a Switch that transmits a binary value computed as a predicate
switch(r). In our example, switch(r) = 0 if r ≥ 250; given this outcome, Alice wins.
Otherwise switch(r) = 1 and Bob wins.
A DON can realize a basic Mixicle as a hybrid contract by running an executable
exec that computes switch(r) and reports it on chain to SC. We show this construction
in Fig. 11.
Figure 11: Diagram of basic Mixicle in Example 2. To provide on-chain secrecy for
report r, and thus the asset underlying the binary option, the oracle sends to the
contract SC via Switch only the binary value switch(r).
WespecifyanadapterConfSwitchinAppendixC.3thatmakesiteasytoachievethis
goal in a DON. The basic idea behind ConfSwitch is quite simple. Instead of reporting
the value r, ConfSwitch reports only the binary switch value switch(r). SC can be
designed to make a correct payment based on switch(r) alone, and switch(r) by itself
reveals no information about the underlying asset—CBT in our example. Additionally,
by placing a ciphertext on (q,r) on the ledger encrypted under pk , the public key of
aud
an auditor, the adapter ConfSwitch creates a conﬁdentiality-preserving audit trail.
The basic Mixicle we’ve chosen for simplicity to describe here conceals only the
asset and bet behind the binary option in our example. A full-blown Mixicle [135] can
provide two forms of conﬁdentiality. It conceals from observers: (1) What event the
players bet on (i.e., q and r) but also (2) Which player won the bet.
Since Mixicles are executed on MAINCHAIN, either one player would need to relay
switch(r) from the DON to MAINCHAIN, or an executable exec could be created that
42
is triggered on output by ConfSwitch and calls another adapter to send switch(r) to
MAINCHAIN.
A third, subtle type of conﬁdentiality is also worth considering. In a basic imple-
mentation of ConfSwitch, O is running the adapter on the DON and thus learns the
asset—CBT in our example—and thus the nature of the binary option. As discussed
in Appendix C.3, however, it is additionally possible to use DECO or Town Crier to
conceal even this information from O. In this case, the O learns no more information
than a public observer of SC.
For further details on Mixicles, we refer readers to [135].
5 Fair Sequencing Services
One important service that we expect DONs will oﬀer that leverages their network-
ing, computation, and storage capabilities is called Fair Sequencing Services (FSS).
Although FSS may be viewed simply as an application realized within the DON frame-
work, we highlight it as a service that we believe will be in high demand across
blockchains, and which we expect the Chainlink network to support actively.
When executed on public blockchain networks, many of today’s DeFi applications
reveal information that can be exploited by users to their own beneﬁt, analogous to
the kind of insider leaks and manipulation opportunities that are pervasive in existing
markets [64, 155]. FSS instead paves the way toward a fair DeFi ecosystem. FSS
helps developers to build DeFi contracts that are protected from market manipulation
resulting from information leakage. Given the problems we highlight below, FSS is
especially attractive for layer-2 services and ﬁts within the framework for such services
that we discuss in Section 6.
The challenge: In existing permissionless systems, transactions are ordered entirely
at the discretion of miners. In permissioned networks, the validator nodes may exert
the same power. This is a form of largely unrecognized ephemeral centralization in
otherwise decentralized systems. A miner can (temporarily) censor transactions for its
own beneﬁt [171] or reorder them to maximize its own gain, a notion called miner-
extractable value (MEV) [90]. The term MEV is slightly deceptive: It does not refer
only to value that miners can capture: Some MEV can be captured by ordinary users.
Because miners have more power than ordinary users, however, MEV represents an up-
per bound on the amount of value any entity can obtain through adversarial reordering
and complementary transaction insertion. Even when miners order transactions simply
based on fees (gas), without manipulation, users themselves can manipulate gas prices
to advantage their transactions over those of less sophistication.
Daian et al. [90] document and quantify ways in which bots (not miners) take
advantage of gas dynamics in a way that harms users of DeFi systems today and how
MEV even threatens the stability of the underlying consensus layer in a blockchain.
Other examples of transaction-order manipulation surface regularly, e.g., [50, 154].
43
New transaction-processing methods such as rollups are a very promising approach
to the scaling problems of high-throughput blockchains. They do not, however, address
the problem of MEV. Instead, they shift it to the entity that generates the rollup. That
entity, whether the operator of a smart contract or a user furnishing a (zk-)rollup with
a validity proof, has the power to order and insert transactions. In other words, rollups
swap MEV for REV: Rollup-Extractable Value.
MEV aﬀects upcoming transactions that have been submitted to the mempool
but are not yet committed on chain. Information about such transactions is broadly
available in the network. Miners, validators, and ordinary network participants can
therefore exploit this knowledge and create dependent transactions. In addition, min-
ers and validators may inﬂuence the order of those transactions that they commit
themselves and exploit this to their advantage.
The problem of undue inﬂuence by leaders on transaction ordering in consensus
protocols has been known in the literature since the 1990s [71, 190], but no satisfying
solutions have been realized in practice so far [97]. The main reason is that pro-
posed solutions—at least until very recently—cannot readily be integrated with public
blockchains, as they rely on the content of transactions remaining secret until after
their ordering has been determined.
Fair Sequencing Services (FSS) overview: DONs will provide tools to decentral-
ize transaction ordering and implement it according to a policy speciﬁed by a relying
contract creator, ideally one that is fair, and not advantaging actors who wish to
manipulate transaction ordering. Collectively, these tools constitute FSS.
FSS includes three components. The ﬁrst is monitoring of transactions. In FSS,
oracle nodes in O both monitor the mempool of MAINCHAIN and (if desired) permit
oﬀ-chain submission of transactions through a specialized channel. The second is se-
quencing of transactions. The nodes in O order transactions for a relying contract
according to a policy deﬁned for that contract. The third is posting of transactions.
After the transactions are ordered, the nodes in O jointly send the transactions to the
main chain.
The potential beneﬁts of FSS include:
• Order-fairness: FSS includes tools to help developers ensure that transactions
input to a particular contract are ordered in a way that does not give an unfair
advantage to well-resourced and/or technically savvy users. Ordering policies
can be speciﬁed for this purpose.
• Reduction or elimination of information leaks: By ensuring that network partic-
ipants cannot exploit knowledge about upcoming transactions, FSS can abate or
eliminate attacks like front-running that are based on information available in
the network before transactions are committed. Preventing exploitation of such
leakage ensures that adversarial transactions which depend on original pending
transactions cannot enter the ledger before the original transactions are commit-
ted.
44
• Reduced transaction cost: By eliminating players’ need for speed in submitting
their transactions to a smart contract, FSS can greatly reduce the cost of trans-
action processing.
• Priority ordering: FSScanautomaticallygivecriticaltransactionsspecialpriority
ordering. For example, in order to prevent front-running attacks against oracle
reports, e.g., [79], FSS can insert an oracle report into a stream of transactions
retroactively.
An overarching goal of the FSS in DONs is to empower DeFi creators to realize fair
ﬁnancial systems, that is, systems that don’t advantage particular users (or miners)
over others on the basis of speed, insider knowledge, or ability to perform technical
manipulation. While a crisp, general notion of fairness is elusive, and perfect fairness in
any reasonable sense is unachievable, FSS aims to provide developers with a powerful
set of tools so that they can enforce policies that help meet their design goals for DeFi.
We note that while the main goal of FSS is to act as a fair sequencing service for
the MAINCHAIN that DONs target, some of the same fairness desiderata that FSS
guarantees can also be appropriate for (decentralized) protocols that are run among
DON parties. Thus, FSS can be viewed more broadly as a service provided by a subset
of DON nodes to fairly sequence not only transactions sent by users of MAINCHAIN
but also transactions (i.e., messages) shared among other DON nodes. In this section,
we will focus primarily on the goal of sequencing MAINCHAIN transactions.
Section organization: In Section 5.1, we describe two high-level applications that mo-
tivate the design of FSS: preventing front-running of oracle reports and preventing
front-running of user transactions. We then provide more details on the design of FSS
in Section 5.2. Section 5.3 describes examples of fair ordering guarantees and means
to achieve them. Finally, Section 5.4 and Section 5.5 discuss network-level threats to
such policies and means to address them, respectively for network ﬂooding and Sybil
attacks.
5.1 The Front-Running Problem
To explain the goals and design of FSS, we describe two general forms of front-running
attacks and the limitations of existing solutions. Front-running exempliﬁes a class
of transaction-ordering attacks: There are a number of related attacks such as back-
running and sandwiching (front-running plus back-running) [237] that we don’t cover
here, but which FSS also helps address.
5.1.1 Oracle Front-Running
In their traditional role of providing oﬀ-chain data to blockchain applications, oracles
become a natural target for front-running attacks.
45
Consider the common design pattern of using an oracle to supply various price feeds
toanon-chainexchange: periodically(sayeveryhour), theoraclecollectspricedatafor
diﬀerent assets and sends these to an exchange contract. These price-data transactions
present obvious arbitrage opportunities: For example, if the newest oracle report lists
a much higher price for some asset, an adversary could front-run the oracle report to
buy up assets and immediately resell them once the oracle’s report is processed.
Speed bumps and retroactive pricing: A natural solution to the oracle front-
running problem is to give oracle reports special priority over other transactions. For
example, oracle reports could be sent with high fees to encourage miners to process
them ﬁrst. But this will not prevent front-running if the arbitrage opportunity is high,
nor can it prevent arbitrage by the miners themselves.
Some exchanges have thus resorted to implementing more heavyweight “speed-
bumps,” such as queuing user transactions for a number of blocks before processing
them, or retroactively adjusting prices when a new oracle report arrives. The disadvan-
tages of these solutions are that they add complexity to the exchange implementation,
increase storage requirements and thus transaction costs, and disrupt the user experi-
ence as asset exchanges are only conﬁrmed after a signiﬁcant time period.
Piggybacking: BeforemovingontoFSS,wediscusspiggybacking, aquitesimpleand
elegant solution to the oracle front-running problem. It is not applicable to address
front-running in other scenarios, however.
In short, instead of periodically sending reports to the on-chain contract, oracles
publish signed reports that users append to their transactions when buying or selling
on-chain assets. The exchange then simply checks that the report is valid and fresh
(e.g., the oracle can sign a range of blocks for which the report is valid), and extracts
the relevant price feed from it.
This simple approach has a number of advantages over the above “speed bump”
approach: (1) The exchange contract need not keep state of price feeds, which should
lead to lower transaction costs; (2) As oracle reports are posted on chain on a by-
need basis, oracles can generate more frequent updates (e.g., every minute), thereby
minimizing arbitrage opportunities from front-running a report9; (3) Transactions can
be validated immediately, as they always include a fresh price feed.
The approach is not perfect, however. First, this piggybacking solution puts the
onusontheexchange’suserstofetchup-to-dateoraclereportsandattachthemtotheir
transactions. Second, while piggybacking minimizes arbitrage opportunities, it cannot
fully prevent them without aﬀecting the liveness of the on-chain contract. Indeed, if an
oracle report is valid until some block number n, then a transaction submitted to block
n+1 would require a new valid report. Due to inherent delays in the propagation of
reports from oracles to users, the new report that is valid for block n+1 would have
9Arbitrage is only worthwhile if the exploitable diﬀerence in asset prices exceeds the extraneous
fees required to buy and sell the assets, e.g., those collected by miners and the exchange.
46
to be publicized some period before block n+1 is mined, say at block n−k, thereby
creating a sequence of k blocks where a short-lived arbitrage opportunity exists. We
now describe how FSS gets around these limitations.
Prioritizing oracle reports with FSS: FSS can address the oracle front-running
problem by building upon the above piggybacking solution, but pushing the additional
work of augmenting transactions with oracle reports to the Decentralized Oracle Net-
work.
At a high level, oracle nodes collect transactions destined for an on-chain exchange,
agree on a real-time price feed, and post the price feed along with the collected trans-
actions to the main-chain contract. Conceptually, one can think of this approach as a
“data-augmented transaction batching”, where the oracle ensures that an up-to-date
price feed is always added to transactions.
FSS solutions can be implemented transparently to the exchange’s users, and with
minimalchangestocontractlogic,aswedescribeinmoredetailinSection5.2. Ensuring
thatfreshoraclereportsarealwaysprioritizedoverusertransactionsisjustoneexample
ofanordering policy thatFSScanadoptandenforce. PoliciesofFSSforensuringorder
fairness are described more generally in Section 5.3.
5.1.2 Front-Running User Transactions
We now turn to front-running in generic applications, where the defense method above
does not work. The problem can be captured broadly through the following scenario:
An adversary sees some user transaction tx sent into the P2P network and injects
1
its own adversarial transaction tx , so that tx is processed before tx (e.g., by paying
2 2 1
a higher transaction fee). For instance, this kind of front-running is common among
bots that exploit arbitrage opportunities in DeFi systems [90] and has aﬀected users of
various decentralized applications [101]. Imposing a fair order among the transactions
processed on the blockchain addresses this problem.
More fundamentally, seeing the details of tx is sometimes not even necessary and
1
knowledge of its mere existence may allow an adversary to front-run tx through its
1
own tx and defraud the innocent user that created tx . For example, the user might
2 1
be known to trade a particular asset at regular times. Preventing such attacks requires
mitigationsthatavoidleakageofmetadataaswell[62]. Somesolutionsforthisproblem
exist, but they introduce delays and usability concerns.
Fromnetwork-ordertoﬁnalized-orderwithFSS: Opportunitiesforfront-running
arise because existing systems have no mechanisms to ensure that the order in which
transactions appear on chain respects the order of events and the information ﬂow
outside the network. This represents a problem arising from deﬁciencies in the imple-
mentation of applications (e.g., trading platforms) on a blockchain. Ideally, one would
ensurethattransactionsarecommittedontheblockchaininthesameorderastheywere
created and sent to the blockchain’s P2P network. But since the blockchain network
47
is distributed, no such order can be captured. FSS therefore introduces mechanisms
to safeguard against violations of fairness, which arise only because of the distributed
nature of the blockchain network.
5.2 FSS Details
Figure 12: Order-fair mempool with two diﬀerent transaction paths: direct and
mempool-based.
Fig. 12 shows a general schematic of the FSS. For ensuring fairness, the DON pro-
viding FSS must interfere with the ﬂow of transactions as they enter MAINCHAIN.
Adjustments to clients, to smart contracts on MAINCHAIN, or to both may be neces-
sary. At a high level, processing of transactions by FSS can be decomposed into three
phases, described below: (1) Transaction monitoring; (2) Transaction sequencing; and
(3) Transaction posting. Depending on the ordering method used for transaction se-
quencing, additional protocol steps are needed, as described in the next section.
5.2.1 Transaction Processing
Transaction monitoring: We envision two diﬀerent approaches for FSS to monitor
user transactions destined for a speciﬁc smart contract, direct and mempool-based:
• Direct: The direct approach is conceptually simplest, but requires changes to
user clients so that transactions are sent directly to the Decentralized Oracle
48
Network nodes, rather than to the nodes of the main chain. The DON collects
user transactions destined to a speciﬁc smart contract SC and orders them based
on some ordering policy. The DON then sends the ordered transactions to the
smart contract on the main chain. Some ordering mechanisms also require the di-
rect approach because the user that creates a transaction must cryptographically
protect it before sending it to FSS.
• Mempool-based: To facilitate the integration of FSS with legacy clients, the DON
canuseMempoolServices(MS)tomonitorthemainchain’smempoolandcollect
transactions.
Direct transmission is likely to be the preferred implementation for many contracts,
and we believe it should be fairly practical in many cases.
We brieﬂy discuss how existing DApps could be minimally modiﬁed to support
direct transmission while preserving a good user experience. We describe approaches
using Ethereum and MetaMask [6] since these are the most popular choices today, but
thementionedtechniquesshouldextendtootherchainsandwallets. ArecentEthereum
Improvement Proposal, “EIP-3085: Wallet add Ethereum chain RPC method” [100],
will make it easy to target custom Ethereum chains (using a diﬀerent CHAIN ID than
that of MAINCHAIN to prevent replay attacks) from MetaMask and other browser-
based wallets. After implementation of this proposal, a DApp seeking to use a DON
would simply add a single method call to their front-end to be able to directly transmit
transactions to any DON exposing an Ethereum-compatible API. In the meantime,
“EIP-712: Ethereumtypedstructureddatahashingandsigning”[49]providesaslightly
more involved but already widely deployed alternative, where a DApp user can use
MetaMask to sign structured data specifying a DON transaction. The DApp can send
this signed structured data to the DON.
Finally, we note that hybrid approaches are also possible. For example, legacy
clients can continue to send transactions into the main chain’s mempool, but critical
transactions (e.g., oracle reports) are sent to DON nodes directly (in particular, the
set of nodes providing oracle reports such as price-feed updates and the set of nodes
providing FSS may overlap or be identical).
Transaction sequencing: The main purpose of FSS is to guarantee that user trans-
actions are ordered according to a pre-deﬁned policy. The nature of this policy will
depend on the application’s needs and the types of unfair transaction orderings that it
aims to prevent.
Since FSS on the DON is capable of processing data and maintaining local state,
they may impose an arbitrary sequencing policy based on the information that is
available at the oracles.
The particular ordering policies and their implementation are discussed subse-
quently in Section 5.3.
49
Transaction posting: After collecting and ordering user transactions, received ei-
ther directly from users or collected from the mempool, the DON sends these trans-
actions to the main chain. As such, a DON’s interactions with the main chain remain
subject to (potentially unfair) transaction ordering governed by the main chain’s min-
ers. To harness the beneﬁts of decentralized transaction ordering, the target smart
contract SC thus has to be designed to treat the DON as a “ﬁrst-class” citizen. We
distinguish two approaches:
• DON-only contracts: The simplest design option is to have the main chain smart
contract SC only accept transactions that have been processed by the DON. This
ensures that the smart contract processes transactions in the order proposed by
the DON, but de-facto restricts the smart contract to operating in a committee-
based system (i.e., the DON committee now has ongoing power to determine the
ordering and inclusion of transactions).
• Dual-class contracts: A preferred, more granular design has the main chain smart
contract SC accept transactions originating both from the DON and from legacy
users,10 but places traditional “speed bumps” on transactions that were not pro-
cessed by the DON. For example, transactions from the DON may be processed
immediately, whereaslegacytransactionsget“buﬀered”bythesmartcontractfor
a ﬁxed period of time. Other standard mechanisms for preventing front-running
such as commit-reveal schemes or VDFs [53] could also be applied to legacy
transactions. This ensures that DON-ordered transactions do get processed in
the order agreed upon, without giving the DON the unwanted power to censor
transactions.
As the imposition of transaction ordering by FSS requires that transactions are ag-
gregated “oﬀ-chain,” this solution is naturally combined with other aggregation tech-
niques that aim to reduce on-chain processing costs. For example, after collecting and
ordering transactions, the DON may send these transactions to the main chain as a
single“batchedtransaction”(e.g., arollup), therebyreducingtheaggregatetransaction
fee.
Enforcing the transaction order: Whether in a DON-only or dual-class design,
the main chain smart contract SC and the DON have to be co-designed so as to guar-
antee that the DON’s transaction ordering is upheld. Here also, we envision diﬀerent
design options:
• Sequence numbers: The DON can append a sequence number to each transac-
tion, and send these transactions into the main chain’s mempool. The main
10If the DON’s transaction monitoring is based on the mempool, legacy transactions must be dis-
tinguishablefromDONtransactionssothattheyarenotcollectedbytheDON,e.g., viaaspecialtag
embedded in the transaction or by specifying a particular gas price, e.g. DON transactions have gas
prices below a certain threshold.
50
chain smart contract SC ignores transactions that arrive “out-of-sequence.” We
note that in this setting, the main-chain miners can decide to ignore the DON’s
transaction ordering, thereby causing transactions to fail. It is possible by keep-
ing (expensive) state for SC to enforce correct transaction ordering, somewhat
analogously to how TCP buﬀers out-of-order packets until missing packets are
received.
• Transaction nonces: For many blockchains, and in particular for Ethereum, the
above sequence-numbering approach can leverage built-in transaction nonces to
enforcethatthemain-chainsmartcontractSCprocessestransactionsinsequence.
Here, the DON nodes send transactions to the main chain through a single main-
chainaccount, protectedwithakeysharedamongtheDONnodes. Theaccount’s
transaction nonce ensures that transactions are mined and processed in the cor-
rect order.
• Aggregate transactions: The DON can aggregate multiple transactions in a rollup
(or in a bundle similar to a rollup). The main-chain smart contract needs to be
designed to handle such aggregate transactions.
• Aggregate transactions with a main chain proxy: Here, the DON similarly bun-
dles transactions into one “meta-transaction” for the main chain, but relies on a
custom proxy smart contract to unpack the transactions and relay them to the
target contract SC. This technique can be useful for legacy compatibility. Meta-
transactions act like rollups but diﬀer in that they consist of an uncompressed
list of transactions posted once to the main chain.
The last design has the advantage of seamlessly supporting user transactions that
arethemselvesproxiedthroughamainchaincontractbeforereachingtheDON’starget
contract SC. For example, consider a user who sends a transaction to some wallet
contract, which in turn sends an internal transaction to SC. Assigning a sequence
number to such a transaction would be tricky, unless the user’s wallet contract is
specially designed to forward the sequence number with every internal transaction to
SC. Similarly, such internal transactions cannot be easily aggregated into a meta-
transaction that is sent directly to SC. We discuss further design considerations for
such proxied transactions below.
5.2.2 Transaction Atomicity
Our discussion thus far has implicitly assumed that transactions interact with a single
on-chain smart contract (e.g., a user sends a buy request to an exchange). Yet, in
systems such as Ethereum, a single transaction can consist of multiple internal trans-
actions, e.g., one smart contract calling a function in another contract. Below, we
describe two high-level strategies for sequencing “multi-contract” transactions, while
preserving the atomicity of the transaction (i.e., the sequence of actions prescribed by
the transaction are all executed in the correct order, or not at all).
51
Strong atomicity: The simplest solution is to apply FSS, as described above, di-
rectly to entire “multi-contract” transactions. That is, users send their transactions
into the network and FSS monitors, sequences, and posts these transactions to the
main chain.
This approach is technically simple, but has one potential limitation: If a user
transaction interacts with two contracts SC and SC that both want to leverage fair
1 2
sequencing services, then the sequencing policy of these two contracts has to be con-
sistent. That is, given two diﬀerent transactions tx and tx that each interacts with
1 2
both SC and SC , it must not be the case that the policy of SC orders tx before tx
1 2 1 1 2
whereas the policy of SC prescribes the opposite order.
2
For the vast majority of scenarios of interest, we envision that the sequencing poli-
cies adopted by diﬀerent contracts will be consistent. For example, both SC and SC
1 2
maywanttransactionstobeorderedbytheirapproximatearrivaltimeinthemempool,
and SC may further want certain oracle reports to always be delivered ﬁrst. As the
1
latter oracle report transactions do not interact with SC , the policies are consistent.
2
Weak atomicity: Initsfullgenerality, FSScouldbeappliedatthelevelofindividual
internal transactions.
Consider transactions of the form tx = {t˜x ,t˜x ,t˜x }, consisting of some initial
pre SC post
transaction(s) t˜x , which results in an internal transaction t˜x to SC, which in turn
pre SC
issues internal transaction(s) t˜x . The sequencing policy of SC might determine how
post
the internal transaction t˜x has to be ordered with respect to other transactions sent
SC
to SC, but leave open the sequencing order for t˜x and t˜x .
pre post
Given the intrinsics of transaction processing in systems such as Ethereum, devel-
oping a sequencing service that targets speciﬁc internal transactions is not straightfor-
ward. With a specially designed contract SC, this may be realizable as follows:
1. The transaction tx is sent into the network and mined (without any sequencing
performed by FSS). The initial t˜x is executed, and calls t˜x .
pre SC
2. SC does not execute t˜x and returns.
SC
3. FSS monitors internal transactions to SC, sequences them, and posts them back
to SC (i.e., by sending transactions t˜x directly to SC).
SC
4. SC processes the transactions t˜x received from FSS, and issues internal trans-
SC
actions t˜x that result from t˜x .
post SC
With this approach, transactions are not executed fully atomically (i.e., the original
transaction tx gets broken up into multiple on-chain transactions), but the ordering of
internal transactions is preserved.
This solution entails a number of design constraints. For example, t˜x cannot
pre
assume that t˜x and t˜x will be executed. Moreover, SC should be designed so as to
SC post
execute transactions t˜x and t˜x on behalf of a certain user, even though they were
SC post
52
sent by FSS. For these reasons, the more coarse-grained “Strong Atomicity” solution
above is likely preferable in practice.
For respecting more complex dependencies, involving multiple transactions and
their respective internal transactions, the transaction scheduler of FSS may contain
elaborate functions that resemble those found in transaction managers of relational
database managers.
5.3 Fair Transaction Sequencing
Here we discuss two notions of fairness for transaction sequencing and the correspond-
ing implementations, which may be realized by FSS: order-fairness based on a policy
imposed by FSS and secure causality preservation, which requires additional crypto-
graphic methods in FSS.
Order-fairness: Order-fairnessisanotionoftemporalfairnessinconsensusprotocols
that has ﬁrst been introduced formally by Kelkar et al. [144].
Kelkar et al. aim to achieve a form of natural policy in which transactions are
ordered based on the time they are ﬁrst received by the DON (or the P2P network,
in the case of a mempool-based FSS). In a decentralized system, however, diﬀerent
nodes may see transactions arrive in a diﬀerent order. Establishing a total order
on all transactions is the very problem solved by the consensus protocol underlying
MAINCHAIN. Kelkar et al. [144] therefore introduce a weaker notion that can be
achieved with the help of a Decentralized Oracle Network, called “block-order fairness.”
It groups the transactions that the DON has received during a time interval into a
“block” and inserts all transactions of the block concurrently and at the same position
(i.e., height) into MAINCHAIN. They are thus ordered together and must be executable
in parallel, without creating any conﬂicts among them. Roughly speaking, order-
fairness then states that if a large fraction of nodes see transaction τ before τ , then
1 2
τ will be sequenced before or in the same block as τ . By imposing such a coarse
1 2
granularity on transaction order, the opportunities for front-running and other order-
related attacks are greatly reduced.
Kelkar et al. propose a family of protocols called Aequitas [144], which address
diﬀerent deployment models, including synchronous, partially synchronous, and asyn-
chronous network settings. Aequitas protocols impose signiﬁcant communication over-
head relative to basic BFT consensus and are therefore not ideal for practical use.
We believe, however, that practical variants of Aequitas will emerge that can be used
for transaction sequencing in FSS and other applications. Some related schemes have
already been proposed that have less accompanying formalism and weaker properties,
e.g., [36, 151, 236], but better practical performance. These schemes can be supported
in FSS as well.
It is also worth noting that the term “fairness” appears elsewhere in the blockchain
literature with a diﬀerent meaning, namely fairness in the sense of opportunity for
53
miners proportional to their committed resources [106, 181] or for validators in terms
of equal opportunity [153].
Secure causality preservation: Themostwidelyknownapproachtopreventfront-
running and other ordering violations in distributed platforms relies on cryptographic
techniques. Their common feature is to hide the transaction data itself, waiting until
theorderattheconsensuslayerhasbeenestablished, andtorevealthetransactiondata
later for processing. This preserves the causal order among the transactions that are
executed by the blockchain. The relevant security notions and cryptographic protocols
have been developed considerably before the advent of blockchains [71, 190].
The security conditions of “input causality” [190] and “secure causality preserva-
tion” [71, 97] require formally that no information about a transaction becomes known
before the position of this transaction in the global order has been determined. An ad-
versarymustnotbeabletoinferanyinformationuntilthattime, inacryptographically
strong sense.
One can distinguish four cryptographic techniques to preserve causality:
• Commit-reveal protocols [29, 142, 145]: Instead of a transaction being announced
intheclear, onlyacryptographic commitment tothetransactionisbroadcast. Af-
ter all committed but hidden transactions have been ordered (in early blockchain
systems on MAINCHAIN itself, but here by FSS), the sender must open the com-
mitment and reveal the transaction data within a predetermined time interval.
The network then veriﬁes that the opening satisﬁes the earlier commitment. The
origins of this method date prior to the advent of blockchains.
Although it is particularly simple, the approach introduces considerable draw-
backs and is not easy to employ for two reasons. First, since only the commit-
ment exists at the level of the ordering protocol, the semantics of the transaction
cannot be validated during consensus. An additional round-trip to the client
is required. More severely, though, weighs the possibility that no opening may
ever arrive, which could amount to a denial-of-service attack. Furthermore, it
is diﬃcult to determine whether the opening is valid in a consistent, distributed
manner because all participants must agree on whether the opening arrived in
time.
• Commit-reveal protocols with delayed recovery [145]: One challenge with the
commit-reveal approach is that a client may commit to a transaction specu-
latively and reveal it later only if subsequent transactions make it proﬁtable. A
recent variant of the commit-reveal approach improves the resilience against this
kindofmisbehavior. Inparticular, theTEXprotocol[145]addressesthisproblem
using a clever approach in which encrypted transactions include a decryption key
obtainable by computing a veriﬁable delay function (VDF) [53, 221]. If a client
fails to decrypt her transaction in a timely way, others in the system will decrypt
it on her behalf by solving a moderately hard cryptographic puzzle.
54
• Threshold encryption [71, 190]: ThismethodexploitsthattheDONmayperform
threshold-cryptographic operations. Assume FSS maintains an encryption public
key pk and the oracles share the corresponding private key among themselves.
O
Clients then encrypt transactions under pk and send them to FSS. FSS orders
O
transactions on the DON, then decrypts them, and ﬁnally injects them into
MAINCHAIN in the ﬁxed order. Encryption therefore ensures that ordering is
not based on the transaction content, but that the data itself is available when
needed.
This method was originally proposed by Reiter and Birman [190] and later re-
ﬁned by Cachin et al. [71], where it was integrated with a permissioned consensus
protocol. More recent work has explored the use of threshold cryptography as a
consensus-level mechanism for generic messages [33, 97] and for general compu-
tations with shared data [41].
Comparedtocommit-revealprotocols,thresholdencryptionpreventssimpledenial-
of-service attacks (although care is required given the computational cost of de-
cryption). It lets the DON proceed autonomously, at its own speed and without
waiting for further client actions. Transactions may be validated immediately af-
ter they have been decrypted. Moreover, clients encrypt all transactions with one
key for the DON and the communication pattern remains the same as with other
transactions. Managing the threshold key securely and with changing nodes in
O, however, may pose additional diﬃculties.
• Committed secret sharing [97]: Instead of encrypting the transaction data under
a key held by the DON, the client may also secret-share it for the nodes in O.
Using a hybrid, computationally secure secret sharing scheme, the transaction
is encrypted ﬁrst using a symmetric cipher with a random key. Only the corre-
sponding symmetric key is shared and the ciphertext is submitted to the DON.
The client must send one key share to each node in O using a separately en-
crypted message. The remaining protocol steps are the same as with threshold
encryption, except that the transaction data is decrypted with the symmetric
algorithm after reconstructing the per-transaction key from its shares.
This method does not require setup or management of a public-key cryptosystem
associated with the DON. However, the clients must be aware of the nodes in
O and communicate in a secure context with each one of them, which places
additional burden on the clients.
Although the cryptographic methods oﬀer complete protection against information
leaking from submitted transactions to the network, they do not conceal metadata. For
example, an IP address or an Ethereum address of the sender could still be used by
an adversary to perform front-running and other attacks. Various privacy-enhancing
techniques deployed at the network layer, e.g., [52, 95, 107], or the transaction layer,
e.g., [13, 65], would be needed to accomplish this goal. The impact of a particular piece
ofmetadata,namelytowhichcontract atransactionissent,canbe(partially)concealed
55
through multiplexing many contracts on the same DON. Cryptographic concealment
of transactions per se also doesn’t prevent prioritization of transactions by corrupted
DON nodes in collusion with transaction senders.
Secure causality as guaranteed by cryptographic protocols complement the order-
fairness guarantees for any policy, and we intend to explore a combination of the two
methods, where this is possible. If an adversary cannot gain signiﬁcant advantage from
observingmetadata, thesecurecausality-preservationprotocolscouldbeusedalongside
a na¨ıve ordering approach as well. For example, oracle nodes can write transactions
to L as soon as they receive them, without duplication. Transactions would then be
ordered according to their appearance on L and subsequently decrypted.
We also plan to consider the use of TEEs as a way to help enforce fair ordering; for
example, Tesseract [44] may be viewed as achieving a form of causal ordering, but one
strengthened by the ability of the TEE to process transactions in explicit form while
retaining their conﬁdentiality.
5.4 Network-Layer Considerations
So far, our description of FSS has mainly focused on the problem of enforcing that the
ﬁnalized order of transactions matches their observed order in the network. Hereafter,
we consider fairness issues that could arise at the network layer itself.
High-frequency traders in conventional electronic marketplaces invest considerable
resources to obtain superior network speed [64], and traders in cryptocurrency ex-
changes exhibit similar behavior [90]. Network speed confers an advantage both in
observing the transactions of other parties and in submitting competing transactions.
One remedy deployed in practice and popularized in the book Flash Boys [155] is
the “speed bump” introduced initially in the IEX exchange [128] and later in other
exchanges [179] (with mixed results [19]). This mechanism imposes a delay (350 mi-
croseconds in IEX) on access to the market, with the aim of neutralizing advantages in
speed. Empirical evidence, e.g. [128], supports its eﬃcacy in decreasing certain trading
costs for ordinary investors. FSS can be used simply to implement an asymmetrical
speed bump—one that delays incoming transactions.
Budish, Cramton, and Shim [64] argue that exploitation of advantages in speed
is inescapable in continuous-time markets, and argue for a structural remedy in the
form of batch-auction-based markets. But this approach has not taken hold broadly
in existing trading platforms.
Conventionaltradingsystemsarecentralized,typicallyreceivingtransactionsthrough
a single network connection. In a decentralized system, by contrast, it is possible to
observe transaction propagation from multiple vantage points. Consequently, it is pos-
sible to observe behaviors such as network ﬂooding in a P2P network. We intend
to explore network-layer approaches to FSS that help developers to specify policies
prohibiting such undesirable network behaviors.
56
5.5 Entity-Level Fairness Policies
Order-fairness and secure causality aim at enforcing an ordering on transactions that
respects the time when they were created and ﬁrst submitted to the network. A limita-
tion of this notion of fairness is that it does not prevent attacks in which an adversary
gains an advantage by ﬂooding a system with many transactions, a strategy observed
in the wild as a way to perform eﬀective transaction sniping in token sales [159] and to
create congestion resulting in liquidation of collateralized debt positions (CDPs) [48].
In other words, order-fairness enforces fairness with respect to transactions, not players.
AsshownintheCanDIDsystem[160],itispossibletouseoracletoolssuchasDECO
or Town Crier in conjunction with a committee of nodes (such as a DON) to achieve
various forms of Sybil-resistance while protecting privacy. Users can register identities
and provide evidence of their uniqueness without disclosing the identities themselves.
Sybil-resistant credentials oﬀer a possible approach to enriching transaction-ordering
policies in a way that would limit opportunities for ﬂooding attacks. For example, a
token sale might permit only one transaction per registered user, where registration
requiresaproofofuniquenessofanationalidentiﬁer, suchasaSocialSecurityNumber.
Suchanapproachisn’tfoolproof, butmayproveausefulpolicytomitigatetransaction-
ﬂooding attacks.
6 The DON Transaction-Execution Framework
(DON-TEF)
DONswillprovideoracleanddecentralized-resourcesupportforlayer-2solutionswithin
whatwecalltheDecentralizedOracleNetworkTransaction-ExecutionFramework(DON-
TEF) or TEF for short.
Today,thefrequencyofupdatestoDeFicontractsislimitedbymainchainlatencies,
e.g., the 10-15 second average block interval in Ethereum [104]—as well as the cost of
pushing large amounts of data on chain and limited computational/tx throughput—
motivating scaling approaches such as sharding [148, 158, 232] and layer-2 execution [5,
12, 121, 141, 169, 186, 187]. Even blockchains with much faster transaction times,
e.g., [120], have proposed scaling strategies that involve oﬀ-chain computation [168].
TEF is meant to act as a layer-2 resource for any such layer-1 / MAINCHAIN systems.
Using TEF, DONs can support faster updates in a MAINCHAIN contract while
retaining the key trust assurances provided by the main chain. TEF can support
any of a number of layer-2 execution techniques and paradigms, including rollups,11
optimistic rollups, Validium, etc., as well as a threshold trust model in which DON
nodes execute transactions.
The TEF is complementary to FSS and intended to support it. In other words, any
application running in the TEF can use FSS.
11Often called “zk-rollups,” a misnomer, as they do not necessarily need zero-knowledge proofs.
57
6.1 TEF Overview
The TEF is a design pattern for the construction and execution of a performant hybrid
smart contract SC.
In accordance with the main idea behind hybrid smart contracts, TEF involves a
decomposition of SC into two pieces: (1) What we call in the TEF context an anchor
contract SC on MAINCHAIN and (2) DON logic exec that we call the TEF executable.
a t
We use SC here to denote the logical contract implemented by the combination of SC
a
and exec . (As noted above, we expect to develop compiler tools to decompose a
t
contract SC automatically into these components.)
The TEF executable exec is the engine that processes users’ transactions in SC. It
t
can execute in a performant way, as it runs on the DON. It has several functions:
• Transaction ingestion: exec receives or fetches users’ transactions. It can do so
t
directly, i.e., throughtransactionsubmissionontheDON,orviatheMAINCHAIN
mempool using MS.
• Fast transaction execution: exec processes transactions involving assets within
t
SC. It does so locally, i.e., on the DON.
• Fast and low-cost oracle / adapter access: exec hasnativeaccesstooraclereports
t
and other adapter data leading to, e.g., faster, cheaper, and more accurate asset
pricing than MAINCHAIN execution. Moreover, oﬀ-chain oracle access reduces
the oracle’s operational cost, hence the cost of using the system, by avoiding
expensive on-chain storage.
• Syncing: exec periodically pushes updates from DON onto MAINCHAIN, updat-
t
ing SC .
a
The anchor contract is the MAINCHAIN front end of SC. As the higher-trust com-
ponent of SC, it serves several purposes:
• Asset custody: Users’ funds are deposited into, held in, and withdrawn from SC .
a
• Syncing veriﬁcation: SC may verify the correctness of state updates when exec
a t
syncs, e.g., SNARKs attached to rollups.
• Guard rails: SC may include provisions to protect against corruption or failures
a
in exec . (See Section 7 for more details.)
t
In TEF, users’ funds are custodied on MAINCHAIN, meaning the DON is itself non-
custodial. Depending on the choice of syncing mechanism (see below), users may need
totrusttheDONonlyforaccurateoraclereportsandtimelysyncingwithMAINCHAIN.
The resulting trust model is very similar to that for order-book-based DEXes, e.g., [2],
which today generally include an oﬀ-chain component for order matching and an on-
chain component for clearing and settlement.
58
Tousethevocabularyofpaymentsystems, onemaythinkofexec asthecomponent
t
of SC responsible for clearing, while SC handles settlement. See Fig. 13 for a schematic
a
depiction of TEF.
Figure 13: TEF schematic. In this example, transactions pass through the mempool
of MAINCHAIN via MS to the DON.
TEF beneﬁts: TEF carries three main beneﬁts:
• Highperformance: SCinheritstheDON’smuchhigherthroughputthanMAINCHAIN
for both transactions and oracle reports. Additionally, exec can process transac-
t
tions faster and respond to oracle reports in a more timely way than an imple-
mentation on MAINCHAIN alone.
• Lower fees: The process of syncing is less time-sensitive than transaction pro-
cessing, and transactions can be sent from the DON to MAINCHAIN in batches.
Consequently, the per-transaction on-chain fees (e.g., gas costs) with this ap-
proach are much lower than for a contract that runs only on MAINCHAIN.
• Conﬁdentiality: The conﬁdentiality mechanisms of the DON can be brought to
bear on SC.
59
TEF limitations: One limitation of TEF is that it does not support instantaneous
withdrawals, as they occur only on MAINCHAIN: Upon sending a withdrawal request
to SC , a user may need to wait for exec to perform a state update that includes the
a t
withdrawal transaction before it can be approved. We discuss some partial remedies,
however, in Section 6.2.
Another limitation of TEF is that it does not support atomic composition of DeFi
contracts on MAINCHAIN, speciﬁcally the ability to route assets through multiple DeFi
contracts in a single transaction. TEF can, however, support such atomicity among
DeFi contracts running on the same DON. We also discuss some ways to address this
problem in Section 6.2.
6.2 Transaction Routing
Transactions for SC can be sent by users directly to the DON or can be routed through
the mempool in MAINCHAIN (via FSS). There are four distinct transaction types, each
of which requires diﬀerent handling:
Within-contract transactions: Because it sidesteps the complications of gas dy-
namics, TEF provides SC more ﬂexibility in its handling of transactions than would be
available in a layer-1 contract. For example, while a mempool transaction in Ethereum
can be overwritten by a fresh transaction with a higher gas price, SC can treat a trans-
action that operates on assets within SC as authoritative as soon as it becomes visible
in the mempool. Consequently, SC need not wait for a transaction to be conﬁrmed
within a block, resulting in considerably reduced latency.
Proxying: A user may wish to send a transaction τ to SC via a wallet contract or
other contract on MAINCHAIN. It is possible for the DON to simulate execution of
τ on MAINCHAIN to determine whether it results in a follow-on transaction to SC.
If so, τ can be sequenced with other transactions for SC that do. There are a few
possibilities for how the DON identiﬁes such transactions: (1) The DON can simulate
all transactions in the mempool (an expensive approach); (2) Certain contracts or
contract types, e.g., wallets, can be listed for monitoring by the DON; or (3) Users can
annotate transactions for DON inspection.
Matters become more complicated when a single transaction interacts with two
contracts, SC and SC , both of which use Fair Sequencing Services and have incom-
1 2
patible ordering policies. The DON might, for example, sequence τ at the latest time
that is compatible with both.
Deposits: A transaction depositing a MAINCHAIN asset into SC needs to be con-
ﬁrmed in a block before SC can treat it as valid. When it detects the mining of a
transaction that sends assets (e.g., Ether) into SC , exec can instantly conﬁrm the
a t
60
deposit. For example, it can apply a current oracle-reported price on the DON to the
asset.
Withdrawals: As noted above, a limitation of TEF is that withdrawals cannot al-
ways be executed instantaneously. In a rollup-type execution model, the withdrawal
request must be sequenced with other transactions, i.e., rolled up, in order to be safely
processed. There are, however, some partial remedies to this limitation.
If the DON can quickly compute a rollup validity proof up to the withdrawal trans-
action, then observing a user’s transaction τ in the mempool exec can send a state-
t
update transaction τ0 for τ at a higher gas price, a kind of beneﬁcial front-running.
Provided that τ isn’t mined before τ0 reaches the mempool, τ0 will precede τ, and τ
will eﬀect an approved withdrawal.
In a TEF variant where the DON is relied upon to compute state updates (see
the threshold signing variant below), the DON can alternatively determine oﬀ-chain
whether τ ought to be approved given the state of SC upon its execution. The DON
can then send a transaction τ0 that approves withdrawal τ—without eﬀecting a full
state update.
If this approach isn’t possible, or in cases where it doesn’t succeed, a DON-initiated
transaction τ0 can send funds to the user in response to τ so that the user need not
initiate an additional transaction.
6.3 Syncing
The TEF executable exec periodically pushes updates from DON to MAINCHAIN,
t
updatingthestateofSC inaprocesswerefertoassyncing. Syncingmaybethoughtof
a
as propagation of layer-2 transactions to layer-1, so TEF can draw on any of a number
of existing techniques for this purpose, including rollups [5, 12, 16, 69], optimistic
rollups [10, 11, 141], Validium [201], or basic threshold signing, e.g., threshold BLS,
Schnorr, or ECDSA [24, 54, 116, 202]. In principle, trusted execution environments
can also attest to the correctness of state changes, oﬀering a much more performant
alternative to rollups, but with a hardware-dependent trust model. (See, e.g., [80].)
Below we compare these syncing options with respect to three key properties in
TEF:
• Data availability: Where is the state of SC stored? At least three options are
available in TEF: on the MAINCHAIN, on a DON, or by some third-party storage
providers such as IPFS. They achieve diﬀerent security guarantees, availability
levels, andperformanceproﬁles. Brieﬂy, storingstateontheMAINCHAINenables
on-chain auditability and eliminates reliance on any party for state availability;
on the other hand, storing state oﬀ-chain can reduce storage cost and improve
throughput, at the cost of trusting storage providers (DON or third parties) for
data availability. Of course, ﬂexible models that combine these options are also
possible. We indicate the required form of data availability in Table 1.
61
• Correctness guarantees: How does SC ascertain the correctness of the updates
a
pushed by exec ? This aﬀects the computational load on exec and SC and the
t t a
syncing latency (see below).
• Latency: Syncing latency has three contributing factors: (1) The time taken
for exec to generate a syncing transaction τ ; (2) The time taken for τ
t sync sync
to be conﬁrmed on MAINCHAIN; and (3) The time for τ to take eﬀect on
sync
SC . In TEF, latency is particularly important for withdrawals (but less so for
a
within-contracttransactions)becausewithdrawalsnecessarilyrequirean(atleast
partial) state sync.
Syncing Data Correctness
Latency
options availability guarantees
Rollup [5, 12, 16, 69] On-chain Validity proofs Time taken to generate
validity proofs (e.g., min-
utes in current systems)
Validium [201] Oﬀ-chain Validity proofs Same as above
Optimistic rollup [10, On-chain Fraud proofs Length of the challenge
11, 141] period (e.g., days or
weeks)
Threshold signing [24, Flexible Threshold signa- Instantaneous
54, 116, 202] tures by DON
Trusted execution en- Flexible Hardware-based Instantaneous
vironments [80] attestations
Table 1: Various syncing options in TEF and their properties.
Table 1 summarizes these properties in the ﬁve main syncing options in TEF. (Note
that we do not intend to compare these technologies as standalone layer-2 scaling
solutions. For that we refer readers to e.g., [121].)
Now we discuss each syncing option.
Rollups: A rollup [69] is a protocol in which the state transition eﬀected by a
batch of transactions is computed oﬀ-chain. The state change is then propagated
onto MAINCHAIN.
To implement rollups, the anchor smart contract SC stores a compact represen-
a
tation R (e.g., a Merkle root) of the actual state. To sync, exec sends τ =
state t sync
(T,R0 ) to SC where T is the set of the transactions it processed since the last
state a
62
sync and R0 is the compact representation of the new state calculated by applying
state
transactions in T to the previous state R .
state
There are two popular variants that diﬀer in how SC veriﬁes state updates in τ .
a sync
The ﬁrst, (zk-)rollups, attach a succinct argument of correctness, sometimes called
a validity proof, for the transition R → R0 . To implement this variant, exec
state state t
computes and submits the validity proof (e.g., a zk-SNARK proof) along with τ ,
sync
proving that R0 is the result of applying T to the current state of SC . The anchor
state a
contract accepts the state update only after it has veriﬁed the proof.
Optimistic rollups do not include arguments of correctness, but have staking and
challengeproceduresthatfacilitatedistributedveriﬁcationofstatetransitions. Forthis
rollup variant, SC tentatively accepts τ assuming it is correct (hence the optimism)
a sync
but τ does not take eﬀect until after a challenge period, during which any party
sync
monitoring MAINCHAIN can identify erroneous state updates and inform SC to take
a
necessary actions (e.g., to rollback the state and inﬂict a penalty on exec .)
t
Both rollup variants achieve on-chain data availability, as transactions are posted
on-chain, from which the full state can be constructed. The latency of zk-rollups is
dominated by the time needed to generate validity proofs, which typically is on the
order of minutes in existing systems [16] and will likely see improvements over time.
Optimistic rollups, on the other hand, have a higher latency (e.g., days or weeks)
because the challenge period needs to be long enough for fraud proofs to work. The
implication of slow conﬁrmation is subtle and sometimes speciﬁc to the scheme, so that
a thorough analysis is out of scope. For instance, certain schemes consider payment
transactions as “trustless ﬁnal” [109] before the state update is conﬁrmed, since a
regular user could verify a rollup much more quickly than the MAINCHAIN.
Validium: Validium is a form of (zk-)rollup that makes data available oﬀ-chain only
and does not maintain all data on MAINCHAIN. Speciﬁcally, exec sends only the new
t
state and the proof but not transactions to SC . With Validium-style syncing, exec
a t
and the DON that executes it are the only parties that store the complete state and
that execute transactions. As with zk-rollups, syncing latency is dominated by validity
proof generation time. Unlike zk-rollups, however, Validium style syncing reduces the
storage cost and increases the throughput.
Threshold signing by DON: Assuming a threshold of DON nodes is honest, a
simple and fast syncing option is to have DON nodes collectively sign the new state.
This approach can support both on-chain and oﬀ-chain data availability. Note that if
users trust DON for oracle updates, they do not need to trust it more for accepting
state updates, as they are already in a threshold trust model. Another beneﬁt of
threshold signing is low latency. Support for new transaction signature formats as
proposed in EIP-2938 [70] and known as account abstraction would make threshold
signing considerably easier to implement, as it would eliminate the need for threshold
ECDSA, which involves considerably more complex protocols (e.g., [116, 117, 118])
63
than alternatives such as threshold Schnorr [202] or BLS [55] signatures.
Trusted Execution Environments (TEEs): TEEsareisolatedexecutionenviron-
ments (usually realized by hardware) that aim to provide strong security protections
for programs running inside. Some TEEs (e.g., Intel SGX [84]) can produce proofs,
known as attestations, that an output is correctly computed by a speciﬁc program for
a particular input12. A TEE-based variant of TEF syncing can be implemented by
replacing proofs in (zk-)rollups or Validium with TEE attestations using techniques
from [80].
Compared to zero-knowledge proofs used in rollups and Validium, TEEs are much
more performant. Compared to threshold signing, TEEs remove the complexity of
generating threshold ECDSA signatures as there need in principle be only one TEE
involved. Using TEEs does, however, introduce extra hardware-dependent trust as-
sumptions. One can also combine TEEs with threshold signing to create resilience
against compromise of a fraction of TEE instances, although this protective measure
reintroduces the complexity of generating threshold ECDSA signatures.
Additional ﬂexibility: These syncing options can be reﬁned to provide more ﬂexi-
bility in the following ways.
• Flexible triggering: TEF application can determine the conditions under which
syncing is triggered. For example, syncing can be batch-based, e.g., occur after
everyN transactions, time-based, e.g., every10blocks, orevent-based, e.g., occur
whenever target asset prices move signiﬁcantly.
• Partial syncing: It is possible and in some cases desirable (e.g., with rollups,
partial syncing can reduce latency) for exec to provide fast syncing of small
t
amounts of state, performing full syncing perhaps only periodically. For example,
exec can approve a withdrawal request by updating a user’s balance in SC
t a
without otherwise updating MAINCHAIN state.
6.4 Reorgs
Blockchain reorganizations resulting from network instability or even from 51%-attacks
can pose a threat to the integrity of a main chain. In practice, adversaries have used
them to mount double-spending attacks [34]. While such attacks on major chains are
challenging to mount, they remain feasible for some chains [88].
Because it operates independently of MAINCHAIN, a DON oﬀers the interesting
possibility of observing and providing some protections against reorgs associated with
attacks.
For example, a DON can report to a relying contract SC on MAINCHAIN the ex-
istence of a competing fork of some threshold length τ. The DON can additionally
12SupplementarydetailscanbefoundinAppendixB.2.1. Theyarenotrequiredforunderstanding.
64
provide proof—in either a PoW or PoS setting—of the existence of such a fork. The
contractSCcanimplementsuitabledefensiveactions, suchassuspendingfurthertrans-
action execution for a period of time (e.g., to allow exchanges to blacklist double-spent
assets). Note that although an adversary mounting a 51%-attack can seek to censor
reports from a DON, a countermeasure in SC is to require periodic reports from the
DON in order to process transactions (i.e., a heartbeat) or to require a fresh report to
validate a high-value transaction.
While such forking alerts are in principle a general service the DON can provide
for any of a number of purposes, our plan is to incorporate them with the TEF.
7 Trust Minimization
As a decentralized system with participation from a heterogeneous set of entities, the
Chainlink network provides strong protection against failures in both liveness (avail-
ability) and safety (report integrity). Most decentralized systems, however, vary in
the degree to which their constituent components are themselves decentralized. This
is true even of large systems, where limited decentralization among miners [32] and
intermediaries [51] has long been present.
The goal of any decentralization eﬀort is trust minimization: We seek to reduce the
adverseeﬀectsofsystemiccorruptionorfailurewithintheChainlinknetwork, eventhat
due to a malicious DON. Our guiding principle is the Principle of Least Privilege [197].
System components and actors within the system should have privileges strictly scoped
to allow only for the successful completion of their assigned roles.
Here we lay out several concrete mechanisms for Chainlink to adopt in its drive
toward ever-greater trust minimization. We characterize these mechanisms in terms
of the loci, i.e., system components, in which they are rooted, shown in Fig. 14. We
address each locus in a respective subsection.
7.1 Data-Source Authentication
Current operating models for oracles are constrained by the fact that few data sources
digitally sign the data they omit, in large part because TLS does not natively sign
data. TLS does make use of digital signatures in its “handshake” protocol (to establish
asharedkeybetweenaserverandclient). HTTPS-enabledserversthushavecertiﬁcates
on public keys that can in principle serve to sign data, but they do not generally use
these certiﬁcates to support data signing. Consequently, the security of a DON, as
in today’s oracle networks, relies on oracle nodes faithfully relaying data from a data
source to a contract.
An important long-term component of our vision for trust minimization in Chain-
link involves stronger data-source authentication through support of tools and stan-
dards for data signing. Data signing can help enforce end-to-end integrity guarantees.
In principle, if a contract accepts as input a piece of data D signed directly by a data
65
Figure 14: Loci of trust-minimizing mechanisms discussed in this section. (cid:13)1 Data
sources provide data to the (cid:13)2 DON, which relays a function of the data to a dependent
(cid:13)3 smart contract. Additionally, the DON or the oracle network includes (cid:13)4 node
management smart contracts on MAINCHAIN for, e.g., compensating nodes, guard
rails, and so forth.
source, then the oracle network cannot feasibly tamper with D. Various encouraging
eﬀorts to enable such signing of data have emerged, including OpenID Connect, which
is designed primarily for user authentication [9], TLS-N, an academic project aiming to
extend TLS [191] by repurposing TLS certiﬁcates, and TLS Evidence Extensions [63].
While OpenID Connect has seen some adoption, however, TLS Evidence Extensions
and TLS-N have yet to see adoption.
Another potential avenue of data-source authentication is to use publishers’ own
Signed HTTP Exchanges (SXG) [230], which they can cache on content-delivery net-
works as part of the Accelerated Mobile Pages (AMP) protocol [225]. The Chrome mo-
bile browser displays the content from AMP-cached SXGs as if they were served from
their publishers’ own network domains instead of the cache-server domain. This brand-
ing incentive, coupled with the relative ease of enabling it using services like Cloud-
Flare’s Real URL [83] and Google’s amppackager [124], may lead to widespread adop-
tion of SXGs in cached news content, which would enable a simple, tamper-resistant
way for Chainlink oracles to trigger on newsworthy events reported in valid SXGs.
While AMP-cached SXGs from news publishers would not be useful for high-tempo
applications like reports on trading data, they could be a secure source for custom
contracts pertaining to real-world events like extreme weather or election outcomes.
We believe that simple deployment, mature tools, and ﬂexibility will be vital to
accelerating data-source signing. Enabling data providers to use Chainlink nodes as
an authenticated API front end seems a promising approach. We intend to create an
66
option for nodes to function in this mode, with or without participation in the network
as a full-blown oracle. We refer to this capability as authenticated data origination
(ADO). By using Chainlink nodes with ADO, data sources will be able to beneﬁt
from the experience and tools developed by the Chainlink community in adding digital
signing capabilities to their existing suite of oﬀ-chain APIs. Should they choose to run
their nodes as oracles, they can additionally open up potential new revenue streams
under the same model as existing data providers, e.g., Kraken [28], Kaiko [140], and
others, that run Chainlink nodes to sell API data on chain.
7.1.1 The Limitations of Authenticated Data Origination
Digital signing by data sources, while it can help strengthen authentication, isn’t suf-
ﬁcient per se to accomplish all of the natural security or operational goals of an oracle
network.
To begin with, a given piece of data D must still be relayed in a robust and timely
way from a data source to smart contract or other data consumer. That is, even in
an ideal setting in which all data is signed using keys pre-programmed into dependent
contracts, a DON would still be needed to communicate the data reliably from sources
to contracts.
Additionally, there are a number of cases in which contracts or other oracle-data
consumers want access to authenticated output of various functions computed over
source data for two main reasons:
• Conﬁdentiality: A data source API may provide sensitive or proprietary data
that needs to be redacted or sanitized before it is made publicly visible on chain.
Any modiﬁcation to signed data, however, invalidated the signature. Put another
way, na¨ıve ADO and data sanitization are incompatible. We show in Example 3
how the two can be reconciled through an enhanced form of ADO.
• Data source faults: Both errors and failures can aﬀect data sources, and digi-
tal signatures address neither problem. From its inception [98], Chainlink has
already included a mechanism to remediate such faults: redundancy. The re-
ports issued by oracle networks typically represent the combined data of multiple
sources.
We now discuss schemes we are exploring in the ADO setting to enhance the con-
ﬁdentiality of source data and to combine data from multiple sources securely.
7.1.2 Conﬁdentiality
Data sources may not anticipate and make available the full gamut of APIs desired
by users. Speciﬁcally, users may wish to access pre-processed data to help ensure
conﬁdentiality. The following example illustrates the problem.
67
Example 3. Alice wishes to obtain a decentralized identity (DID) credential stating
that she is over 18 years of age (and thus can, for instance, take out a loan). To do
so, she needs to prove this fact about her age to a DID credential issuer.
Alice hopes to use data from her state’s Department of Motor Vehicles (DMV)
website for the purpose. The DMV has a record of her birthdate and will emit a
digitally signed attestation A on it of the following form:
A = {Name:Alice,DoB:02/16/1999}.
In this example, the attestation A may be suﬃcient for Alice to prove to the DID
credentialissuerthatshe’sover18. Butitneedlessly leaks sensitive information: Alice’s
exact DoB. Ideally, what Alice would like from the DMV instead is a signature on a
simple statement A0 that “Alice is over 18 years of age.” In other words, she wants the
output of a function G on her birthdate X, where (informally), A0 = G(X) = True if
CurrentDate−X ≥ 18 years; otherwise, G(X) = False.
To generalize, Alice would like to be able to request from the data source a signed
attestation A0 of the form:
A0 = {Name:Alice,Func:G(X), Result:True},
where G(X) denotes a speciﬁcation of a function G and its input(s) X. We envision
that a user should be able to provide a desired G(X) as input with her request for a
corresponding attestation A0.
Note that the data source’s attestation A0 must include the speciﬁcation G(X) to
ensure that A0 is correctly interpreted. In the above example, G(X) deﬁnes the meaning
of the Boolean value in A0 and thus that True signiﬁes the subject of the attestation
is over 18 years of age.
We refer to ﬂexible queries in which a user can specify G(X) as functional queries.
In order to support use cases like that in Example 3, as well as those involving queries
directly from contracts, we intend to include support for functional queries involving
simple functions G as part of ADO.
7.1.3 Combining Source Data
To reduce on-chain costs, contracts are generally designed to consume combined data
from multiple sources, as illustrated in the following example.
Example 4 (Medianizing price data). To provide a price feed, i.e., the value of one
asset (e.g., ETH) with respect to another (e.g., USD), an oracle network will generally
obtain current prices from a number of sources, such as exchanges. The oracle network
typically sends to a dependent contract SC the median of these values.
In an environment with data signing, a correctly functioning oracle network obtains
from data sources S = {S ,...,S } a sequence of values V = {v ,v ,...,v } from
1 nS 1 2 nS
n sources with accompanying source-speciﬁc signatures Σ = {σ ,σ ,...,σ }. Upon
S 1 2 nS
verifying the signatures, it transmits the price v = median(V) to SC.
68
Unfortunately, there is no simple way for an oracle network to transmit the median
valuev inExample4toSCalongwithasuccinctproofσ∗ thatv wascorrectly computed
over signed inputs.
A na¨ıve approach would be to encode in SC the public keys of all n data sources.
S
The oracle network would then relay (V,Σ) and allow SC to compute the median of V.
This, however, would result in a proof σ of size O(n )—i.e., σ∗ would not be succinct.
S
It would also incur high gas costs for SC, which would need to verify all signatures in
Σ.
Use of SNARKs, in contrast, enables a succinct proof of correctly combined au-
thenticated source values. It may be workable in practice, but imposes fairly high
computational costs on the prover, and somewhat high gas costs on chain. Use of
Town Crier is also a possibility, but requires the use of TEEs, which does not suit all
users’ trust models.
Ahelpfulconceptinwhichtoframesolutionstothegeneralproblemofsigningcom-
bineddatafromsourcesisacryptographictoolknownasfunctional signatures[59,132].
Brieﬂy, functional signatures allow a signer to delegate signing capability, such that
the delegatee can only sign messages in the range of a function F chosen by the signer.
We show in Appendix D how this functional constraint can serve to bound the range
of report values emitted by a DON as a function of the values signed by data sources.
We also introduce a new primitive, called a discretized functional signature, that in-
cludes a relaxed requirement for accuracy, but is potentially much more performant
than approaches such as SNARKs.
Theproblemofcombiningdatasourcesinawaythatincludessourceauthentication
of outputs also applies to data aggregators, e.g., CoinCap, CoinMarketCap, CoinGecko,
CryptoCompare, etc., which obtain data from a multiplicity of exchanges, which they
weight based on volumes, using methodologies that they in some cases make public
and are in other cases proprietary. An aggregator that wishes to publish a value with
source authentication faces the same challenge as a collection of nodes aggregating
source data.
7.1.4 Processing Source Data
Sophisticated smart contracts are likely to depend on custom aggregate statistics over
primary data sources, such as volatility in recent price history over many assets, or
text and photographs from news about pertinent events.
BecausecomputationandbandwidtharerelativelycheapinaDON,thesestatistics—
even complex machine-learning models with many inputs—can be processed economi-
cally, as long as any output value destined for a blockchain is suﬃciently concise.
For computationally intensive jobs where DON participants may have diﬀering
views on complex inputs, extra rounds of communication between the DON partici-
pantsmayberequiredtoestablishconsensusontheinputsbeforecomputingtheresult.
As long as the ﬁnal value is fully determined by the inputs, once input consensus is es-
tablished each participant can simply compute the value and broadcast it to the other
69
participants with their partial signature, or send it to an aggregator.
7.2 DON Trust Minimization
We envision two main ways of minimizing the trust placed in components of the DON:
failover clients and minority reports.
7.2.1 Failover Clients
Adversarial models in the cryptography and distributed systems literature typically
consider an adversary capable of corrupting (i.e., compromising) a subset of nodes,
e.g., fewer than one-third for many BFT protocols. It is commonly observed, however,
that if all nodes run identical software, an adversary that identiﬁes a fatal exploit could
in principle compromise all nodes more or less simultaneously. This setting is often
referred to as a software monoculture [47].
Various proposals for automatically diversifying software and software conﬁgura-
tions have been put forth to address the problem, e.g., [47, 113]. As noted in [47],
however, software diversity is a complex issue and requires careful consideration. Soft-
ware diversiﬁcation, for example, can result in worse security than a monoculture if it
increases a system’s attack surface and thus its possible vectors of attack in excess of
the security beneﬁts it oﬀers.
We believe that support for robust failover clients—i.e., clients to which nodes
can switch in the face of a catastrophic event—is an especially attractive form of
software diversiﬁcation. Failover clients do not increase the number of potential vectors
of attack, as they are not deployed as mainline software. They oﬀer clear beneﬁts,
however, as a second line of defense. We intend to support failover clients in DONs as
a key means of reducing their dependence for security on a single client.
Chainlink already has in place a robust system of failover clients. Our approach
involvesmaintainingprevious, battle-testedclientversions. Today, forexample, Chain-
link nodes with Oﬀ-Chain Reporting (OCR) as their primary client include support
for Chainlink’s previous FluxMonitor system if needed. Having been in use for some
time, FluxMonitor has received security audits and ﬁeld testing. It provides the same
functionality as OCR, just at higher cost—a cost only incurred on an as-needed basis.
7.2.2 Minority Reports
Given a suﬃciently large minority set O —a fraction of honest nodes that ob-
minority
serve malfeasance by the majority—it can be helpful for them to generate a minority
report. This is a parallel report or ﬂag, relayed to a dependent contract SC on-chain
by O . SC can make use of this ﬂag according to its own contract-speciﬁc policy.
minority
For example, for a contract in which safety is more important than liveness or respon-
siveness, a minority report might cause the contract to request supplementary reports
from another DON, or trigger a circuit breaker (see the next section).
70
Minority reports can play an important role even when the majority is honest,
because any report-aggregation scheme, even if it uses functional signatures, must
operate in a threshold manner, to ensure resilience against oracle or data failure. In
other words, it must be possible to produce a valid report based on the inputs of
k < n oracles, for some threshold k . This means a corrupted DON has some
S S S
latitude in manipulating report values by selecting its preferred k values among the
S
n reported in V by the full set of oracles, even if all sources are honest.
S
For example, suppose that n = 10 and k = 7 in a system that uses a functional
S S
signature to authenticate computation of median over V for the USD price of ETH.
Suppose that ﬁve sources report a price of $500, while the other ﬁve report $1000.
Then by medianizing the lowest 7 reports, the DON can output a valid value v = $500,
and by medianizing the highest, it can output v = $1000.
By enhancing the DON protocol so that all nodes are aware of which data was
available, and which data was used to construct a report, nodes could detect and ﬂag
statistically signiﬁcant tendencies to favor one set of reports over another, and produce
a minority report as a result.
7.3 Guard Rails
Our trust model for DONs treats MAINCHAIN as a higher-security, higher-privilege
system than DONs. (While this trust model may not always hold true, it is easier
to adapt the resulting mechanism to situations where the DON is the higher security
platform than vice versa.)
A natural trust minimization strategy thus involves the implementation of moni-
toring and failsafe mechanisms in smart contracts—either in a MAINCHAIN front end
for a DON or directly in a dependent contract SC. We refer to these mechanisms as
guard rails, and enumerate some of the most important here:
• Circuit breakers: SC may pause or halt state updates as a function either of char-
acteristics of the state updates themselves (e.g., large variance across sequential
reports) or based on other inputs. For example, a circuit breaker might trip in
cases where oracle reports vary implausibly over time. A circuit breaker might
also be tripped by a minority report. Thus, circuit breakers can prevent DONs
from making grossly erroneous reports.
Circuit breakers can provide time for additional interventions to be considered
or exercised. One such intervention is escape hatches.
• Escape hatches: Under adverse circumstances, as identiﬁed by a set of custodi-
ans, community token holders, or other bodies of trustees, a contract may invoke
an emergency facility sometimes called an escape hatch [163]. An escape hatch
causes SC to shut down in some manner and/or terminates pending and possibly
future transactions. For example, it may return custodied funds to users [17]),
71
may terminate contract terms [162], or may cancel pending and/or future trans-
actions [173]. Escape hatches can be deployed in any type of contract, not just
one that relies on a DON, but they are of interest as a potential buﬀer against
DON malfeasance.
• Failover: In systems where SC relies on the DON for essential services, it is pos-
sible for SC to provide failover mechanisms that ensure service continuation even
in the case of DON failure or misbehavior. For example, in the TEF (Section 6),
the anchor contract SC may provide dual interfaces where both on-chain and
a
oﬀ-chain execution interfaces are supported for certain critical operations (e.g.,
withdrawal), or for ordinary transactions, with a suitable delay to prevent front-
running of DON transactions. In cases where data sources sign data, users could
also furnish reports to SC when the DON fails to do so.
a
Fraud proofs, as proposed for various forms of optimistic rollup (see Section 6.3),
are similar in ﬂavor and complementary to the mechanisms we enumerate above. They
too provide a form of on-chain monitoring and protection against potential failures in
oﬀ-chain system components.
7.4 Trust-Minimized Governance
Like all decentralized systems, the Chainlink network requires governance mechanisms
to adjust parameters over time, respond to emergencies, and guide its evolution.
Some of these mechanisms currently reside on MAINCHAIN, and may continue to
do so even with the deployment of DONs. One example is the payment mechanism
for oracle node providers (DON nodes). DON front end contracts on MAINCHAIN
contain additional mechanisms, such as guard rails, that may be subject to periodic
modiﬁcation.
We foresee two classes of governance mechanisms: evolutionary and emergency.
Evolutionary governance: Many modiﬁcations to the Chainlink ecosystem are
such that their implementation is not a matter of urgency: Performance improvements,
feature enhancements, (non-urgent) security upgrades, and so forth. As Chainlink pro-
gressively moves toward even more participants in its governance, we expect many or
most such changes to be ratiﬁed by the community of a speciﬁc DON aﬀected by those
changes. In the interim, and perhaps ultimately as a parallel mechanism, we believe
that a notion of temporal least privilege can be a useful means of implementing evolu-
tionary governance. Very simply, the idea is for changes to deploy gradually, ensuring
the community an opportunity to respond to them. For example, migration to a new
MAINCHAIN contract can be constrained so that the new contract must be deployed
at least thirty days before activation.
72
Emergency governance: Exploitable or exploited vulnerabilities in MAINCHAIN
contracts or other forms of liveness or safety failures may require immediate interven-
tion to ensure against catastrophic outcomes. Our intention is to support a multisig
intervention mechanism in which, to ensure against malfeasance by any organization,
signerswillbedispersedacrossorganizations. Ensuringconsistentavailabilityofsigners
and timely access to appropriate chains of command for authorization of emergency
changes will clearly require careful operational planning and regular review. These
challenges are similar to those involved in testing other cybersecurity incident-response
capabilities [134], with a similar need to combat common problems like vigilance decre-
ment [223].
The governance of DONs diﬀers from that of many decentralized systems in its
potential degree of heterogeneity. Each DON may have distinct data sources, executa-
bles, service-level requirements such as uptime, and users. The Chainlink network’s
governance mechanisms must be ﬂexible enough to accommodate such variations in
operational goals and parameters. We are actively exploring design ideas and plan to
publish research on this topic in the future.
7.5 Public-Key Infrastructure
With progressive decentralization will come the need for a robust identiﬁcation of
network participants, including DON nodes. In particular, Chainlink requires a strong
Public-Key Infrastructure (PKI). A PKI is a system that binds keys to identities. For
example, a PKI undergirds the Internet’s system of secure connections (TLS): When
you connect to a website via HTTPS (e.g., https://www.chainlinklabs.com) and a
lock appears in your browser, that means that the public key of the domain owner has
been bound to that owner by an authority—speciﬁcally, through a digital signature in
a so-called certiﬁcate. A hierarchical system of certiﬁcate authorities (CAs), whose top-
level root authorities are hardwired into popular browsers, helps ensure that certiﬁcates
are issued only to the legitimate owners of domains.
We expect that Chainlink will eventually make use of decentralized name services,
initially the Ethereum Name Service (ENS) [22], as the foundation for our PKI. As
its name suggests, ENS is analogous to DNS, the Domain Name System that maps
(human-readable) domain names to IP addresses on the internet. ENS, however, in-
stead maps human-readable Ethereum names to blockchain addresses. Because ENS
operates on the Ethereum blockchain, barring key compromise, tampering with its
namespace is in principle as diﬃcult as tampering with the contract administering it
and/or the underlying blockchain. (DNS, in contrast, has historically been vulnerable
to spooﬁng, hijacking, and other attacks.)
We have registered data.eth with ENS on the Ethereum mainnet, and intend to
establish it as a root namespace under which the identities of oracle data services and
other Chainlink network entities reside.
DomainsinENSarehierarchical, meaningthateachdomainmaycontainreferences
to other names under it. Subdomains in ENS can serve as a way to organize and
73
delegate trust.
The main role of data.eth will be to serve as an on-chain directory service for
data feeds. Traditionally, developers and users of oracles have used oﬀ-chain sources
(e.g., websites like docs.chain.link or data.chain.link, or social networks such as
Twitter) to publish and obtain oracle data feed addresses (such as the ETH-USD price
feed). With a highly trustworthy root namespace such as data.eth, it is possible in-
stead to establish a mapping of eth-usd.data.eth to, e.g., the smart contract address
of an on-chain oracle network aggregator for the ETH-USD price feed. This would
create a secure path for anyone to refer to the blockchain as the source of truth for
that data feed of that price/name pair (ETH-USD). Consequently, such use of ENS
realizes two beneﬁts unavailable in oﬀ-chain data sources:
• Strong security: All changes and updates to the domain are recorded immutably
and secured cryptographically, as opposed to text addresses on a website, which
enjoy neither of these two security properties.
• Automated on-chain propagation: Updates to the underlying address of a data-
feed’s smart contract can trigger notiﬁcations that propagate to dependent smart
contracts and can, for example, automatically update dependent contracts with
the new addresses.13
Namespaces like ENS, however, do not automatically validate legitimate ownership
of asserted names. Thus, for example, if the namespace includes the entry
h“Acme Oracle Node Co.”,addri,
then a user obtains the assurance that addr belongs to the claimant of the name Acme
Oracle Node Co. Without additional mechanisms around namespace administration,
however, she does not obtain assurance that the name belongs to an entity legitimately
called Acme Oracle Node Co. in a meaningful real world sense.
Our approach to validation of names, i.e., ensuring their ownership by correspond-
ing, legitimate real-world entities, relies on several components. Today, Chainlink Labs
eﬀectively acts as a CA for the Chainlink network. While Chainlink Labs will continue
to validate names, our PKI will evolve into a more decentralized model in two ways:
• Web-of-trust model: The decentralized counterpart of a hierarchical PKI is of-
ten referred to as a web-of-trust.14 Variants have been proposed since the 1990s,
e.g., [98], and a number of researchers have observed that blockchains can facil-
itate use of the idea, e.g., [227] by recording certiﬁcates in a globally consistent
ledger. Weareexploringvariantsofthismodeltovalidatetheidentitiesofentities
in the Chainlink network in a more decentralized way.
13Adependentcontractcanoptionallyincludeapredetermineddelaytoallowformanualinspection
and intervention by dependent-contract administrators.
14A term coined by Phil Zimmermann for PGP [238].
74
• Linkage to validating data: Today, a substantial amount of oracle node perfor-
mance data is visible on-chain, and thus archivally bound to node addresses.
Such data may be viewed as enriching an identity in the PKI by providing his-
torical evidence of its (reliable) participation in the network. Additionally, tools
for decentralized identity based on DECO and Town Crier [160] enable nodes
to accumulate credentials derived from real-world data. As just one example, a
node operator can attach a credential to its PKI identity that proves possession
of a Dun and Bradstreet rating. These supplementary forms of validation can
supplement staking in creating assurance of the security of the network. An or-
acle node with an established real-world identity may be viewed as having stake
in a system deriving from its reputation. (See Section 4.3 and Section 9.6.3.)
A ﬁnal requirement for the Chainlink PKI is secure bootstrapping, i.e., securely
publishing the root name for the Chainlink network, currently data.eth (analogously
tohardwiringoftop-leveldomainsinbrowsers). Inotherwords,howdoChainlinkusers
determine that data.eth is indeed the top-level domain associated with the Chainlink
project? The solution to this problem for the Chainlink network is multi-pronged and
may involve:
• Adding a TXT record [224] to our domain record for chain.link that speciﬁes
data.eth as the root domain for the Chainlink ecosystem. (Chainlink thus im-
plicitly leverages the PKI for internet domains to validate its root ENS domain.)
• Linking to data.eth from Chainlink’s existing website, e.g., from
https://docs.chain.link. (Another implicit use of the PKI for internet do-
mains.)
• Makingtheuseofdata.ethknownviavariousdocuments,includingthiswhitepa-
per.
• Posting data.eth publicly on our social-media channels, such as Twitter, and
the Chainlink blog [18].
• Placing a large quantity of LINK under the control of the same registrant address
as data.eth.
8 DON Deployment Considerations
Whilenotapartofourcoredesign, thereareseveralimportanttechnicalconsiderations
in the realization of DONs that deserve treatment here.
75
8.1 Rollout Approach
This paper lays out an ambitious vision of advanced Chainlink functionality whose
realization will require solutions to many challenges along the way. This whitepaper
identiﬁes some challenges, but unanticipated ones are sure to arise.
We plan to implement elements of this vision in an incremental fashion over an
extended period of time. Our expectation is that DONs will initially launch with
support for speciﬁc pre-built components built collaboratively by teams within the
Chainlink community. The intention is that broader uses of DONs, e.g., the ability to
launch arbitrary executables, will see support at a later time.
One reason for such caution is that composition of smart contracts can have com-
plex, unintended, and dangerous side eﬀects, as recent ﬂash-loan-based attacks have
for instance shown [127, 189]. Similarly, composition of smart contracts, adapters, and
executables will require extreme care.
In our initial deployment of DONs, we plan to include only a pre-built set of tem-
platized executables and adapters. This will enable study of the compositional security
of these functionalities using formal methods [46, 170] and other approaches. It will
also simplify pricing: Functionality pricing can be established by DON nodes on a per-
functionality basis, rather than through generalized metering, an approach adopted
in, e.g., [156]. We also expect the Chainlink community to take part in the creation
of additional templates, combining various adapters and executables into increasingly
usefuldecentralizedservicesthatcanberunbyhundreds, ifnotthousandsofindividual
DONs.
Additionally, this approach can help prevent state bloat, i.e., the need for DON
nodes to retain an unworkable amount of state in working memory. This problem is
already arising in permissionless blockchains, motivating approaches such as “stateless
clients”(see,e.g.,[206]). Itcanbemoreacuteinhigherthroughputsystems,motivating
an approach in which a DON deploys only state-size-optimized executables.
As DONs evolve and mature and include robust guard rails, as discussed in Sec-
tion 7, cryptoeconomic and reputation-based security mechanisms as discussed in Sec-
tion 9, and other features that provide a high degree of assurance for DON users, we
also expect to develop a framework and tools to facilitate broader launch and use of
DONs by the community. Ideally, these tools will enable a collection of node operators
to come together as an oracle network and launch their own DONs in a permissionless
or self-service manner, meaning that they can do so unilaterally.
8.2 Dynamic DON Membership
ThesetofnodesrunningagivenDONmaychangeovertime. Therearetwoapproaches
to key management for sk given dynamic membership in O.
L
The ﬁrst is to update shares of sk held by the nodes upon changes in membership,
L
while keeping pk unchanged. This approach, explored in [41, 161, 198], has the merit
L
of not requiring that relying parties update pk .
L
76
The classical technique of share resharing, introduced in [122], provides a simple
and eﬃcient way of realizing such share updates. It enables a secret to be transferred
between one set of nodes O(1) and a second, possibly intersecting one O(2). In this
approach, each node O(1) performs a (k(2),n(2)) secret sharing of its secret share across
i
nodes in O(2) for n(2) = |O(2)| and desired (possibly new) threshold k(2). Various veriﬁ-
able secret sharing (VSS) schemes [108] can provide security against an adversary that
actively corrupts nodes, i.e., introduces malicious behavior into the protocol. Tech-
niques in [161] aim to do so while reducing communication complexity and providing
resilience against failures in cryptographic hardness assumptions.
A second approach is to update the ledger key pk . This has the beneﬁt of forward
L
security: Compromise of old shares of pk (i.e., former committee nodes) would not
L
resultincompromiseofthecurrentkey. Updatestopk , however, carrytwodrawbacks:
L
(1) Data encrypted under pk needs to be re-encrypted during a key refresh and (2)
L
Key updates need to be propagated to relying parties.
We intend to explore both approaches, as well as hybridizations of the two.
8.3 DON Accountability
AswithexistingChainlinkoraclenetworks, DONswillincludemechanismsforaccount-
ability,i.e.,recording,monitoring,andenforcingcorrectnodebehavior. DONswillhave
much more substantial data capacity than many existing permissionless blockchains,
particularly given their ability to connect to external decentralized storage. Conse-
quently, they will be able to record nodes’ performance history in detail, allowing for
more ﬁne-grained accountability mechanisms. For example, oﬀ-chain computation of
asset prices may involve inputs that are discarded before a median result is sent on
chain. In a DON, these intermediate results could be recorded. Misbehavior or per-
formance lapses by individual nodes in a DON can thus be remedied or penalized on
the DON in a ﬁne-grained way. We have additionally discussed approaches to building
guard rails in Section 7.3 that address the contract-speciﬁc impact of systemic failures.
It is also important, however, to have failsafe mechanisms for DONs themselves,
i.e., protections against systemic, potentially catastrophic DON failures, speciﬁcally
forking / equivocation and service-level agreement (SLA) failures, as we now explain.
Forking / equivocation: Given suﬃciently many faulty nodes, a DON can fork
or equivocate, producing two distinct, inconsistent blocks or sequences of blocks in L.
Because a DON digitally signs the contents of L, however, it is possible to leverage a
main chain MAINCHAIN to prevent and/or penalize equivocation.
TheDONcanperiodicallycheckpointstatefromLinanauditcontractonMAINCHAIN.
If its future state deviates from a checkpointed state, a user / auditor can present proof
of this misbehavior to the audit contract. Such proof can be used to generate an alert
or penalize DON nodes via slashing in the contract. This latter approach introduces
an incentive design problem similar to that for speciﬁc oracle feeds, and can build on
our work outlined in Section 9.
77
Enforcing service-level agreements: While DONs are not necessarily meant to
run indeﬁnitely, it is important that they adhere to service level agreements (SLAs)
with their users. Basic SLA enforcement is possible on a main chain. For example,
DON nodes might commit to maintaining the DON until a certain date, or to provid-
ing advance notice of service termination (e.g., three months’ notice). A contract on
MAINCHAIN can provide basic cryptoeconomic SLA enforcement.
For example, the SLA contract can slash DON-deposited funds if checkpoints are
not provided at required intervals. A user can deposit funds and challenge the DON
to prove that a checkpoint correctly represents a sequence of valid blocks (in a manner
analogous to, e.g. [141]). Of course, block production does not equate with transaction
processing, but the SLA contract can also serve to enforce the latter. For example, in
the legacy-compatible version of FSS in which transactions are fetched from the mem-
pool (see Section 5.2), transactions are eventually mined and placed on chain. A user
can prove DON malfeasance by furnishing the SLA contract with a transaction that
was mined but wasn’t transmitted by the DON for processing by the target contract
within the appropriate interval of time.15
It is also possible to prove the existence of and penalize more ﬁne-grained SLA
failures, including errors in computation using executables (via, e.g., the mechanisms
for proving correct oﬀ-chain state transactions outlined in Section 6.3) or failure to run
executables based on initiators visible on a DON, failure to relay data on the DON to
MAINCHAIN in a timely way, and so forth.
9 Economics and Cryptoeconomics
FortheChainlinknetworktoachievestrongsecuritywithinadecentralizedtrustmodel,
itisessentialthatnodescollectivelyexhibitcorrectbehavior, meaningthattheyadhere
a majority of the time exactly to DON protocols. In this section, we discuss approaches
tohelpingenforcesuchbehaviorbymeansofeconomic incentives,a.k.a.cryptoeconomic
incentives. These incentives fall into two categories: explicit and implicit, realized
respectively through staking and future fee opportunity (FFO).
Staking: Staking in Chainlink, as in other blockchain systems, involves network par-
ticipants, i.e., oracle nodes, depositing locked funds in the form of LINK tokens. These
funds, which we also refer to as stake or explicit stake are an explicit incentive. They
are subject to forfeiture upon node failure or malfeasance. In the blockchain context,
this procedure is often called slashing.
Staking by oracle nodes in Chainlink, however, diﬀers fundamentally from staking
by validators in permissionless blockchains. Validators can misbehave by equivocat-
ing or adversarially ordering transactions. The underlying consensus protocol in a
15As users can replace transactions in the mempool, care is required to ensure a correct correspon-
dence between the mined and DON-submitted transactions.
78
permissionless blockchain, though, uses hard-and-fast block-validation rules and cryp-
tographic primitives to prevent validators from generating invalid blocks. In contrast,
programmatic protections cannot prevent a cheating oracle network from generating
invalidreports. Thereasonisakeydiﬀerencebetweenthetwotypesofsystem: transac-
tionvalidationinblockchainsisapropertyofinternal consistency, whilethecorrectness
of oracle reports on a blockchain is a property of external, i.e., oﬀ-chain data.
WehavedesignedapreliminarystakingmechanismfortheChainlinknetworkbased
onaninteractiveprotocolamongoraclenodesthatmaymakeuseofexternaldata. This
mechanism creates ﬁnancial incentives for correct behavior using explicit rewards and
penalties (slashing). As the mechanism is economic, it is designed to prevent node
corruption by an adversary that uses ﬁnancial resources to corrupt nodes by means of
bribery. (Such an adversary is very general, and extends, e.g., to nodes cooperating to
extract value from their collective misbehavior.)
The Chainlink staking mechanism we have designed has some powerful and novel
features.16 Themainsuchfeatureissuper-linear staking impact(speciﬁcally,quadratic).
An adversary must have resources considerably in excess of nodes’ deposited funds in
order to subvert the mechanism. Our staking mechanism additionally provides protec-
tionagainst astronger adversarythan previously consideredin similarsystems, namely
an adversary that can create bribes conditioning on nodes’ future behavior. Addition-
ally, we discuss how Chainlink tools such as DECO can help strengthen our staking
mechanism by facilitating correct adjudication in the case of faulty node behavior.
Future fee opportunity (FFO): Permissionless blockchains—of both the PoW
and PoS variety—today rely critically on what we call implicit incentives. These are
economic incentives for honest behavior that derive not from explicit rewards, but
from platform participation itself. For example, the Bitcoin miner community is in-
centivized against mounting a 51% attack by the risk of undermining conﬁdence in
Bitcoin, depressing its value, and consequently eroding the value of their collective
capital investments in mining infrastructure [150].
The Chainlink network beneﬁts from a similar implicit incentive that we refer to
as future fee opportunity (FFO). Oracle nodes with strong performance histories or
reputations attract fees from users. Misbehavior by an oracle node jeopardizes future
feepaymentsandthuspenalizesthenodewithanopportunitycostintermsofpotential
revenue earned through participation in the network. By analogy with explicit stake,
FFO may be viewed as a form of implicit stake, an incentive for honest behavior that
derives from the shared beneﬁt of maintaining conﬁdence in the platform on which
node operators’ business depends, i.e., the positive performance and reputation of the
network. ThisincentiveisinherentinbutnotexplicitlyexpressedinChainlinknetwork
protocols. In Bitcoin, maintaining the value of mining operations as mentioned above
16Thestakingmechanismwedescribeherecurrentlyaimsonlytoenforcedeliveryofcorrectreports
by oracle networks. We expect in future work to extend it to ensure correct execution of the many
other functionalities DONs will provide.
79
may similarly be viewed as a form of implicit stake.
We emphasize that FFO already exists in Chainlink and helps secure the network
today. Our main contribution in the further development of Chainlink will be a princi-
pled, empiricallydrivenapproachtoevaluatingimplicitincentivessuchasFFOthrough
what we call the Implicit-Incentive Framework (IIF). To estimate quantities such as the
future fee opportunity of nodes, the IIF will draw continuously on the comprehensive
performance and payment data amassed by the Chainlink network. Such estimates
will enable IIF-based parameterization of staking systems that reﬂects node incentives
with greater accuracy than current heuristic and/or static models.
To summarize, then, the two main economic incentives for correct oracle node
behavior in the developing Chainlink network will be:
o
• Staking (deposited stake) Explicit incentive
o
• Future fee opportunity (FFO) Implicit incentive
These two forms of incentive are complementary. Oracle nodes can simultaneously
participate in the Chainlink staking protocol, enjoy an ongoing revenue stream from
users,andcollectivelybeneﬁtfromtheircontinuedgoodbehavior. Thusbothincentives
contribute to the cryptoeconomic security provided by an oracle network. Additionally,
the two incentives can reinforce and/or be traded oﬀ against one another. For example,
a new oracle operator without a performance history and revenue stream can stake a
large quantity of LINK as a guarantee of honest behavior, thereby attracting users
and fees. Conversely, an established oracle operator with a long, relatively fault-free
performance history can charge substantial fees from a large user base and thus rely
more heavily on its FFO as a form of implicit incentive.
In general, the approach we consider here aims for a given amount of oracle-network
resource to create the greatest possible economic incentives in Chainlink for rational
agents—i.e., nodes maximizing their ﬁnancial utility—to behave honestly. Put another
way, the goal is to maximize the ﬁnancial resources required for an adversary to attack
the network successfully. By formulating a staking protocol with mathematically well
deﬁned economic security and also using the IIF, we aim to measure the strength of
Chainlink’s incentives as accurately as possible. The creators of relying contracts will
then be able to determine with strong conﬁdence whether an oracle network meets
their required levels of cryptoeconomic security.
The virtuous cycle of economic security: The incentives we discuss in this sec-
tion, staking and FFO, have an impact beyond their reinforcement of the security of
DONs. They promise to induce what we call a virtuous cycle of economic security.
Super-linear staking impact (and other economies of scale) result in lower operational
cost as a DON’s security grows. Lower cost attracts additional users to the DON,
80
boosting fee payments. A rise in fee payments continues to incentivize growth of the
network, which perpetuates the virtuous cycle.
We believe that the virtuous cycle of economic security is just one example of an
economy of scale and network eﬀect among others that we discuss later in this section.
Section organization: Staking presents notable technical and conceptual challenges for
which we have designed a mechanism with novel features. Staking will therefore be
our main focus in this section.
We give an overview of the staking approach we introduce in this paper in Sec-
tion 9.1, followed by detailed discussion in Sections 9.2 to 9.5. We present the IFF
in Section 9.6. We present a summary view of Chainlink network incentives in Sec-
tion 9.7.
In Section 9.8, we discuss the virtuous cycle of economic security our proposed stak-
ing approach can bring to oracle networks. Finally, we brieﬂy describe other potential
eﬀects propelling growth of the Chainlink network in Section 9.9.
9.1 Staking Overview
The staking mechanism design we introduce here, as noted above, involves an inter-
active protocol among oracle nodes allowing for resolution of inconsistencies in the
reporting of external data. Staking aims to ensure honest behavior from rational or-
acle nodes. We can therefore model an adversary attacking a staking protocol as a
briber: The adversary’s strategy is to corrupt oracle nodes using ﬁnancial incentives.
Theadversarymayderiveﬁnancialresourcesprospectivelyfromsuccessfullytampering
with an oracle report, e.g., oﬀer to share the resulting proﬁt with corrupted nodes.
We aim in our staking mechanism design simultaneously at two ambitious goals:
1. Resisting a powerful adversary: The staking mechanism is designed to protect
oracle networks against a broad class of adversaries that are capable of complex,
conditional bribing strategies, including prospective bribery, which oﬀers bribes
to oracles whose identities are determined after the fact (e.g., oﬀers bribes to
oracles randomly selected for high-priority alerting). While other oracle designs
have considered a narrow set of attacks without the full capabilities of a realistic
adversary, to the best of our knowledge the adversarial mechanism we introduce
here is the ﬁrst to explicitly address a broad set of bribing strategies and show
resistance in this model. Our model assumes that nodes besides the attacker are
economically rational (as opposed to honest), and we assume the existence of a
source of truth that is prohibitively expensive for typical usage but is available
in case of disagreement (discussed further below).
2. Achieving super-linear staking impact:
Our aim is to ensure that an oracle network composed of rational agents reports
truthfully even in the presence of an attacker with a budget that is super-linear
81
in the total stake deposited by the entire network. In existing staking systems, if
each of n nodes stakes $d, an attacker can issue a credible bribe which requests
that nodes behave dishonestly in exchange for a payment of slightly more than
$d to each node, using a total budget of about $dn. This is already a high bar as
the attacker has to have a liquid budget on the order of the combined deposits of
all stakers in the network. Our goal is a still stronger degree of economic security
than this already substantial hurdle. We aim to design the ﬁrst staking system
that can achieve security for a general attacker with a budget super-linear in n.
While practical considerations may achieve a lower impact, as we discuss below,
our preliminary design achieves an adversarial budget requirement greater than
$dn2/2, i.e., scaling quadratic in n, rendering bribery largely impractical even
when nodes stake only moderate amounts.
Reaching these two goals requires an innovative combination of incentive design
and cryptography.
Key ideas: Our staking approach hinges on an idea we call watchdog priority.
A report generated by a Chainlink oracle network and sent to a relying contract
(e.g., on an asset price) is aggregated from individual reports contributed by partici-
pating nodes (e.g., by taking the median). Typically a service-level agreement (SLA)
speciﬁes acceptable bounds of deviation for reports, i.e., how far a node’s report can
deviate from the aggregate report and how far the aggregate should be permitted to
deviate from the true value to be considered correct.
In our staking system, for a given reporting round, each oracle node can act as
a watchdog to raise an alert if it believes the aggregate report is incorrect. In each
reporting round, each oracle node is assigned a public priority that determines the
order in which its alert (if any) will be processed. Our mechanism aims at reward
concentration, meaning that the highest-priority watchdog to raise an alert earns the
entire reward yielded by conﬁscating the deposits of faulty nodes.
Our staking system designs involve two tiers: the ﬁrst, default tier, and the second,
backstoptier. Theﬁrsttieristheoraclenetworkitself, asetofnnodes. (Forsimplicity,
we assume n is odd.) If a majority of nodes report incorrect values, a watchdog in the
ﬁrst tier is strongly incentivized to raise an alert. If an alert is raised, the reporting
decision of the network is then escalated to a second tier—a high-cost, maximum-
reliability system that can be user-speciﬁed in the network service-level agreement.
This could be a system which, for example, is composed only of nodes with strong
historical reliability scores, or one that has an order of magnitude more oracles than
theﬁrsttier. Additionally, asdiscussedinSection9.4.3, DECOorTownCriercanserve
as powerful tools to help ensure eﬃcient and conclusive adjudication in the second tier.
For simplicity we thus assume that this second-tier system arrives at a correct report
value.
While it might seem attractive just to rely on the second tier to generate all reports,
the beneﬁt of our design is that it consistently achieves the security properties of the
82
second-tier system while only paying the operating cost, in the typical case, of the
ﬁrst-tier system.
Watchdog priority results in super-linear staking impact in the following way: if the
ﬁrst-tier oracle network outputs an incorrect result and a number of watchdog nodes
alert, the staking incentive mechanism rewards the highest-priority watchdog with
more than $dn/2 drawn from the deposits of the (majority) misbehaving nodes. The
total reward is thus concentrated in the hands of this single watchdog, which therefore
determines the minimum that an adversary must promise a potential watchdog to
incentivize it not to alert. Since our mechanism ensures that every oracle gets the
chance to act as watchdog if the higher-priority watchdogs have accepted their bribes
(and chosen not to alert), the adversary must therefore oﬀer a bribe of more than
$dn/2 to every node to prevent any alert being raised. Since there are n nodes, the
adversary’s requisite budget for a successful bribe amounts to more than $dn2/2, which
is quadratic in the number n of nodes in the network.
9.2 Background
Our approach to staking draws on research in the ﬁelds of game theory and mechanism
design (MD) (for a textbook reference, see [177]). Game theory is the mathematically
formalized study of strategic interaction. In this context, a game is a model of such
an interaction, typically in the real world, that codiﬁes sets of actions available to
participants in the game, known as players. A game also speciﬁes the payoﬀs obtained
by the individual players—rewards that depend on a player’s chosen actions and the
actionsoftheotherplayers. Perhapsthebestknownexampleofagamestudiedingame
theory is the Prisoners’ Dilemma [178]. Game theorists generally aim to understand
the equilibrium or equilibria (if any) represented in a given game. An equilibrium is
a set of strategies (one for each player) such that no one player can obtain a higher
payoﬀ by unilaterally deviating from its strategy.
Mechanism design, meanwhile, is the science of designing incentives such that the
equilibrium of an interaction (and its associated game) has some desirable property.
MD may be viewed as the inverse of game theory: The canonical question in game
theory is, “given the incentives and model, what will the equilibrium be?” In MD, the
questionisinstead,“whatincentiveswillresultinagamewithadesirableequilibrium?”
A typical goal of a mechanism designer is to create an ‘incentive compatible’ mecha-
nism,meaningthatparticipantsinthemechanism(e.g.,anauctionorotherinformation
elicitation system [228]) are incentivized to report the truth on some matter (e.g., how
much they value a particular item). The Vickrey (second-price) auction is perhaps the
best known incentive compatible mechanism, in which participants submit sealed bids
for an item and the highest bidder wins the item but pays the second-highest price
[214]. Cryptoeconomics is a domain-speciﬁc form of MD that leverages cryptographic
techniques to create desirable equilibria within decentralized systems.
Bribery and collusion create signiﬁcant challenges throughout the ﬁeld of MD. Al-
most all mechanisms break in the presence of collusion, deﬁned as side contracts be-
83
tween the parties participating in a mechanism [125, 130]. Bribery, in which an exter-
nal party introduces novel incentives into the game, presents an even tougher problem
than does collusion; collusion may be viewed as a special case of bribery among game
participants.
Blockchainsystemscanoftenbeconceptualizedasgameswithmonetary(cryptocurrency-
based)payoﬀs. AsimpleexampleisProof-of-Workmining: minershaveanactionspace
inwhichtheycanchoosethehashratewithwhichtomineforblocks. Thepayoﬀofmin-
ingisaguaranteednegativereward(costofelectricityandequipment)plusastochastic
positive reward (mining subsidy) that depends on the number of other active miners
[106, 172] and transaction fees. Crowdsourced oracles like SchellingCoin [68] are an-
other example: the action space is the set of possible reports an oracle may send, while
the payoﬀ is the reward speciﬁed by the oracle mechanism, e.g., payment might depend
on how close an oracle’s report is to the median of the other reports [26, 68, 119, 185].
Blockchain games oﬀer ripe opportunities for collusion and bribery attacks; indeed,
smart contracts can even facilitate such attacks [96, 165]. Perhaps the best known
bribery attack on crowdsourced oracles is the p-plus-epsilon attack [67]. This attack
arisesinthecontextofaSchellingCoin-likemechanisminwhichplayerssubmitboolean-
valued reports (i.e., false or true) and are rewarded with p if they agree with the
majority submission. In a p-plus-epsilon attack, the attacker credibly promises to,
e.g., pay users $p+(cid:15) for voting false if and only if the majority submission is true.
The result is an equilibrium, in which all players are incentivized to report false
irrespective of what other players do; consequently, the briber can induce the nodes
through its promised bribe to report false without actually paying the bribe (!).
Exploration of other briber strategies in the context of oracles, however—and par-
ticularly oracles that are not crowdsourced—has been limited to fairly weak adversarial
models. For example, in the PoW setting, researchers have studied outcome-contingent
bribes, i.e., bribes paid only if a target message is successfully censored and does not
appear in a block, irrespective of an individual miner’s action [96, 165]. In the case
of oracles, however, other than the p-plus-epsilon attack, we are aware only of work in
a strictly limited model of bribery in which a briber sends a bribe conditioned on an
individual player’s action, not on the resulting outcome.
Here we sketch designs of information-elicitation mechanisms that remain incentive
compatible even in a strong adversarial model, as described in the next subsection.
9.3 Modeling Assumptions
In this subsection, we explain how we model the behavior and capabilities of players in
our system, speciﬁcally ﬁrst-tier oracle nodes, nodes in the second-tier (adjudication)
layer, and adversaries.
84
9.3.1 First-Tier Incentive Model: Rational Actors
Many blockchain systems rely for security on the assumption of some number of honest
participating nodes. Nodes are deﬁned to be honest if they follow the protocol even
when it is not in their ﬁnancial interest to do so. Proof-of-Work systems typically
require the majority of hash power to be honest, Proof-of-Stake systems typically re-
quire 2/3 or more of all participating stake to be honest, and even layer-2 systems like
Arbitrum [141] require at least a single honest participant.
Inmodelingforourstakingmechanism,wemakeamuchweakerassumption. (Tobe
clear, weaker assumptions mean stronger security properties and are therefore prefer-
able.) We assume that the adversary has corrupted, i.e., controls, some (minority)
fraction of ﬁrst-tier oracle nodes. We model the remaining nodes not as honest agents,
but as rational expected-utility maximizers. These nodes act entirely according to self-
interested ﬁnancial incentives, choosing actions that result in an expected ﬁnancial
gain. For example, if a node is oﬀered a bribe larger than the reward resulting from
honest behavior, it will accept the bribe.
Note on adversarial nodes: In accordance with the trust modeling common for
decentralized systems, we assume that all nodes are rational, i.e., seeking to maximize
net revenue, rather than controlled by a malicious adversary. Our claims, however—
speciﬁcally super-linear or quadratic staking impact—hold asymptotically provided
that the set of adversarially controlled nodes is at most (1/2−c)n, for some positive
constant c.
9.3.2 Second-Tier Adjudication Model: Correctness by Assumption
Recall that a critical feature of our staking mechanism that helps achieve security
against rational nodes is its second-tier system.
In our proposed staking mechanism, any oracle may raise an alert indicating that
it believes the output of the mechanism is incorrect. An alert results in a high-trust
second-tier system activating and reporting the correct result. Thus, a key modeling
requirement for our approach is correct adjudication, i.e., correct reporting by the
second-tier system.
Ourstakingmodelassumesasecond-tiersystemthatactsasanincorruptible, maxi-
mallyreliablesourceoftruth. Suchasystemislikelytobeexpensive and slow, andthus
inappropriate for use for the typical case. In the equilibrium case, however, i.e., when
the ﬁrst-tier system functions correctly, the second-tier system will not be invoked.
Instead, its existence boosts the security of the whole oracle system by providing a
high-assurance backstop.
The use of a high-trust, high-cost adjudication layer resembles the appeals process
at the heart of most judicial systems. It is also already common in the design of oracle
systems, e.g., [119, 185]. We brieﬂy discuss approaches to realization of the second tier
in our mechanism in Section 9.4.3.
85
Our staking protocol uses the assumed correct adjudication of the second-tier sys-
tem as a credible threat to enforce correct reporting by oracle nodes. The protocol
conﬁscates part or all of the stake of oracle nodes that generate reports identiﬁed by
the second-tier system as incorrect. Oracle nodes are thus deterred from misbehaving
by the resulting ﬁnancial penalty. This approach is similar in ﬂavor to that used in
optimistic rollups, e.g., [141, 10].
9.3.3 Adversarial Model
Our staking mechanism is designed to elicit truthful information while achieving secu-
rity against a broad, well-deﬁned class of adversaries. It improves upon prior works,
which either omit an explicit adversarial model or focus on narrow sub-classes of adver-
saries,e.g., thep-plus-epsilonadversarydiscussedabove. Ourgoalistodesignastaking
mechanism with formally proven security against the full spectrum of adversaries likely
to be encountered in practice.
We model our adversary as having a ﬁxed (parameterizable) budget, denoted by
$B. Theadversarycancommunicateindividuallyandconﬁdentiallywitheachoraclein
the network, and can secretly oﬀer any individual oracle guaranteed payment of a bribe
contingent on publicly observable outcomes of the mechanism. Outcomes determining
bribes can include, for example, the value reported by the oracle, any public messages
sent by any oracle to the mechanism (e.g., an alert), the values reported by other
oracles, and the value output by the mechanism.
Nomechanismcansecureagainstanattackerwithunlimitedcapabilities. Wethere-
fore consider some behaviors as unrealistic or out-of-scope. We assume our attacker
cannot break standard cryptographic primitives, and, as noted above, has a ﬁxed (if
potentially large) budget $B. We further assume that the adversary does not control
communication in the oracle network, speciﬁcally that it cannot substantially delay
traﬃc between ﬁrst-tier and/or second-tier nodes. (Whether the adversary can ob-
serve such communication depends on the particular mechanism, as we explain below.)
Informally, however, asnotedabove, weassumethattheadversarycan: (1)Corrupt
a fraction of oracle nodes ((1/2 − c)-fraction for some constant c), i.e., fully control
them, and (2) Oﬀer bribes to any desired nodes, with guaranteed payment contingent
on outcomes speciﬁed by the adversary, as described above.
While we don’t oﬀer a formal model or complete taxonomy of the adversary’s full
range of bribing capabilities in this whitepaper, here are examples of the kinds of
bribersencompassedbyourmodel. Forsimplicity, weassumethatoraclesemitBoolean
reports whose correct value (w.l.o.g.) is true, and that a ﬁnal outcome is computed as
an aggregate of these reports to be used by a consuming smart contract. The briber’s
aim is for the ﬁnal outcome to be incorrect, i.e., false.
• Unconditional briber: Briber oﬀers bribe $b to any oracle that reports false.
• Probabilistic briber: Briber oﬀers bribe $b with some probability q to any oracle
that reports false.
86
• false-outcome conditioned briber: Briber oﬀers bribe $b to any oracle that re-
ports false provided that the ﬁnal outcome is false.
• No-alert-conditioned briber: Briber oﬀers bribe $b to any oracle that reports
false as long as no alert is raised.
• p-plus-epsilon Briber: Briber oﬀers bribe $b to any oracle that reports false as
long as the majority of oracles do not report false.
• Prospective briber: Briberoﬀersbribe$binadvancetowhicheveroracleisselected
for a randomized role and reports false. In our proposed staking protocol, all
nodes act as potential watchdogs, and we are able to show that randomization
of watchdog priorities does not lend itself to prospective bribery. Many proof-
of-work, proof-of-stake, and permissioned systems are susceptible to prospective
bribery, however, which shows the importance of considering it in our adversarial
model and ensuring that our staking protocols are resilient to it. See Appendix E
for more details.
9.3.4 How Much Cryptoeconomic Security Is Enough?
A rational adversary will only spend money to attack a system if it can obtain a proﬁt
larger than its expenditure. Thus for our adversarial model and proposed staking
mechanism, $B may be viewed as a measure of the potential proﬁt an adversary is able
to extract from relying smart contracts by corrupting an oracle network and causing it
to generate an incorrect report or set of reports. In deciding whether an oracle network
oﬀers a suﬃcient degree of cryptoeconomic security for their purposes, a user should
assess the network from this perspective.
For plausible adversaries in practical settings, we expect that $B will generally be
substantially smaller than the total assets in relying smart contracts. In most cases, it
is infeasible for an adversary to extract these assets in their totality.
9.4 Staking Mechanism: Sketch
Here we present the main ideas and general structure of the staking mechanism we
are currently considering. For ease of presentation, we describe a simple but slow
(multi-round) protocol in this subsection. We note, however, that this scheme is quite
practical. Given the economic assurances provided by the mechanism, i.e., the penal-
ization of and consequent incentive against faulty nodes, many users may be willing to
accept reports optimistically. In other words, such users may accept reports prior to
potential adjudication by the second tier.
Usersunwillingtoacceptreportsoptimisticallycanchoosetowaituntiltheprotocol
executionterminates, i.e., untilanypotentialescalationtothesecondtieroccurs. This,
however, can substantially slow the conﬁrmation time for reports. We therefore brieﬂy
87
Figure 15: Schematic of staking scheme with alerting. In this example,(cid:13)1 a majority
of nodes are corrupted / bribed and emit an incorrect value r˜, rather than the correct
report value r. The watchdog node (cid:13)2 sends an alert to the second-tier committee,
which(cid:13)3 determines and emits the correct report value r, resulting in corrupted nodes
forfeiting their deposits—each $d to the watchdog node(cid:13)4.
outline some optimizations that result in a faster (single-round) if somewhat more
complex design in Section 9.5.
Recall that the ﬁrst tier in our staking mechanism consists of the basic oracle
network itself.
The main structure of our mechanism, as described above, is that in each round,
each node can act as a “watchdog” with some priority, and it thus has the ability to
raise an alert if the mechanism arrives at an incorrect output r˜, rather than a correct
one r. This alert causes second-tier resolution, which we assume arrives at a correct
report. Nodes with incorrect reports are punished, in the sense that their stakes are
slashed and awarded to watchdogs. This basic structure is common in oracle systems,
as in, e.g., [119, 185].
The key innovation in our design, mentioned brieﬂy above, is that every node is
assigned a distinct priority in the ordering of potential watchdogs. That is, watchdogs
are given opportunities to alert in priority sequence. Recall that if a node has the
highest priority to raise an alert, it receives the slashed deposit $d of every misbehaving
node, for a total of more than $dn/2 = $d × n/2, as an incorrect report implies a
majority of bad nodes. Consequently, the adversary must pay at least this reward to
bribe an arbitrary node. Thus, to bribe a majority of nodes, the adversary must pay a
large bribe to a majority of nodes, namely, strictly more than $dn2/2.
We show schematically how alerting and watchdog escalation works in Fig. 15.
88
9.4.1 Further Mechanism Details
The bribery-resistant system we now describe in further detail is a simpliﬁed sketch of
the two-tiered construction we intend to build. Most of our focus will be on describing
the ﬁrst-tier network (henceforth simply “network” where clear from context) along
with its incentive mechanism and the procedure for escalation to the second tier.
Consider a Chainlink network composed of n oracle nodes that are responsible for
regularly (e.g., once a minute) reporting a boolean value (e.g., whether the market
capitalization of BTC exceeds that of ETH). As part of the staking mechanism, nodes
mustprovidetwodeposits: adeposit$dsubjecttoslashingintheeventofdisagreement
withthemajorityandawatchdogdeposit$d subjecttoslashingintheeventofafaulty
w
escalation. We assume that the nodes cannot copy the submissions of other nodes, e.g.,
through a commit-reveal scheme as discussed in Section 5.3. In each round, nodes ﬁrst
commit to their report, and once all nodes have committed (or a timeout has expired),
nodes reveal their reports.
For each report to be generated, every node is also given a watchdog priority be-
tween 1 and n chosen at random, with 1 being top priority. This priority enables the
concentration of reward in the hands of one watchdog. After all reports are public,
an alerting phase ensues. Over a sequence of n (synchronous) rounds, the node with
priority i has the opportunity to alert in round i.
Let us consider the possible outcomes for the mechanism after nodes have revealed
their reports. Again assuming a binary report, suppose the correct value is true and
the incorrect one is false. Suppose also that the ﬁrst-tier mechanism outputs the
majority value output by nodes as the ﬁnal report r.
There are three possible outcomes in the mechanism:
• Complete agreement: Inthebestcase, nodesareincompleteagreement: allnodes
are available and have provided a timely report of the same value r (either true
or false). In this case, the network need only forward r to relying contracts
and reward each node with a ﬁxed per-round payment $p, which is much smaller
than $d.
• Partial agreement: It is possible that some nodes are oﬄine or there is dis-
agreement about which value is correct, but most nodes report true and only a
minority reports false. This case is also straightforward. The majority value
(true) is computed, resulting in a correct report r. All nodes that reported r are
rewarded with $p while the oracles that reported incorrectly have their deposits
slashed modestly, e.g., by $10p.
• Alert: Intheeventthatawatchdogbelievestheoutputofthenetworkisincorrect,
it publicly triggers an alert, escalating the mechanism to the second-tier network.
There are then two possible results:
– Correct alert: If the second-tier network conﬁrms that the output of the
89
Figure 16: Amplifying briber’s cost through concentrated alerting rewards. A bribing
adversary must bribe each node with more than the reward it stands to gain by alerting
(shown as a red bar). If alerting rewards are shared, then this reward may be relatively
small. Concentrated alerting rewards increase the reward that any single node may
obtain (tall red bar). Consequently the total payout by the adversary for a viable bribe
(gray regions) is much larger with concentrated than shared alerting rewards.
ﬁrst-tiernetworkwasincorrect,thealertingwatchdognodereceivesareward
consisting of all slashed deposits, and thus more than $dn/2.
– Faulty alert: If the second-tier and ﬁrst-tier oracles agree, the escalation is
deemed faulty and the alerting node loses its $d deposit.
w
In the case of optimistic acceptance of reports, watchdog alerts do not cause
any change in execution of relying contracts. For contracts designed to await
potential arbitration by the second-tier committee, watchdog alerts delay but
do not freeze contract execution. It is also possible for contracts to designate a
failover DON for periods of adjudication.
9.4.2 Quadratic Staking Impact
The ability for every node to act as a watchdog, combined with strict node priority
ensuring concentrated rewards, enables the mechanism to achieve quadratic staking
impact for each kind of bribing attacker described in Section 9.3.3. Recall that this
means speciﬁcally in our setting that, for a network with n nodes each with deposit
$d, a successful briber (of any of the kinds above) must have a budget of bigger than
$dn2/2.
Tobeprecise, thebribermustcorruptatleast(n+1)/2nodes, sincethebribermust
corrupt a majority of n nodes (for odd n, by assumption). Thus, a watchdog stands to
earn a reward of $d(n+1)/2. The briber consequently must pay this amount to every
90
node to ensure that none acts as a watchdog. We are working to show formally that if
the briber has a budget of at most $d(n2+n)/2, then the subgame perfect equilibrium
of the game between the bribers and the oracles—in other words, the equilibrium at
any point during the play of the game—is for the briber not to issue the bribe and for
each oracle to report its true values honestly.
We have explained above how it is possible that a successful briber could require a
budget signiﬁcantly larger than that of the sum of the node deposits. To illustrate this
intuitive result, Fig. 16 shows the impact of concentrated alert rewards graphically.
As we see there, if the reward for watchdog alerting—namely the deposits of bribed
nodes reporting false)—were split among all potential alerting, the total amount that
any individual alerting node could expect would be relatively small, on the order of
$d. A briber, knowing that a payout of larger than $d was improbable, could use
a false-outcome conditional bribe to bribe each of n nodes with slightly more than
$d+(cid:15).
Counterintuitively, Fig. 16 shows that a system that distributes a reward broadly
among nodes signaling an alert is far weaker than one that concentrates the reward in
the hands of a single watchdog.
Example parameters: Consider a (ﬁrst-tier) network with n = 100 nodes, each
depositing $d = $20K. This network would have a total of $2M deposited but would
be protected against a briber with budget $100M = $dn2/2. Increasing the number of
oracles is more eﬀective than increasing $d, of course, and can have a dramatic eﬀect:
a network with n = 300 nodes and deposits $d = $20K would be protected against a
briber with budget up to $900M.
Note that a staking system can in many cases protect smart contracts representing
more value than the oﬀered level of bribery protection. This is because an adversary
attacking these contracts cannot extract the full value in many cases. For example, a
Chainlink-powered contract securing $1B in value may only require security against a
briber with $100M in resource because such an adversary can feasibly extract a proﬁt
of only 10% of the value of the contract.
Note: The idea that the value of a network can grow quadratically is expressed in
the well known Metcalfe’s Law [167, 235], which states that the value of a network
grows quadratically in the number of connected entities. Metcalfe’s Law, however,
arises from growth in the number of potential pairwise network connections, a dif-
ferent phenomenon than that underlying quadratic staking impact in our incentive
mechanism.
9.4.3 Realization of Second Tier
Two operational features facilitate realization of a high-reliability second tier: (1)
Second-tier adjudication should be a rare event in oracle networks and therefore can
be signiﬁcantly more costly than normal operation of the ﬁrst tier and (2) Assuming
91
optimistically accepted reports—or contracts whose execution can await arbitration—
the second tier need not execute in real time. These features result in a range of
conﬁguration options for the second tier to meet the requirements of particular DONs.
As an example approach, a second tier committee can consist of nodes selected by a
DON (i.e., ﬁrst tier) from the longest-serving and most reliable nodes in the Chainlink
network. In addition to considerable relevant operational experience, the operators
of such nodes have a considerable implicit incentive in FFO that motivates a desire
to ensure that the Chainlink network remains highly reliable. They also have publicly
available performance histories that provide transparency into their reliability. Second-
tier nodes, it is worth noting, need not be participants in the ﬁrst-tier network, and
may adjudicate faults across multiple ﬁrst-tier networks.
Nodes in a given DON can pre-designate and publicly commit to a set of n0 such
nodes as constituting the second-tier committee for that DON. Additionally, DON
nodes publish a parameter k0 ≤ n0 that determines the number of second-tier votes
required to penalize a ﬁrst-tier node. When an alert is generated for a given report,
the members of the second tier vote on the correctness of the values provided by each
of the ﬁrst-tier nodes. Any ﬁrst-tier node that receives k0 negative votes forfeits its
deposits to the watchdog node.
Becauseoftherarenessofadjudicationandopportunityforextended-timeexecution
noted above, in contrast to the ﬁrst tier, nodes in the second tier can:
1. Be highly compensated for conducting adjudication.
2. Draw on additional data sources, beyond even the diverse set used by the ﬁrst-
tier.
3. Rely on manual and/or expert inspection and intervention, e.g., to identify and
reconcile errors in source data and distinguish between an honest node relaying
faulty data and a misbehaving node.
We emphasize that the approach we have just described for selection of second-
tier nodes and policy governing adjudication represents just a point within a large
design space of possible realizations of the second tier. Our incentive mechanism oﬀers
complete ﬂexibility as to how the second tier is realized. Individual DONs can thus
constitute and set rules for their second tiers that meet the particular requirements
and expectations of participating nodes and users.
DECO and Town Crier as adjudication tools: It is essential for the second tier
in our mechanism to be able to distinguish between adversarial ﬁrst-tier nodes that
intentionally produce incorrect reports and honest ﬁrst-tier nodes that unintentionally
relay data that is incorrect at the source. Only then can the second tier implement
slashing to disincentivize cheating, the goal of our mechanism. DECO and Town Crier
are powerful tools that can enable second-tier nodes to make this critical distinction
reliably.
92
Second-tier nodes may in some cases be able to directly query the data source used
byaﬁrst-tiernodeoruseADOSection7.1inordertocheckwhetheranincorrectreport
resulted from a faulty data source. In other cases, however, second tier nodes may lack
directaccesstoaﬁrst-tiernode’sdatasource. Insuchcases, correctadjudicationwould
appear to be infeasible or require a reliance on subjective judgment. Previous oracle
dispute systems have relied upon ineﬃcient, escalating rounds of voting to address such
challenges.
Using DECO or Town Crier, however, a ﬁrst tier node can prove correct behavior
to second-tier nodes. (See Section 3.6.2 for details on the two systems.) Speciﬁcally, if
the second tier node identiﬁes a ﬁrst-tier node as having output a faulty report value r˜,
the ﬁrst-tier node can use DECO or Town Crier to generate tamperproof evidence for
second-tier nodes that it is correctly relaying r˜ correctly from a (TLS-enabled) source
recognized as authoritative by the DON. Critically, the ﬁrst-tier node can do this
without second-tier nodes requiring direct access to the data source.17 Consequently,
correct adjudication is feasible in Chainlink for any desired data source.
9.4.4 Misreporting Insurance
The strong bribery resistance achieved by our staking mechanism relies fundamentally
on slashed funds being awarded to alerters. Without a monetary reward, alerters would
have no direct incentive to reject bribes. As a result, however, slashed funds are not
available to compensate users harmed by incorrect reports, e.g., users that lose money
when incorrect price data is relayed to a smart contract.
By assumption, incorrect reports don’t pose a problem if reports are accepted by a
contract only after potential adjudication, i.e., action by the second tier. As explained
above, though, to achieve the best possible performance, contracts may instead rely
optimistically on the mechanism to enforce correct reporting, meaning that they accept
reports before potential second-tier adjudication. Indeed, such optimistic behavior
is safe in our model assuming rational adversaries whose budgets do not exceed the
staking impact of the mechanism.
Users concerned about the improbable event of a mechanism failure resulting from,
e.g., adversaries with overwhelming ﬁnancial resources, may wish to employ an addi-
tional layer of economic security in the form of misreporting insurance. We know of
multiple insurers already intending to oﬀer smart-contract-backed policies of this kind
for Chainlink-secured protocols in the near future, including through innovative mech-
anisms such as DAOs, e.g., [7]. The existence of performance history for Chainlink
nodes and other data about nodes such as their stake amounts provides an exception-
ally strong basis for actuarial assessments of risk, making it possible to price policies
in ways that are inexpensive for policyholders yet sustainable for insurers.
17With Town Crier, it is additionally possible for ﬁrst-tier nodes to locally generate attestations
of correctness for the reports they output and provide these attestations to second-tier nodes on an
as-needed basis.
93
Basic forms of misreporting insurance can be implemented in a trustworthy and
eﬃcient manner using smart contracts. As a simple example, a parametric insurance
contractSC cancompensatepolicyholdersautomaticallyifourincentivemechanism’s
ins
second tier identiﬁes an error in a report generated in the ﬁrst tier.
A user U that wishes to purchase an insurance policy, e.g., the creator of a target
contract SC, can submit a request to a decentralized insurer for an policy amount
$M on the contract. On approving U, the insurer can set an ongoing (e.g., monthly)
premium of $P in SC . While U pays the premium, her policy remains active.
ins
If a reporting failure occurs in SC, the result will be the emission of a pair (r ,r )
1 2
of conﬂicting reports for SC, where r is signed by the ﬁrst tier in our mechanism and
1
r , the corresponding corrected report, is signed by the second tier. If the U furnishes
2
such a valid pair (r ,r ) to SC , the contract automatically pays her $M, provided
1 2 ins
her premium payments are up-to-date.
9.5 Single-Round Variant
The protocol described in the previous subsection requires that the second-tier com-
mittee wait n rounds to determine whether a watchdog has raised an alert. This
requirement holds even in the optimistic case, i.e., when the ﬁrst tier is functioning
correctly. For users unwilling to accept reports optimistically, i.e., prior to potential
adjudication, the delay associated with that approach would be unworkable.
For this reason, we are also exploring alternative protocols that require just one
round. In this approach, all oracle nodes submit secret bits indicating whether or not
they wish to raise an alert. The second-tier committee then checks these values in
priority order. To provide a rough sketch, such a scheme might involve the following
steps:
1. Watchdog bit submission: Each node O secret-shares a one-bit watchdog value
i
w ∈ {no alert,alert} among nodes in the second tier for every report it gen-
i
erates.
2. Anonymous tips: Any oracle node can submit an anonymous tip α to the second-
tier committee in the same round that watchdog bits are submitted. This tip α
is a message indicating that an alert has been raised for the current report.
3. Watchdog bit checking: Thesecond-tiercommitteerevealsoraclenodes’watchdog
bits in priority order.
Note that nodes must send no alert watchdog bits when they don’t alert: oth-
erwise, traﬃc analysis reveals all nodes’ bits. The protocol does reveal the no alert
watchdogbitsofnodeswithhigherprioritythanthehighest-priorityalertingwatchdog.
Observe that what is revealed is identical with that of our n-round protocol. Re-
wardsarealsodistributedidenticallywiththatscheme,i.e.,theﬁrstidentiﬁedwatchdog
receives the slashed deposits of nodes that have submitted incorrect reports.
94
The use of anonymous tips enables the second-tier committee to remain non-
interactive in cases where no alert has been raised, reducing communication complexity
in the common case. Note that any watchdog that raises an alert has an economic in-
centive to submit an anonymous tip: If no tip is submitted, no reward is paid to any
node.
To ensure that the sender O of an anonymous tip α cannot be identiﬁed by the
i
adversary based on network data, the anonymous tip can be sent over an anonymous
channel, e.g, via Tor, or, more practically, proxied via a cloud service provider. To
authenticatethetipasoriginatingwithO,O cansignαusingaring signature[39,192].
i
Alternatively, to prevent unattributable denial-of-service attacks against the second-
tier committee by a malicious oracle node, α can be an anonymous credential with
revocable anonymity [73].
This protocol, while practically achievable, has somewhat heavyweight engineering
requirements (which we are exploring ways to reduce). First-tier nodes, for instance,
must communicate directly with second-tier nodes, requiring maintenance of a direc-
tory. The need for anonymous channels and ring signatures adds to the engineering
complexity of the scheme. Finally, there is a special trust requirement brieﬂy discussed
in the note below. We are therefore also exploring simpler schemes that still achieve
super-linear staking impact, but perhaps less than quadratic, in which a briber asymp-
totically needs resources of at least $nlogn, for example. Some of the schemes under
consideration involve random selection of a strict subset of nodes to act as watchdogs,
in which case prospective bribery becomes an especially powerful attack.
Remark: The security of this single-round staking mechanism requires untappable
channels between oracle and second-tier nodes—a standard requirement in coercion-
resistant systems, e.g., voting [82, 138], and a reasonable one in practice.
Additionally, however, anodeO thatseekstocooperatewithabribercanconstruct
i
its secret shares in such a way as to show the briber that it has encoded a particular
value. For example, if O does not know which nodes the briber controls, then O can
i i
submit 0-valued shares to all committee members. The briber can then verify O ’s
i
compliance probabilistically. To avoid this problem in any single-round protocol, we
require that O know the identity of at least one honest second-tier node.
i
With an interactive protocol in which each second-tier node adds a randomization
factor to shares, the best the briber can do is enforce selection by O of a random
i
watchdog bit.
9.6 Implicit-Incentive Framework (IIF)
FFO is a form of implicit incentive for correct behavior in the Chainlink network. It
functions like explicit stake, i.e., deposits, in that it helps enforce economic security for
the network. In other words, FFO should be included as part of the (eﬀective) deposit
$d of a node in the network.
95
The question is: How do we measure FFO and other forms of implicit incentive
within the Chainlink network? The Implicit-Incentive Framework (IIF) is a set of
principles and techniques that we plan to develop for this purpose. Blockchain systems
provide many forms of unprecedented transparency, and the high-trust records of node
performance they create are a springboard for our vision of how the IIF will work.
Here we very brieﬂy sketch ideas on key elements of the IIF.
The IIF itself will consist of a set of factors we identify as important in evaluating
implicit incentives, along with mechanisms for publishing relevant data in a high-
assuranceformforconsumptionbyanalyticsalgorithms. DiﬀerentChainlinkusersmay
wish to use the IIF in diﬀerent ways, e.g., giving diﬀerent weighting to diﬀerent factors.
We expect analytics services to arise in the community that help users apply the IIF
according to their individual risk-evaluation preferences, and our goal is to facilitate
such services by ensuring their access to high-assurance and timely supporting data,
as we discuss below (Section 9.6.4).
9.6.1 Future Fee Opportunity
Nodes participate in the Chainlink ecosystem to earn a share of the fees that the net-
works pay out for any of the various services we have described in this paper, from
ordinary data feeds to advanced services such as decentralized identity, fair sequencing,
and conﬁdentiality-preserving DeFi. Fees in the Chainlink network support node oper-
ators’costsfor, e.g., runningservers, acquiringnecessarydatalicenses, andmaintaining
a global staﬀ to ensure high uptime. FFO denotes the service fees, net of expenses,
that a node stands to gain in the future—or lose should it demonstrate faulty behavior.
FFO is a form of stake that helps secure the network.
A helpful feature of FFO is the fact that on-chain data (supplemented by oﬀ-chain
data) establish a high-trust record of a node’s history, enabling computation of FFO
in a transparent, empirically driven manner.
A simple, ﬁrst-order measure of FFO can derive from the average net revenue of a
node over a period of time (i.e., gross revenue minus operating expenses). FFO may
then be calculated as, e.g., the net present value [114] of cumulative future net revenue,
in other words, the time-discounted value of all future earnings.
Node revenue can be volatile, however, as shown for example in Fig. 17.
More importantly, node revenue may not follow a distribution that is stationary
over time. Consequently, other factors we plan to explore in estimating FFO include:
• Performance history: An operator’s performance history—including the correct-
ness and timeliness of its reports, as well as its up time—provides an objective
touchstone for users to evaluate its reliability. Performance history will thus
provide a critical factor in users’ selection of oracle nodes (or, with the advent
of DONs, their selection of DONs). A strong performance history is likely to
correlate with high ongoing revenue.18
18An important research question we intend to address is detection of falsiﬁed service volumes.
96
Figure17: RevenueearnedbyChainlinknodesonasingledatafeed(ETH-USD)during
a representative week in March 2021.
• Data access: While oracles may obtain many forms of data from open APIs,
certain forms of data or certain high-quality sources may be available only on a
subscriptionbasisorthroughcontractualagreements. Privilegedaccesstocertain
data sources can play a role in creating a stable revenue stream.
• DON participation: With the advent of DONs, communities of nodes will come
together to provide particular services. We expect that many DONs will include
operators on a selective basis, establishing participation in reputable DONs as a
privileged market position that helps ensure a consistent source of revenue.
• Cross-platform activity: Some node operators may have well-established pres-
ences and performance track records in other contexts, e.g., as PoS validators or
data providers in non-blockchain contexts. Their performance in these other sys-
tems (when data on it is available in a trustworthy form) can inform evaluation
of their performance history. Similarly, faulty behavior in the Chainlink network
can jeopardize revenue in these other systems by driving away users, i.e., FFO
can extend across platforms.
9.6.2 Speculative FFO
Node operators participate in the Chainlink network not just to generate revenue from
operations, but to create and position themselves to take advantage of new opportu-
nities to run jobs. In other words, expenditure by oracle nodes in the network is also
a positive statement about the future of DeFi and other smart-contract application
domains as well as emerging non-blockchain applications of oracle networks. Node op-
eratorstodayearnthefeesavailableonexistingChainlinknetworksandsimultaneously
These are loosely analogous to fake reviews on internet sites, except that the problem is easier in the
oraclesettingbecausewehaveadeﬁnitiverecordofwhetherthegoods,i.e.,reports,wereorderedand
delivered—as opposed to, e.g., physical goods ordered in online shops. Put another way, in the oracle
setting, performance can be validated, even if customer veracity can’t.
97
build a reputation, performance history, and operational expertise that will position
them advantageously to earn fees available in future networks (contingent, of course,
on honest behavior). The nodes operating in the Chainlink ecosystem today will in this
sense have an advantage over newcomers in earning the fees as additional Chainlink
services become available. This advantage applies to new operators, as well as tech-
nology companies with established reputations; for example, T-Systems, a traditional
technology provider (subsidiary of Deutsche Telekom), and Kraken, a large centralized
exchange, have established early presences in the Chainlink ecosystem [28, 143].
Such participation by oracle nodes in future opportunities may be regarded itself
as a kind of speculative FFO, and thus constitutes a form of stake in the Chainlink
network.
9.6.3 External Reputation
The IIF as we have described it can operate in a network with strictly pseudonymous
operators, i.e., without disclosure of the people or real-world entities involved.
One potentially important factor for user selection of providers, however, is external
reputation. By external reputation, we mean the perception of trustworthiness attach-
ing to real-world identities, rather than pseudonyms. Reputational risk attaching to
real-world identities can be viewed as a form of implicit incentive. We view reputation
through the lens of the IIF, i.e., in a cryptoeconomic sense, as a means of establishing
cross-platform activity that may be incorporated into FFO estimates.
The beneﬁt of using external reputation as a factor in estimates of FFO, as opposed
to pseudonymous linkage, is that external reputation links performance not just to an
operator’s existing activities, but also to future ones. If, for instance, a bad reputation
attaches to an individual person, it can taint that person’s future enterprises. Put an-
otherway, externalreputationcancaptureabroaderswathofFFOthanpseudonymous
performance records, as the impact of malfeasance attaching to a person or established
company is harder to escape than that associated with a pseudonymous operation.
Chainlink is compatible with decentralized identity technologies (Section 4.3) that
can provide support for the use of external reputation in the IIF. Such technologies
can validate and thereby help ensure the veracity of operators’ asserted real-world
identities.19
9.6.4 Open IIF Analytics
The IIF, as we have noted, aims to provide reliable open-source data and tools for
implicit-incentive analytics. The goal is to enable providers within the community
to develop analytics tailored to the risk-assessment needs of diﬀerent parts of the
Chainlink user base.
19Decentralized identity credentials can also, where desired, embellish pseudonyms with validated
supplementary information. For example, a node operator could in principle use such credentials to
prove that it is a Fortune 500 company, without revealing which one.
98
A considerable amount of historical data regarding nodes’ revenue and performance
resides on chain in a high-trust, immutable form. Our goal, however, is to provide the
most comprehensive possible data, including data on behaviors that are visible only oﬀ
chain, such as Oﬀ-Chain Reporting (OCR) or DON activity. Such data can potentially
be voluminous. The best way to store it and ensure its integrity, i.e., protect it from
tampering, we believe, will be with the help of DONs, using techniques discussed
in Section 3.3.
Some incentives lend themselves to direct forms of measurement, such as staking
deposits and basic FFO. Others, such as speculative FFO and reputation, are harder to
measureinanobjectivemanner,butwebelievethatsupportingformsofdata,including
historical growth of the Chainlink ecosystem, social-media metrics of reputation, etc.,
can support IIF analytics models even for these harder-to-quantify elements.
We can imagine that dedicated DONs arise speciﬁcally to monitor, validate, and
record data relating to oﬀ-chain performance records of nodes, as well as other data
used in the IIF, such as validated identity information. These DONs can provide uni-
form, high-trust IIF data for any analytics providers serving the Chainlink community.
They will also provide a golden record that makes the claims of analytics providers
independently veriﬁable by the community.
9.7 Putting It All Together: Node Operator Incentives
Synthesizingourdiscussionsaboveonexplicitandimplicitincentivesfornodeoperators
provides a holistic view of the ways that node operators participate in and beneﬁt from
the Chainlink network.
As a conceptual guide, we can express the total assets at stake by a given Chainlink
node operator $S in a rough, stylized form as:
$S ≈ $D+$F +$FS +$R,
where:
• $D is the aggregate of all explicitly deposited stake across all networks in which
the operator participates;
• $F is the net present value of the aggregate of all FFO across all networks in
which the operator participates;
• $FS is the net present value of the speculative FFO of the operator; and
• $R is the reputational equity of the operator outside the Chainlink ecosystem
that might be jeopardized by identiﬁed misbehavior in its oracle nodes.
While largely conceptual, this rough equality helpfully shows that there is a mul-
tiplicity of economic factors favoring high-reliability performance by Chainlink nodes.
All of these factors other than $D are present in today’s Chainlink networks.
99
9.8 The Virtuous Cycle of Economic Security
The combination of super-linear staking impact with representation of fee payments
as future fee opportunity (FFO) in the IIF can lead to what we call the virtuous cycle
of economic security in an oracle network. This can be seen as a kind of economy
of scale. As the total amount secured by a particular network rises, the amount of
additional stake it takes to add a ﬁxed amount of economic security decreases as does
the average per-user cost. It’s therefore cheaper, in terms of fees, for a user to join
an already-existing network than to achieve the same increase in network economic
security by creating a new network. Importantly, the addition of each new user lowers
the cost of the service for all previous users of that network.
Given a particular fee structure (e.g. a particular yield rate on the amount staked),
if the total fees earned by a network increases, this incentivizes the ﬂow of additional
stake into the network to secure it at a higher rate. Speciﬁcally, if the total stake
an individual node may hold in the system is capped, then when new fee payments
enter the system, raising its FFO, the number of nodes n will increase. Thanks to the
super-linear staking impact of our incentive system design, the economic security of
the system will rise faster than n, e.g., as n2 in the mechanism we sketch in Section 9.4.
As a result, the average cost for economic security—i.e., amount of stake contributing
a dollar of economic security—will drop. The network can therefore charge its users
lower fees. Assuming that demand for oracle services is elastic (see, e.g., [31] for a brief
explanation), demand will rise, generating additional fees and FFO.
We illustrate this point with the following example.
Example 5. Since the economic security of an oracle network with our incentive
scheme is $dn2 for stake $dn, the economic security contributed by a dollar of stake
is n and thus the average cost per dollar of economic security—i.e, amount of stake
contributing to a dollar of economic security—is 1/n.
Consider a network in which the economic incentives consist entirely of FFO, capped
at $d ≤ $10K per node. Suppose the network has n = 3 nodes. Then the average cost
per dollar of economic security is about $0.33.
Suppose that the total FFO of the network rises above $30K (e.g., to $31K). Given
the cap on per-node FFO, the network grows to (at least) n = 4. Now the average cost
per dollar of economic security drops to about $0.25.
Weillustratethefullvirtuouscycleofeconomicsecurityinoraclenetworksschemat-
ically in Fig. 18.
We emphasize that the virtuous cycle of economic security derives from the eﬀect
of users pooling their fees. It is their collective FFO that works in favor of larger
network sizes and thus greater collective security. We also note that the virtuous cycle
of economic security works in favor of DONs achieving ﬁnancial sustainability. Once
created, DONs that address user needs should grow to and beyond the point at which
revenue from fees exceed operational costs for oracle nodes.
100
Figure 18: Schematic of the virtuous cycle of Chainlink staking. A rise in user fee
payments to an oracle network(cid:13)1 causes it to grow, leading to growth in its economic
security(cid:13)2. This super-linear growth realizes economies of scale in Chainlink networks
(cid:13)3. Speciﬁcally, it means a reduction in the average cost of economic security , i.e.,
the per-dollar economic security arising from fee payments or other sources of stake
increases. Lower costs, passed along to users, stimulate increased demand for oracle
services(cid:13)4.
9.9 Additional Factors Driving Network Growth
As the Chainlink ecosystem continues to expand, we believe that its attractiveness
to users and importance as infrastructure for the blockchain economy will accelerate.
The value provided by oracle networks is super-linear, meaning that it grows faster
101
than the size of the networks themselves. This growth in value derives from both
economies of scale—greater per-user cost eﬃciency as service volumes increase—and
network eﬀects—an increase of network utility as users adopt DONs more widely.
As existing smart contracts continue to see more value secured and entirely new
smart contract applications are made possible by more decentralized services, the total
use of and aggregate fees paid to DONs should grow. Increasing pools of fees in
turn translate into the means and incentive to create even more decentralized services,
resulting in a virtuous cycle. This virtuous cycle solves a critical chicken-and-egg
problem in the hybrid smart contract ecosystem: Innovative smart contract features
often require decentralized services that don’t yet exist (e.g., new DeFi markets often
require new data feeds) yet need suﬃcient economic demand to come into existence.
The pooling of fees by various smart contracts for existing DONs will signal demand for
additional decentralized services from a growing user base, giving rise to their creation
by DONs and an ongoing enablement of new and varied hybrid smart contracts.
In summary, we believe that the growth in network security driven by virtuous
cycles in the Chainlink staking mechanism exempliﬁes larger patterns of growth that
the Chainlink network can help bring about in an on-chain economy for decentralized
services.
10 Conclusion
In this paper, we have set forth a vision for Chainlink’s evolution. The main theme
in this vision is oracle networks’ ability to provide a much broader range of service for
smartcontractsthanmeredatadelivery. UsingDONsasafoundationforthedecentral-
ized services of the future, Chainlink will aim to provide performant, conﬁdentiality-
enhanced oracle functionality. Its oracle networks will oﬀer strong trust minimization
through a combination of principled cryptoeconomic mechanisms such as staking and
carefully conceived guard rails and service-level enforcement on relying main chains.
DONs will also help layer-2 systems enforce ﬂexible, fair ordering policies on transac-
tions, as well as reduced gas costs for mempool-routed transactions. Taken together,
these capabilities all drive in the direction of secure and richly functional hybrid smart
contracts.
The ﬂexibility of DONs will enhance existing Chainlink services and give rise to
many additional smart contract features and applications. Among these are seamless
connection to a wide variety of oﬀ-chain systems, decentralized identity creation from
existing data, priority channels to help ensure timely delivery of infrastructure-critical
transactions, and conﬁdentiality-preserving DeFi instruments.
The vision we’ve set forth here is ambitious. In the short term, we seek to empower
hybrid contracts to accomplish goals beyond the reach of smart contracts today, while
in the long term we aim to realize a decentralized metalayer. Happily we can draw
on new tools and ideas—ranging from consensus algorithms to zero-knowledge proof
systems—that the community is developing as the fruit of rapidly evolving research.
102
Similarly, we expect to prioritize implementation of the ideas in this paper in response
to the needs of Chainlink’s community of users. We look forward to the next stage
in our quest to empower smart contracts through universal connectivity and establish
decentralized technologies as the backbone of the world’s next generation of ﬁnancial
and legal systems.
Acknowledgements
Thanks to Julian Alterini and Shawn Lee for rendering the ﬁgures in this paper.
References
[1] DeFi pulse. https://defipulse.com. [Online; accessed 30 Mar. 2021].
[2] dYdX. dydx.exchange. [Online; accessed 30 Mar. 2021].
[3] Ethereum WebAssembly: Metering. https://ewasm.readthedocs.io/en/mkdocs/metering.
[Online; accessed 30 Mar. 2021].
[4] Keybase: End-to-end encryption for things that matter. keybase.io. [Online; accessed 30
Mar. 2021].
[5] Loopring: zkRollupexchangeandpaymentprotocol. https://loopring.org. [Online;accessed
30 Mar. 2021].
[6] MetaMask: A crypto wallet and gateway to blockchain apps. https://metamask.io. [Online;
accessed 30 Mar. 2021].
[7] Nexus Mutual: a people-powered alternative to insurance. nexus.io. [Online; accessed 30
Mar. 2021].
[8] Oasis labs. https://oasislabs.com. [Online; accessed 30 Mar. 2021].
[9] OpenID connect authentication. https://openid.net/connect. [Online; accessed 30
Mar. 2021].
[10] Optimism. https://optimism.io. [Online; accessed 30 Mar. 2021].
[11] Optimistic Rollups - EthHub. https://docs.ethhub.io/ethereum-roadmap/
layer-2-scaling/optimistic_rollups. [Online; accessed 30 Mar. 2021].
[12] Starkware: bringing scalability and privacy to a blockchain near you. starkware.co. [Online;
accessed 30 Mar. 2021].
[13] Tornado Cash. https://tornado.cash. [Online; accessed 30 Mar. 2021].
[14] uPort: Open identity system for the decentralized web. https://www.uport.me. [Online;
accessed 30 Mar. 2021].
[15] Wrapped Bitcoin: WBTC. wbtc.network. [Online; accessed 30 Mar. 2021].
[16] zkSync: Secure, scalable crypto payments. https://zksync.io. [Online; accessed 30
Mar. 2021].
[17] Introduction to emergency shutdown in multi-collateral Dai. MakerDAO blog. https://blog.
makerdao.com/introduction-to-emergency-shutdown-in-multi-collateral-dai, 12 Au-
gust 2019.
103
[18] Chainlink announcement: Introducing the Chainlink on-chain data di-
rectory: Data.eth. Chainlink Blog. https://blog.chain.link/
introducing-the-chainlink-on-chain-data-directory, 28 Dec. 2020.
[19] SpeedbumponformerAMEXexchangemadespreadsworse,NYSEsay.S&PGlobalMarketIn-
telligence, https://www.spglobal.com/marketintelligence/en/news-insights/trending/
O1_i8QswCPPwWV9HbS-5dw2, 4 Nov. 2019.
[20] Chainlink developers documentation: Adapters. https://docs.chain.link/docs/adapters,
[Online; accessed 30 Mar. 2021].
[21] Chainlink developers documentation: Initiators. https://docs.chain.link/docs/
initiators, [Online; accessed 30 Mar. 2021].
[22] Ethereum name service: Decentralized naming for wallets, websites, & more. https://ens.
domains, [Online; accessed 30 Mar. 2021].
[23] Aavegotchi Wiki contributors. Aavegotchi: Introduction — Aavegotchi Wiki, 2021. [On-
line; accessed 30 Mar. 2021].
[24] Abe, M., and Fehr, S. Adaptively secure Feldman VSS and applications to universally-
composable threshold cryptography. In Advances in Cryptology (CRYPTO) (2004), pp. 317–
334.
[25] Adler, J., Berryhill, R., Veneris, A., Poulos, Z., Veira, N., and Kastania, A. As-
traea: Adecentralizedblockchainoracle.InIEEEiThings/GreenCom/CPSCom/SmartData
(2018), pp. 1145–1152.
[26] Adler, J., Berryhill, R., Veneris, A. G., Poulos, Z., Veira, N., and Kastania, A.
Astraea: Adecentralizedblockchainoracle. In2018 IEEE International Conference on Internet
of Things (iThings) (2018).
[27] Ahmad, A., Joe, B., Xiao, Y., Zhang, Y., Shin, I., and Lee, B. Obfuscuro: Acommodity
obfuscationengineonIntelSGX. InNetworks and Distributed Security Systems (NDSS)(2019).
[28] Akhtar, T. Kraken Exchange brings its spot price data to DeFi via
new Chainlink node. Coindesk (1 Feb. 2021). https://www.coindesk.com/
kraken-exchange-brings-its-spot-price-data-to-defi-via-new-chainlink-node.
[29] Ali, M., Nelson, J., Shea, R., and Freedman, M. J. Blockstack: A global naming and
storagesystemsecuredbyblockchains. InUSENIXAnnualTechnicalConference(ATC)(2016).
[30] Allen, S., Cˇapkun, S., Eyal, I., Fanti, G., Ford, B., Grimmelmann, J., Juels, A.,
Kostiainen, K., Meiklejohn, S., Miller, A., etal. Designchoicesforcentralbankdigital
currency: Policy and technical considerations. NBER Working Paper Series, Working paper
27634 (Aug. 2020).
[31] Anderson, P. L., McLellan, R. D., Overton, J. P., and Wolfram, G. L. Price
elasticity of demand. McKinac Center for Public Policy 13 (1997), 2010.
[32] Arnosti, N., and Weinberg, S. M. Bitcoin: A natural oligopoly. arXiv preprint
arXiv:1811.08572 (2018).
[33] Asayag, A., Cohen, G., Grayevsky, I., Leshkowitz, M., Rottenstreich, O., Tamari,
R., and Yakira, D. Helix: a scalable and fair consensus algorithm. Tech. rep., Technical
report, Orbs Research, 2018.
[34] Attah, E. Five most proliﬁc 51% attacks in crypto: Verge, Ethereum Classic, Bitcoin Gold,
Feathercoin, Vertcoin. CryptoSlate (24 April 2019).
104
[35] Axie Infinity. Axie Inﬁnity integrates Chainlink ora-
cles! Axie Inﬁnity blog. https://axieinfinity.medium.com/
axie-infinity-integrates-chainlink-oracles-aa93d3d0983e, 16 Nov. 2020.
[36] Baird, L., Luykx, A., and Madsen, P. Hedera technical insights: Fair times-
tamping and fair ordering of transactions. Hedera Blog. https://hedera.com/blog/
fair-timestamping-and-fair-ordering-of-transactions, 12 Apr. 2020.
[37] Baum, C., Orsini, E., Scholl, P., and Soria-Vazquez, E. Eﬃcient constant-round MPC
with identiﬁable abort and public veriﬁability. In Advances in Cryptology (CRYPTO) (2020),
pp. 562–592.
[38] Ben-Sasson, E., Bentov, I., Horesh, Y., and Riabzev, M. Scalable zero knowledge with
no trusted setup. In Advances in Cryptology (CRYPTO) (2019), pp. 701–732.
[39] Bender, A., Katz, J., and Morselli, R. Ring signatures: Stronger deﬁnitions, and con-
structions without random oracles. Journal of Cryptology 22, 1 (2009), 114–138.
[40] Benet, J. IPFS-contentaddressed,versioned,P2Pﬁlesystem. arXiv preprint arXiv:1407.3561
(2014).
[41] Benhamouda, F., Gentry, C., Gorbunov, S., Halevi, S., Krawczyk, H., Lin, C.,
Rabin, T., and Reyzin, L. Can a blockchain keep a secret? IACR Cryptol. ePrint Arch.
2020 (2020), 464.
[42] Benhamouda, F., Halevi, S., and Halevi, T. Supporting private data on Hyperledger
Fabricwithsecuremultipartycomputation. IBM Journal of Research and Development 63,2/3
(2019), 3–1.
[43] Benson, J. ConsenSys wades into compliance for Ethereum tokens. https://decrypt.co/
31641/consensys-wades-into-compliance-for-ethereum-tokens,8June2020. [Online;ac-
cessed 30 Mar. 2021].
[44] Bentov, I., Ji, Y., Zhang, F., Breidenbach, L., Daian, P., and Juels, A. Tesseract:
Real-time cryptocurrency exchange using trusted hardware. In ACM Conference on Computer
and Communications Security (ACM CCS) (2019), pp. 1521–1538.
[45] Berberich, M., and Steiner, M. Blockchain technology and the GDPR-how to reconcile
privacy and distributed ledgers. Eur. Data Prot. L. Rev. 2 (2016), 422.
[46] Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Gollamudi, A., Gonthier, G.,
Kobeissi, N., Kulatova, N., Rastogi, A., Sibut-Pinote, T., Swamy, N., et al. Formal
veriﬁcation of smart contracts: Short paper. In Proceedings of the 2016 ACM Workshop on
Programming Languages and Analysis for Security (2016), pp. 91–96.
[47] Birman, K. P., and Schneider, F. B. Themonocultureriskputintocontext. IEEESecurity
& Privacy 7, 1 (2009), 14–17.
[48] Blocknative. Evidence of mempool manipulation on Black Thursday: Hammerbots, mem-
pool compression, and spontaneous stuck transactions. Blocknative Blog. https://blog.
blocknative.com/blog/mempool-forensics, 22 July 2020.
[49] Bloemenm, R., Logvinov, L., and Evans, J. Ethereum Improvement Proposal (EIP) 712:
Ethereum typed structured data hashing and signing. https://eips.ethereum.org/EIPS/
eip-712, 12 Sept. 2017.
[50] Bogatyy, I. Implementing Ethereum trading front-runs on the Ban-
cor exchange in Python. Hackernoon. https://hackernoon.com/
front-running-bancor-in-150-lines-of-python-with-ethereum-api-d5e2bfd0d798,
17 Aug. 2017.
105
[51] Bo¨hme, R., Christin, N., Edelman, B., and Moore, T. Bitcoin: Economics, technology,
and governance. Journal of Economic Perspectives 29, 2 (2015), 213–38.
[52] Bojja Venkatakrishnan, S., Fanti, G., and Viswanath, P. Dandelion: Redesigning
the Bitcoin network for anonymity. Proceedings of the ACM on Measurement and Analysis of
Computing Systems 1, 1 (2017), 1–34.
[53] Boneh, D., Bonneau, J., Bu¨nz, B., and Fisch, B. Veriﬁable delay functions. In Advances
in Cryptology (CRYPTO) (2018), pp. 757–788.
[54] Boneh, D., Lynn, B., and Shacham, H. ShortsignaturesfromtheWeilpairing. InAdvances
in Cryptology (ASIACRYPT) (2001), pp. 514–532.
[55] Boneh, D., Lynn, B., and Shacham, H. Short signatures from the weil pairing. In ASI-
ACRYPT (2001), vol. 2248 of Lecture Notes in Computer Science, Springer, pp. 514–532.
[56] Bootle, J., Cerulli, A., Chaidos, P., Groth, J., and Petit, C. Eﬃcientzero-knowledge
arguments for arithmetic circuits in the discrete log setting. In Advances in Cryptology (EU-
ROCRYPT) (2016), pp. 327–357.
[57] Bowers, K. D., Juels, A., and Oprea, A. HAIL:Ahigh-availabilityandintegritylayerfor
cloud storage. In ACM Conference on Computer and Communications Security (ACM CCS)
(2009), pp. 187–198.
[58] Bowman, M., Miele, A., Steiner, M., and Vavala, B. Private dataobjects: an overview.
arXiv preprint arXiv:1807.05686 (2018).
[59] Boyle, E., Goldwasser, S., and Ivan, I. Functional signatures and pseudorandom func-
tions. In Public Key Cryptography (PKC) (2014), pp. 501–519.
[60] Breidenbach, L., Cachin, C., Coventry, A., Juels, A., and Miller, A. Chain-
link oﬀ-chain reporting protocol. https://chain.link/ocrpaper, 2021. [Online; accessed
30 Mar. 2021].
[61] Breidenbach, L., Daian, P., and Trame`r, F. GasToken. gastoken.io. [Online; accessed
30 Mar. 2021].
[62] Breidenbach, L., Daian, P., Trame`r, F., and Juels, A. Enter the Hydra: Towards
principled bug bounties and exploit-resistant smart contracts. In USENIX Security Symposium
(USENIX Security) (2018), pp. 1335–1352.
[63] Brown, M., andHousley, R. Transportlayersecurity(TLS)evidenceextensions,Nov.2006.
Working Draft, IETF Secretariat, Internet-Draft drafthousley-evidence-extns-01.
[64] Budish, E., Cramton, P., and Shim, J. The high-frequency trading arms race: Frequent
batchauctionsasamarketdesignresponse. The Quarterly Journal of Economics 130,4(2015),
1547–1621.
[65] Bu¨nz, B., Agrawal, S., Zamani, M., and Boneh, D. Zether: Towards privacy in a smart
contract world. In Financial Cryptography and Data Security (FC) (2020), pp. 423–443.
[66] Bu¨nz, B., Bootle, J., Boneh, D., Poelstra, A., Wuille, P., and Maxwell, G. Bul-
letproofs: Shortproofsforconﬁdentialtransactionsandmore. InIEEE Symposium on Security
and Privacy (SP) (2018), IEEE, pp. 315–334.
[67] Buterin, V. The p + epsilon attack. Ethereum Blog. https://blog.ethereum.org/2015/
01/28/p-epsilon-attack, 28 Jan. 2015.
[68] Buterin, V. SchellingCoin: A Minimal-Trust Universal Data
Feed. Ethereum Blog. https://blog.ethereum.org/2014/03/28/
schellingcoin-a-minimal-trust-universal-data-feed, 28 Mar. 2014.
106
[69] Buterin, V. On-chain scaling to potentially ∼500 tx/sec through
mass tx validation. Ethereum Blog. https://ethresear.ch/t/
on-chain-scaling-to-potentially-500-tx-sec-through-mass-tx-validation/3477,
3 Sept. 2018.
[70] Buterin, V., Dietrichs, A., Garnett, M., Villanueva, W., and Wilson, S. Ethereum
Improvement Proposal (EIP) 2938: Account abstraction. https://eips.ethereum.org/EIPS/
eip-2938, 4 Sept. 2020.
[71] Cachin, C., Kursawe, K., Petzold, F., and Shoup, V. Secure and eﬃcient asynchronous
broadcast protocols (extended abstract). In Advances in Cryptology: CRYPTO 2001 (2001),
J. Kilian, Ed., vol. 2139, Springer, pp. 524–541.
[72] Cachin, C., and Vukolic´, M. Blockchain consensus protocols in the wild. arXiv preprint
arXiv:1707.01873 (2017).
[73] Camenisch, J., and Lysyanskaya, A. An eﬃcient system for non-transferable anonymous
credentials with optional anonymity revocation. In International conference on the theory and
applications of cryptographic techniques (2001), pp. 93–118.
[74] Cecchetti, E., Fisch, B., Miers, I., and Juels, A. PIEs: Publicincompressibleencodings
for decentralized storage. In ACM Conference on Computer and Communications Security
(ACM CCS) (2019), pp. 1351–1367.
[75] Chainlink. How to build a parametric insurance smart contract. Chainlink Blog. https:
//blog.chain.link/parametric-insurance-smart-contract, 15 Dec. 2020.
[76] Chainlink. Chainlink Proof of Reserve: Bringing transparency
to DeFi collateral. Chainlink Blog. https://blog.chain.link/
chainlink-proof-of-reserve-bringing-transparency-to-defi-collateral, 30
Nov. 2020.
[77] Chainlink. How Chainlink supports any oﬀ-chain data re-
source and computation. Chainlink Blog. https://blog.chain.link/
how-chainlink-supports-any-off-chain-data-resource-and-computation, 8 Mar. 2021.
[78] Chainlink. Introduction to Chainlink VRF. Chainlink Developers Documentation. https:
//docs.chain.link/docs/chainlink-vrf, [Online; accessed 30 Mar. 2021].
[79] Chan, J., Warwick, K., and Ennis, C. Synthetiximprovementproposal(SIP)6: Frontrun-
ning protection. https://sips.synthetix.io/sips/sip-6, 27 June 2019.
[80] Cheng,R.,Zhang,F.,Kos,J.,He,W.,Hynes,N.,Johnson,N.,Juels,A.,Miller,A.,
and Song, D. Ekiden: A platform for conﬁdentiality-preserving, trustworthy, and performant
smart contracts. In IEEE European Symposium on Security and Privacy (EuroS&P) (2019),
IEEE, pp. 185–200.
[81] Chjango Unchained. Tendermint explained — bringing BFT-based PoS to
the public blockchain domain. Cosmos Blog. https://blog.cosmos.network/
tendermint-explained-bringing-bft-based-pos-to-the-public-blockchain-domain-f22e274a0fdb,
10 May 2018.
[82] Clarkson, M. R., Chong, S., and Myers, A. C. Civitas: Toward a secure voting system.
In IEEE Symposium on Security and Privacy (SP) (2008), IEEE, pp. 354–368.
[83] Cloudflare. UnderstandingAMPrealURL. https://support.cloudflare.com/hc/en-us/
articles/360029367652-Understanding-Amp-Real-URL, [Online; accessed 30 Mar. 2021].
[84] Costan, V., and Devadas, S. Intel SGX explained. IACR Cryptol. ePrint Arch. 2016, 86
(2016), 1–118.
107
[85] Crawley, J. Chainlink integration connects Filecoin to smart contract-
enabled blockchains. Coindesk (24 Mar. 2021). https://www.coindesk.com/
filecoin-chainlink-integration-smart-contract-enabled-blockchains.
[86] Croman, K., Decker, C., Eyal, I., Gencer, A. E., Juels, A., Kosba, A., Miller, A.,
Saxena, P., Shi, E., Sirer, E. G., et al. Onscalingdecentralizedblockchains. InFinancial
Cryptography and Data Security (FC) (2016), pp. 106–125.
[87] Cronje, A. Scaling Keep3r with Chainlink. Medium Blog Post. https://andrecronje.
medium.com/scaling-keep3r-with-chainlink-2832bbc76506, 2 Dec. 2020.
[88] Crypto51. PoW 51% attack cost. https://www.crypto51.app. [Online; accessed 30
Mar. 2021].
[89] Cusack, L. Improving PoolTogether with Chainlink VRF. PoolTogether Blog. https://
medium.com/pooltogether/improving-pooltogether-with-chainlink-vrf-dcf1a3d6ea,
11 May 2020.
[90] Daian, P., Goldfeder, S., Kell, T., Li, Y., Zhao, X., Bentov, I., Breidenbach,
L., and Juels, A. Flashboys2.0: Frontrunningindecentralizedexchanges, minerextractable
value,andconsensusinstability. In2020IEEESymposiumonSecurityandPrivacy(SP)(2020),
pp. 566–583.
[91] Dale, B. Feature from tech no collateral required: How Aave brought unse-
cured borrowing to DeFi. Coindesk (24 Aug. 2020). https://www.coindesk.com/
aave-unsecured-borrowing-defi.
[92] Decentralized Identity Foundation. DIFwebsite. https://identity.foundation. [On-
line; accessed 30 Mar. 2021].
[93] del Castillo, M. How to track oﬃcial election results on Ethereum and EOS.
Forbes (3 Nov. 2020). https://www.forbes.com/sites/michaeldelcastillo/2020/11/03/
how-to-track-official-election-results-on-ethereum-and-eos.
[94] Dierks, T., and Rescorla, E. The transport layer security (tls) protocol version 1.2.
[95] Dingledine, R., Mathewson, N., and Syverson, P. Tor: The second-generation onion
router. Tech. rep., Naval Research Lab Washington DC, 2004.
[96] Dong, C., Wang, Y., Aldweesh, A., McCorry, P., and van Moorsel, A. Betrayal,
distrust, and rationality: Smart counter-collusion contracts for veriﬁable cloud computing. In
ACM Conference on Computer and Communications Security (CCS) (2017), pp. 211–227.
[97] Duan, S., Reiter, M. K., and Zhang, H. Secure causal atomic broadcast, revisited. In
Proc. 47th International Conference on Dependable Systems and Networks (2017), pp. 61–72.
[98] Ellis, S., Juels, A., and Nazarov, S. Chainlink: a decentralized oracle network. https:
//chain.link/whitepaper, 4 Sept. 2017.
[99] Enigma Project. New to enigma? start here. Enigma Blog. https://blog.enigma.co/
welcome-to-enigma-start-here-e65c8c9125ef, 5 Nov. 2018.
[100] Erik Marks, P. G. Ethereum Improvement Proposal (EIP) 712: Wallet add Ethereum chain
RPC method. https://eips.ethereum.org/EIPS/eip-3085, 1 Nov. 2020.
[101] Eskandari, S., Moosavi, S., and Clark, J. SoK: Transparent dishonesty: front-running
attacksonblockchain.InInternationalConferenceonFinancialCryptographyandDataSecurity
(2019), pp. 170–189.
[102] EtherCards. The EtherCards platform. https://docs.ether.cards/platform.html. [Online;
accessed 30 Mar. 2021].
108
[103] Ethereum Foundation. Ethereum 2.0 (Eth2). https://ethereum.org/en/eth2, [Online;
accessed 30 Mar. 2021].
[104] etherscan. io. Ethereum Average Block Time Chart | Etherscan. https://etherscan.io/
chart/blocktime, Sep 2020. [Online; accessed 30 Mar. 2021].
[105] European Data Protection Board. Guidelines 3/2018 on the territorial scope of the
GDPR (article 3) [version 2.1]. https://edpb.europa.eu/sites/edpb/files/files/file1/
edpb_guidelines_3_2018_territorial_scope_after_public_consultation_en_1.pdf, 12
Nov. 2019.
[106] Eyal, I., and Sirer, E. G. Majorityisnotenough: Bitcoinminingisvulnerable. InFinancial
Cryptography and Data Security (FC) (2014), pp. 436–454.
[107] Fanti, G., Venkatakrishnan, S. B., Bakshi, S., Denby, B., Bhargava, S., Miller,
A., and Viswanath, P. Dandelion++ lightweight cryptocurrency networking with formal
anonymity guarantees. Proceedings of the ACM on Measurement and Analysis of Computing
Systems 2, 2 (2018), 1–35.
[108] Feldman, P. A practical scheme for non-interactive veriﬁable secret sharing. In Annual
Symposium on Foundations of Computer Science (FOCS) (1987), IEEE, pp. 427–438.
[109] Felten, E. What’s up with Rollup. Medium, Oﬀchain Labs. https://medium.com/
offchainlabs/whats-up-with-rollup-db8cd93b314e, 18 Nov. 2019.
[110] Felten, E. Front-Running as a Service. Medium, Oﬀchain Labs. https://medium.com/
offchainlabs/front-running-as-a-service-334c929c945a, 29 June 2020.
[111] Fisch, B. Tight proofs of space and replication. In Advances in Cryptology (EUROCRYPT)
(2019), pp. 324–348.
[112] Fisch,B.,Bonneau,J.,Greco,N.,andBenet,J.ScalingProof-of-ReplicationforFilecoin
mining. Technical report, Stanford University (2018).
[113] Franz, M. E unibus pluram: massive-scale software diversity as a defense mechanism. In
Proceedings of the 2010 New Security Paradigms Workshop (2010), pp. 7–16.
[114] Gallo, A. A refresher on net present value. Harvard Business Review 19 (2014).
[115] Garay, J., Kiayias, A., and Leonardos, N. The bitcoin backbone protocol: Analysis and
applications. In Annual International Conference on the Theory and Applications of Crypto-
graphic Techniques (2015), pp. 281–310.
[116] Gennaro, R., and Goldfeder, S. Fast multiparty threshold ECDSA with fast trustless
setup. In ACM Conference on Computer and Communications Security (2018), pp. 1179–1194.
[117] Gennaro, R., and Goldfeder, S. One round threshold ECDSA with identiﬁable abort.
IACR Cryptol. ePrint Arch. 2020 (2020), 540.
[118] Gennaro, R., Goldfeder, S., and Narayanan, A. Threshold-optimal dsa/ecdsa signa-
tures and an application to bitcoin wallet security. In International Conference on Applied
Cryptography and Network Security (2016), pp. 156–174.
[119] George, W., and Lesaege, C. An analysis of p+(cid:15) attacks on various models of schelling
game based systems. In Cryptoeconomic Systems (CES) (2020).
[120] Gilad, Y., Hemo, R., Micali, S., Vlachos, G., and Zeldovich, N. Algorand: Scaling
byzantineagreementsforcryptocurrencies.InACMSymposiumonOperatingSystemsPrinciples
(SOSP) (2017), pp. 51–68.
109
[121] Gluchowski, A. Evaluating Ethereum L2 Scaling Solutions: A Comparison Framework.
Medium (Aug 2020).
[122] Goldwasser, S., Ben-Or, M., and Wigderson, A. Completeness theorems for non-
cryptographic fault-tolerant distributed computing. In Symposium on Theory of Computing
(STOC) (1988), pp. 1–10.
[123] Gollmann, D. Computer security, 3rd edition. John Wiley & Sons, 2011.
[124] Google. Serve AMP using signed exchanges. https://amp.dev/documentation/
guides-and-tutorials/optimize-and-measure/signed-exchange. [Online; accessed 30
Mar. 2021].
[125] Gorokh, A., Banerjee, S., and Iyer, K. When bribes are harmless: The power and limits
of collusion-resilient mechanism design. SSRN. https://ssrn.com/abstract=3125003, 2019.
[126] Groth, J. On the size of pairing-based non-interactive arguments. In Advances in Cryptology
(CRYPTO) (2016), pp. 305–326.
[127] Gu, W. C., Raghuvanshi, A., and Boneh, D. Empirical measurements on pricing oracles
and decentralized governance for stablecoins. SSRN 3611231 (2020).
[128] Hu, E. Intentional access delays, market quality, and price discovery: Evidence from IEX
becoming an exchange. SSRN. https://ssrn.com/abstract=3195001, 15 Mar. 2019.
[129] Hyperledger Project. Hyperledger Indy. https://www.hyperledger.org/use/
hyperledger-indy. [Online; accessed 30 Mar. 2021].
[130] Jackson, M. O., and Wilkie, S. Endogenousgamesandmechanisms: Sidepaymentsamong
players. In The Review of Economic Studies (2005), vol. 72, pp. 543–566.
[131] Jansen, M., Hdhili, F., Gouiaa, R., and Qasem, Z. Do smart contract languages need
to be Turing complete? In International Congress on Blockchain and Applications (2019),
pp. 19–26.
[132] Johnson, R., Molnar, D., Song, D., and Wagner, D. Homomorphic signature schemes.
In Cryptographers’ Track at the RSA Conference (CT-RSA) (2002), pp. 244–262.
[133] Johnson, S., Scarlata, V., Rozas, C., Brickell, E., and Mckeen, F. Intel(cid:13)R Software
Guard Extensions: EPID provisioning and attestation services, 2016. White Paper.
[134] Joint Task Force. Security and privacy controls for federal information systems and organi-
zations. NIST Special Publication 800, 53 Rev. 5 (2020).
[135] Juels, A., Breidenbach, L., Coventry, A., Nazarov, S., Ellis, S., and Magauran,
B. Mixicles. https://chain.link/mixicles.pdf, 2019.
[136] Juels, A., Breidenbach, L., Daian, P., Ji, Y., and Trame`r, F. Project Chicago for the
study of cryptocurrencies. projectchicago.io. [Online; accessed 30 Mar. 2021].
[137] Juels, A., Breidenbach, L., and Trame`r, F. Fair Sequencing Services: En-
abling a provably fair DeFi ecosystem. Chainlink Blog. https://blog.chain.link/
chainlink-fair-sequencing-services-enabling-a-provably-fair-defi-ecosystem, 11
Sept. 2020.
[138] Juels, A., Catalano, D., and Jakobsson, M. Coercion-resistant electronic elections. In
Towards Trustworthy Elections. Springer, 2010, pp. 37–63.
[139] Juels, A., Kosba, A., and Shi, E. The ring of Gyges: Investigating the future of criminal
smart contracts. In ACM Conference on Computer and Communications Security (ACM CCS)
(2016), pp. 283–295.
110
[140] Kaiko. Kaiko partners with Chainlink to bring cryptocurrency market data
to smart contracts. Kaiko Blog. https://www.kaiko.com/blogs/latest-news/
kaiko-partners-with-chainlink-to-bring-cryptocurrency-market-data-to-smart-contracts,
14 Nov. 2018.
[141] Kalodner, H., Goldfeder, S., Chen, X., Weinberg, S. M., and Felten, E. W. Arbi-
trum: Scalable, private smart contracts. In USENIX Security Symposium (USENIX Security)
(2018), pp. 1353–1370.
[142] Kalodner, H. A., Carlsten, M., Ellenbogen, P., Bonneau, J., and Narayanan, A.
An empirical study of Namecoin and lessons for decentralized namespace design. In Workshop
on Economics of Information Security (WEIS) (2015).
[143] Kapilkov, M. Deutsche Telekom’s T-Systems is now a Chainlink node
operator. Cointelegraph (22 July 2020). https://www.coindesk.com/
kraken-exchange-brings-its-spot-price-data-to-defi-via-new-chainlink-node.
[144] Kelkar, M., Zhang, F., Goldfeder, S., and Juels, A. Order-fairness for Byzantine
consensus. In Advances in Cryptology (CRYPTO) (2020), pp. 451–480.
[145] Khalil, R., Gervais, A., and Felley, G. TEX - a securely scalable trustless exchange.
IACR Cryptol. ePrint Arch. 2019 (2019), 265.
[146] Kiayias, A., Russell, A., David, B., and Oliynykov, R. Ouroboros: A provably secure
Proof-of-Stakeblockchainprotocol. InAdvances in Cryptology (CRYPTO)(2017),pp.357–388.
[147] Kivlighan, I. The Aave oracle network powered by Chain-
link is now live! Aave Blog. https://medium.com/aave/
the-aave-oracle-network-powered-by-chainlink-is-now-live-45bb8a5a8c4e, 9
Jan. 2020.
[148] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., and Ford, B.
Omniledger: A secure, scale-out, decentralized ledger via sharding. In IEEE Symposium on
Security and Privacy (SP) (2018), pp. 583–598.
[149] Kosba, A., Miller, A., Shi, E., Wen, Z., and Papamanthou, C. Hawk: The blockchain
modelofcryptographyandprivacy-preservingsmartcontracts. InIEEESymposiumonSecurity
and Privacy (SP) (2016), IEEE, pp. 839–858.
[150] Kroll, J. A., Davey, I. C., and Felten, E. W. Theeconomicsofbitcoinmining,orbitcoin
in the presence of adversaries. In Workshop on the Economics of Information Systems (WEIS)
(2013), vol. 2013, p. 11.
[151] Kursawe, K. Wendy, thegoodlittlefairnesswidget. arXiv preprint arXiv:2007.08303 (2020).
[152] Lee, D., Kohlbrenner, D., Shinde, S., Asanovic´, K., and Song, D. Keystone: An
open framework for architecting trusted execution environments. In European Conference on
Computer Systems (EuroSys) (2020), pp. 1–16.
[153] Lev-Ari, K., Spiegelman, A., Keidar, I., and Malkhi, D. Fairledger: A fair blockchain
protocol for ﬁnancial institutions. arXiv preprint arXiv:1906.03819 (2019).
[154] Levi, Y. Bancor’s response to today’s smart contract
vulnerability. Bancor Blog. https://blog.bancor.network/
bancors-response-to-today-s-smart-contract-vulnerability-dc888c589fe4, 18 June
2020.
[155] Lewis, M. Flash boys: a Wall Street revolt. WW Norton & Company, 2014.
111
[156] Libra Association. Libra whitepaper v2.0. https://libra.org/en-US/white-paper, April
2020.
[157] Lu, D., Yurek, T., Kulshreshtha, S., Govind, R., Kate, A., and Miller, A. Honey-
BadgerMPCandAsynchromix: PracticalasynchronousMPCanditsapplicationtoanonymous
communication. In ACM Conference on Computer and Communications Security (ACM CCS)
(2019), pp. 887–903.
[158] Luu, L., Narayanan, V., Zheng, C., Baweja, K., Gilbert, S., and Saxena, P. Asecure
shardingprotocolforopenblockchains. InACM Conference on Computer and Communications
Security (ACM CCS) (2016), pp. 17–30.
[159] Manuskin, A. The fastest draw on the blockchain
(BZRX example). Medium. https://medium.com/@amanusk/
the-fastest-draw-on-the-blockchain-bzrx-example-6bd19fabdbe1, 22 July 2020.
[160] Maram, D., Malvai, H., Zhang, F., Jean-Louis, N., Frolov, A., Kell, T., Lobban,
T., Moy, C., Juels, A., and Miller, A. CanDID:Can-dodecentralizedidentitywithlegacy
compatibility,Sybil-resistance,andaccountability. InIEEESymposiumonSecurityandPrivacy
(SP) (2021. To appear.).
[161] Maram, S. K. D., Zhang, F., Wang, L., Low, A., Zhang, Y., Juels, A., and Song, D.
CHURP: Dynamic-committee proactive secret sharing. In ACM Conference on Computer and
Communications Security (ACM CCS) (2019), pp. 2369–2386.
[162] Marino, B., and Juels, A. Setting standards for altering and undoing smart contracts. In
Symposium on Rules and Rule Markup Languages for the Semantic Web (2016), pp. 151–166.
[163] Marino, W. Smart-contract escape hatches: The Dao of the DAO. Hacking, Distributed.
https://hackingdistributed.com/2016/06/22/smart-contract-escape-hatches, 22 June
2016.
[164] Matetic,S.,Schneider,M.,Miller,A.,Juels,A.,andCapkun,S.Delegatee: Brokered
delegation using trusted execution environments. In USENIX Security Symposium (USENIX
Security) (2018), pp. 1387–1403.
[165] McCorry, P., Hicks, A., and Meiklejohn, S. Smart contracts for bribing miners. In
Financial Cryptography and Data Security (FC) (2018), pp. 3–18.
[166] McCorry, P., Hicks, A., and Meiklejohn, S. Smart contracts for bribing miners. In
Financial Cryptography (FC) (2018).
[167] Metcalfe, B. Metcalfe’s law after 40 years of ethernet. Computer 46, 12 (2013), 26–31.
[168] Micali, S. Algorand’s smart contract architecture. Algorand Blog. https://www.algorand.
com/resources/blog/algorand-smart-contract-architecture, 27 May 2020.
[169] Miller, A., Bentov, I., Bakshi, S., Kumaresan, R., and McCorry, P. Sprites and
state channels: Payment networks that go faster than Lightning. In Financial Cryptography
and Data Security (FC) (2019), pp. 508–526.
[170] Miller, A., Cai, Z., and Jha, S. Smart contracts and opportunities for formal methods. In
Symposium on Leveraging Applications of Formal Methods (2018), pp. 280–299.
[171] Moos, M. Mining pool censorship could make Zcash ‘mostly unusable’. Cryptoslate. https:
//cryptoslate.com/mining-pool-censorship-zcash-unusable, 7 June 2019.
[172] Moroz, D. J., Aronoff, D. J., Lovejoy, J., Narula, N., and Parkes, D. C. Double-
spend counterattacks. In Cryptoeconomic Systems (CES) (2020).
112
[173] Mo¨ser, M., Eyal, I., and Sirer, E. G. Bitcoin covenants. In Financial Cryptography and
Data Security (FC) (2016), pp. 126–141.
[174] Narayanan, A., and Clark, J. Bitcoin’s academic pedigree. Communications of the ACM
60, 12 (2017), 36–45.
[175] Nayak, K., Fletcher, C. W., Ren, L., Chandran, N., Lokam, S. V., Shi, E., and
Goyal, V. HOP: Hardware makes obfuscation practical. In Networks and Distributed Security
Systems (NDSS) (2017).
[176] Nazarov, S., Shukla, P., Erwin, A., and Rajput, A. Bridg-
ing the governance gap: Interoperability for blockchain and legacy systems.
World Economic Forum whitepaper. https://www.weforum.org/whitepapers/
bridging-the-governance-gap-interoperability-for-blockchain-and-legacy-systems,
Dec. 2020.
[177] Nisan, N., Tardos, E., Roughgarden, T., and Vazirani, V. Algorithmic Game Theory.
Cambridge University Press, 2007.
[178] Nowak, M., and Sigmund, K. A strategy of win-stay, lose-shift that outperforms tit-for-tat
in the prisoner’s dilemma game. In Nature (1993), vol. 364, pp. 56–58.
[179] Osipovich, A. Moreexchangesadd‘speedbumps,’defyinghigh-frequencytraders. Wall Street
Journal (29 July 2019).
[180] Papadopoulos, D., Wessels, D., Huque, S., Naor, M., Vcˇela´k, J., Reyzin, L., and
Goldberg, S. Making nsec5 practical for dnssec. Cryptology ePrintArchive, Report 2017/099
(2017).
[181] Pass, R., and Shi, E. Fruitchains: A fair blockchain. In ACM Symposium on Principles of
Distributed Computing (PODC) (2017), pp. 315–324.
[182] Pass, R., and Shi, E. Hybrid consensus: Eﬃcient consensus in the permissionless model. In
International Symposium on Distributed Computing (DISC) (2017), Schloss Dagstuhl-Leibniz-
Zentrum fuer Informatik.
[183] Pass, R., Shi, E., and Trame`r, F. Formal abstractions for attested execution secure pro-
cessors. In Advances in Cryptology (EUROCRYPT) (2017), pp. 260–289.
[184] Perez, D., and Livshits, B. Broken metre: Attacking resource metering in EVM. arXiv
preprint arXiv:1909.07220 (2019).
[185] Peterson, J., Krug, J., Zoltu, M., Williams, A., and Alexander, S. Augur: a
decentralized oracle and prediction market platform (v2.0). https://augur.net/whitepaper.
pdf, 2019.
[186] Poon, J., and Buterin, V. Plasma: Scalable autonomous smart contracts (working draft).
https://www.plasma.io/plasma.pdf, 11 Aug. 2017.
[187] Poon, J., and Dryja, T. TheBitcoinlightningnetwork: Scalableoﬀ-chaininstantpayments.
http://lightning.network/lightning-network-paper.pdf, 2016.
[188] Protocol Labs. Filecoin: A decentralized storage network. https://filecoin.io/
filecoin.pdf, 19 July 2017.
[189] Qin, K., Zhou, L., Livshits, B., and Gervais, A. Attacking the DeFi ecosystem with ﬂash
loans for fun and proﬁt. arXiv preprint arXiv:2003.03810 (2020).
[190] Reiter, M. K., and Birman, K. P. Howtosecurelyreplicateservices. ACMTrans.Program.
Lang. Syst. 16, 3 (May 1994), 986–1009.
113
[191] Ritzdorf, H., Wu¨st, K., Gervais, A., Felley, G., and Capkun, S. TLS-N: Non-
repudiationoverTLSenablingubiquitouscontentsigning. InNetworksandDistributedSecurity
Systems (NDSS) (2018).
[192] Rivest,R.L.,Shamir,A.,andTauman,Y.Howtoleakasecret: Theoryandapplicationsof
ringsignatures. InTheoretical Computer Science, Essays in Memory of Shimon Even.Springer,
2006, pp. 164–186.
[193] Roberts, J. J. Exclusive: Coinbase buys Xapo custody for $55 million, eyes
lending business. Fortune (15 Aug. 2019). https://fortune.com/2019/08/15/
coinbase-xapo-bitcoin-custody.
[194] Roberts, J. J., and Rapp, N. Nearly4millionBitcoinslostforever,newstudysays. Fortune
(25 Nov. 2017).
[195] Robinson, D., and Konstantopoulos, G. Ethereum is a dark forest. Medium. https:
//medium.com/@danrobinson/ethereum-is-a-dark-forest-ecc5f0505dff, 28 Aug. 2020.
[196] Rutter, K. R3 reports: If at ﬁrst you don’t succeed, try a decentralized KYC platform: Will
blockchain technology give corporate KYC a second chance?, 22 July 2018.
[197] Saltzer, J. H., and Schroeder, M. D. Theprotectionofinformationincomputersystems.
Proceedings of the IEEE 63, 9 (1975), 1278–1308.
[198] Schultz, D. A., Liskov, B., and Liskov, M. Mobile proactive secret sharing. In ACM
Symposium on Principles of Distributed Computing (PODC) (2008), ACM, pp. 458–458.
[199] Shacham, H., and Waters, B. Compact proofs of retrievability. In Advances in Cryptology
(ASIACRYPT) (2008), pp. 90–107.
[200] Sinclair, S. Ethereum Classic suﬀers second 51% attack in a week. Coindesk (6 Aug. 2020).
https://www.coindesk.com/ethereum-classic-suffers-second-51-attack-in-a-week.
[201] StarkWare. Volition and the Emerging Data Availabil-
ity spectrum. Starkware Blog. https://medium.com/starkware/
volition-and-the-emerging-data-availability-spectrum-87e8bfa09bb, 14 June 2020.
[202] Stinson, D. R., and Strobl, R. ProvablysecuredistributedSchnorrsignaturesanda(t,n)-
threshold scheme for implicit certiﬁcates. In Australasian Conference on Information Security
and Privacy (2001), pp. 417–434.
[203] TeamRocket.SnowﬂaketoAvalanche: Anovelmetastableconsensusprotocolfamilyforcryp-
tocurrencies. https://ipfs.io/ipfs/QmUy4jh5mGNZvLkjies1RWM4YuvJh5o2FYopNPVYwrRVGV,
16 May 2018. [Online; accessed 30 Mar. 2021].
[204] Tezos. Proof-of-Stake in Tezos. https://tezos.gitlab.io/whitedoc/proof_of_stake.
html, [Online; accessed 30 Mar. 2021].
[205] The LibraBFT Team. State machine replication in the Li-
bra blockchain. https://developers.libra.org/docs/assets/papers/
libra-consensus-state-machine-replication-in-the-libra-blockchain/2020-05-26.
pdf, 1 May 2020.
[206] Tomescu, A., Abraham, I., Buterin, V., Drake, J., Feist, D., and Khovratovich,
D. Aggregatable subvector commitments for stateless cryptocurrencies. IACR Cryptol. ePrint
Arch. 2020 (2020), 527.
[207] Trame`r, F., Zhang, F., Lin, H., Hubaux, J.-P., Juels, A., and Shi, E. Sealed-glass
proofs: Using transparent enclaves to prove and sell knowledge. In IEEE European Symposium
on Security and Privacy (EuroS&P) (2017), pp. 19–34.
114
[208] Travers, G. All Synths are now powered by Chainlink de-
centralised oracles. Synthetix Blog. https://blog.synthetix.io/
all-synths-are-now-powered-by-chainlink-decentralised-oracles, 1 Sept. 2020.
[209] U.S. Securities and Exchange Commission. Updated investor bulletin: Accred-
ited investors. https://www.investor.gov/introduction-investing/general-resources/
news-alerts/alerts-bulletins/investor-bulletins/updated-3, 21 Jan. 2019.
[210] U.S. Securities and Exchange Commission. SEC modernizes the accredited investor
deﬁnition. SEC Press Release. https://www.sec.gov/news/press-release/2020-191, 26
Aug. 2020.
[211] Van Bulck, J., Minkin, M., Weisse, O., Genkin, D., Kasikci, B., Piessens, F., Sil-
berstein, M., Wenisch, T. F., Yarom, Y., and Strackx, R. Foreshadow: Extracting
the keys to the Intel SGX kingdom with transient out-of-order execution. In USENIX Security
Symposium (USENIX Security) (2018), pp. 991–1008.
[212] van Schaik, S., Kwong, A., Genkin, D., and Yarom, Y. SGAxe: How SGX fails in
practice. sgaxe.com, 2020.
[213] van Vuuren, G. J. AES Golang encryption performance
benchmarks updated. Medium. https://medium.com/@gerritjvv/
aes-golang-encryption-performance-benchmarks-updated-bcfa3555165b, 30 June
2019.
[214] Vickrey, W. Counterspeculation, auctions, and competitive sealed tenders. In The Journal
of Finance (1961), vol. 17, pp. 8–37.
[215] Vorick, D., and Champine, L. Sia: Simple decentralized storage. https://sia.tech/sia.
pdf, 2014.
[216] W3C.Decentralizedidentiﬁers(DIDs)v1.0: Corearchitecture,datamodel,andrepresentations.
W3C Working Draft. https://w3c-ccg.github.io/did-spec, 4 Feb. 2021.
[217] Walton-Pocock, T. Aztec: FastprivacywithZK2 rollup. Aztec Blog.https://medium.com/
aztec-protocol/aztec-fast-privacy-with-zkˆ2-rollup-7c742f45457, 27 Mar. 2020.
[218] Wang, X., Malozemoff, A. J., and Katz, J. EMP-toolkit: Eﬃcient MultiParty computa-
tion toolkit. https://github.com/emp-toolkit, [Online; accessed 30 Mar. 2021].
[219] Wang, X., Ranellucci, S., and Katz, J. Global-scale secure multiparty computation. In
ACM Conference on Computer and Communications Security (ACM CCS) (2017), pp. 39–56.
[220] Weng, C., Yang, K., Katz, J., and Wang, X. Fast, scalable, and communication-eﬃcient
zero-knowledge proofs for boolean and arithmetic circuits. Cryptology ePrint Archive, Report
2020/925, 2020. https://eprint.iacr.org/2020/925.
[221] Wesolowski, B. Eﬃcient veriﬁable delay functions. Journal of Cryptology (2020), 1–35.
[222] Whinfrey, C., Fontaine, S., Guido, D., Daian, P., and Breidenbach, L. Failuretoset
gasLimit appropriately enables abuse. https://drive.google.com/file/d/1mULop1LxHJJy_
uzVBdc_xFItN9ck04Jj/view, 19 Nov. 2018.
[223] Wiggins, M. W. Vigilance decrement during a simulated general aviation ﬂight. Applied
Cognitive Psychology 25, 2 (2011), 229–235.
[224] Wikipedia contributors. Txt record — Wikipedia, the free encyclopedia. https://en.
wikipedia.org/wiki/TXT_record, 2020. [Online; accessed 30 Mar. 2021].
115
[225] Wikipedia contributors. Accelerated mobile pages — Wikipedia, the free encyclopedia.
https://en.wikipedia.org/wiki/Accelerated_Mobile_Pages, 2021. [Online; accessed 30
Mar. 2021].
[226] Wilkinson, S. Storj: A peer-to-peer cloud storage network (v1.01). https://storj.io/
storj2014.pdf, 15 Dec. 2014.
[227] Wilson, D., and Ateniese, G. From pretty good to great: Enhancing PGP using Bitcoin
and the blockchain. In International conference on network and system security (NSS) (2015),
pp. 368–375.
[228] Witkowski, J., and Parkes, D. C. Peer prediction without a common prior. In ACM
Conference on Electronic Commerce (EC) (2012), pp. 964–981.
[229] Xing, B. C., Shanahan, M., and Leslie-Hurd, R. Intel(cid:13)R Software Guard Extensions
(Intel(cid:13)R SGX) software support for dynamic memory allocation inside an enclave. In Hardware
and Architectural Support for Security and Privacy. 2016, pp. 1–9.
[230] Yasskin, J. Signed HTTP Exchanges. W3C Internet-Draft. https://wicg.github.io/
webpackage/draft-yasskin-http-origin-signed-responses.html, 27 Jan. 2021.
[231] Yin, M., Malkhi, D., Reiter, M. K., Gueta, G. G., and Abraham, I. Hotstuﬀ: BFT
consensus with linearity and responsiveness. In ACM Symposium on Principles of Distributed
Computing (PODC) (2019), pp. 347–356.
[232] Zamani, M., Movahedi, M., and Raykova, M. Rapidchain: Scaling blockchain via full
sharding. InACM Conference on Computer and Communications Security (ACM CCS)(2018),
pp. 931–948.
[233] Zhang, F., Cecchetti, E., Croman, K., Juels, A., and Shi, E. Town Crier: An authen-
ticated data feed for smart contracts. In ACM Conference on Computer and Communications
Security (ACM CCS) (2016), pp. 270–282.
[234] Zhang, F., Maram, S. K. D., Malvai, H., Goldfeder, S., and Juels, A. DECO:
LiberatingwebdatausingdecentralizedoraclesforTLS. InACM Conference on Computer and
Communications Security (2020), pp. 1919–1938.
[235] Zhang, X.-Z., Liu, J.-J., and Xu, Z.-W. Tencent and Facebook data validate Metcalfe’s
law. Journal of Computer Science and Technology 30, 2 (2015), 246–251.
[236] Zhang, Y., Setty, S., Chen, Q., Zhou, L., and Alvisi, L. Byzantine ordered consen-
sus without Byzantine oligarchy. In USENIX Symposium on Operating Systems Design and
Implementation (OSDI) (2020).
[237] Zhou, L., Qin, K., Torres, C. F., Le, D. V., and Gervais, A. High-frequency trading
on decentralized on-chain exchanges. arXiv preprint arXiv:2009.14021 (2020).
[238] Zimmermann, P. R. The oﬃcial PGP user’s guide. MIT Press Cambridge, 1995.
A Glossary
This glossary is intended to deﬁne important terms in the body of the paper. Square
brackets denote the section of the main body of the paper (if any) in which a given
term receives treatment. Boldface terms within deﬁnitions indicate a corresponding
glossary entry.
116
• Authenticated data origination (ADO) [Section 7.1]: The use of digital
signatures by original data sources to authenticate data fed from their APIs. By
authenticating data provenance, ADO can help strengthen the integrity of oracle
reports.
• Byzantine Fault Tolerance (BFT): A term used of distributed systems pro-
tocols such as blockchains. BFT is the property of ensuring security even if a
(minority) fraction of nodes / servers behave in a Byzantine, i.e., arbitrarily ma-
licious, manner. The term Byzantine also conveniently describes the mechanics
of most Byzantine-Fault Tolerant protocols.
• Cryptoeconomics: A domain-speciﬁc form of mechanism that leverages cryp-
tographic techniques and digital assets to create desirable equilibria within de-
centralized systems.
• DECO [Section 3.6.2]: Short for decentralized oracle, DECO is a new cryp-
tographic protocol that enables a user (or oracle) to prove statements in zero-
knowledge about data obtained from HTTPS-enabled servers. DECO conse-
quently allows private data from unmodiﬁed web servers to be relayed safely by
oracle networks. (It does not allow data to be sent by a prover directly on chain.)
DECO has narrower capabilities than Town Crier, but unlike Town Crier, does
not rely on a trusted execution environment.
• Exchange: Aplatformfordigital-assettrading. DecentralizedExchanges(DEXes)
are exchanges realized in part or full as smart contracts.
• Fair Sequencing Services (FSS)[Section5]: Chainlink’sfunctionalitytobring
blockchain users the innovation of ﬁrst-come, ﬁrst-serve services like the kind
you can get at a deli. FSS helps prevent front-running and other schemes that
arbitrageurs use to gain a technical advantage over ordinary users in existing
smart contract systems.
• Front-running: A proﬁt-making strategy in ﬁnancial systems such as public
blockchains in which a trader, observing an incoming transaction, exploits it by
speedily placing her own transaction ﬁrst. The term has a narrower meaning
on Wall Street than in the blockchain community, but an even more thriving
community of practitioners.
• Future fee opportunity: The net revenue a Chainlink oracle may expect to
receive from service payments from customers in the future. Loss of such fees in
cases of malfeasance represents an opportunity cost.
• Game theory: Mathematically formal study of strategic interaction. A game
is a model of such an interaction, typically in the real world, that codiﬁes sets of
actions available to participants in the game, known as players.
117
• Layer-2 systems: A class of approaches to improving the performance— both
transaction throughput and latency—of blockchains. Layer-2 systems involve
oﬀ-chain processing of transactions, followed by periodic reconciliation / syncing
with the target blockchain. Rollups are one example.
• Mechanism / mechanism design (MD): Sometimes called “inverse game-
theory,” MD is the science of designing games, called mechanisms, that incen-
tivize particular behaviors by participants, conventionally known as players.
• Public-key infrastructure (PKI): A system for secure creation and manage-
ment of a mapping of identities to public keys.
• Rollup [Section 6.3]: A variant on the classical computer science transaction-
processing approach known as batching, now available in fruit ﬂavors. Rollups
can help increase transaction processing speeds and throughputs, and are a
promising approach to scaling blockchains to handle high transaction loads. A
rollup involves oﬀ-chain construction of batches of transactions, followed by on-
chain submission. Two popular rollup design approaches are:
– Optimistic rollups: A class of rollup schemes in which transaction batches
are submitted on chain without veriﬁcation. Their correctness is enforced
by allowing participants to mount challenges to incorrect rollups, and using
staking as an economic incentive for such challenges.
– zk-Rollups: A class of rollup schemes in which ‘zk’ inexplicably denotes
“zero-knowledge,” a property that zk-Rollups need not and often do not
have. zk-Rollups use succinct arguments of knowledge, i.e., compact cryp-
tographicproofsorcorrectcomputation, toenableeﬃcientveriﬁcationwhen
submitted on chain.
• Super-linear / quadratic staking impact [Section 9.4.2]: An adversary can
corrupt rational, i.e., incentive-driven, oracle nodes by bribing them. Given an
adversary with budget $B(n), and n participating oracle nodes, each with a ﬁxed
staking deposit $d, we say that a staking scheme has super-linear impact if adver-
sarial success requires B(n) that grows asymptotically faster than n. Quadratic
impact means that B(n) grows asymptotically as n2.
• Staking[Section9]: Ameansofreinforcingthesecurityofadecentralizedsystem
using rigorously quantiﬁable economic incentives. In a staking scheme, partici-
pants provide a cryptocurrency deposit that is partially or fully forfeited in cases
of participant deviation from a blockchain protocol. In the Chainlink setting,
oracle nodes perform staking to ensure correct reports; they forfeit stake upon
failure to produce a correct report.
118
• Transaction-Execution Framework (TEF) [Section 6]: A Decentralized Or-
acle Network framework for layer-2 systems that implements oracle support and
Fair Sequencing Services.
• Town Crier [Section 3.6.2]: An oracle technology that uses a trusted execution
environment (TEE) to enforce integrity and conﬁdentiality on oracle data and
computation. Town Crier has capabilities that subsume those of DECO, but
requires trust in a TEE.
• Trusted Execution Environment (TEE): An execution environment for ap-
plications, often with special-purpose hardware support. A TEE aims to pro-
vide strong security properties such as conﬁdentiality and application integrity,
i.e., tamper-resistance for software. TEEs are a work in progress, but one that
promises to have a large industry impact.
• Trust minimization [Section 7]: A common term in the blockchain industry
cleverly crafted to mean the opposite of what it sounds like it should mean. Trust
minimization refers to a desirable design feature in decentralized systems: Strong
assurance of correct behavior under limited assumptions about the trustworthi-
ness of system components.
B DON Interface: Further Details
In this appendix, we provide more details on the DON interface outlined in Section 3.
We treat the three computing resources of networking, computation, and storage re-
spectively in Appendix B.1, B.2, and B.3.
B.1 Networking
Oracle systems have arisen to address a limitation in basic blockchain protocols: public
/ permissionless blockchains cannot securely fetch data from external systems, such as
web servers.20 DONs aim to support application-level adapters between blockchains
and oﬀ-chain systems in a general, ﬂexible, and extensible form.
Inthissection, wediscussthetechniquesDONswillusetoconstructsecureadapters
and to ensure their availability. We also give some examples of their application. Most
of the techniques we describe have not been codiﬁed before in a Chainlink whitepaper.
They can be applied in Chainlink as it is architected today, i.e., do not require DONs,
and we expect that some of them will be.
20Mostdataofinterestisnotdigitallysignedbytheoriginatingwebserver. Thusdatafetchedbya
single miner producing a block would be vulnerable to tampering. Even in committee-based consen-
sus protocols, e.g., [103, 120], there would be formidable challenges in realizing oracle functionality,
including data availability failures (and their potential impact on performance and/or transaction
censorship), added low-level complexity, access restrictions on some data sources (e.g., proprietary
sources), etc.
119
We characterize the security of an adapter in terms of the classic CIA (conﬁden-
tiality, integrity, availability) triad.
Of greatest importance in an oracle system is data integrity. Integrity here means
that an adversary cannot tamper with data relayed from the source to the DON (or
vice versa). In some circumstances, a channel should also provide conﬁdentiality. Con-
ﬁdentiality means that an adversary learns only the data that a protocol is designed to
send over the channel. (We provide more precise notions.) A channel should exhibit
availability, meaning that the channel is created and carries data in a timely way in
response to relying parties’ needs. Finally, as an addition to the triad, we note that
accountability is important to ensure the proper functioning of oracle systems: In cases
of failure, it should be possible to identify (and penalize) malfunctioning nodes.
B.1.1 Integrity
Transport Layer Security (TLS)—the dominant internet protocol for establishing a se-
cure channel between a client and a host—has a serious inherent limitation: It provides
integrity only for the two communicating parties. It does not digitally sign data in a
way that supports proof to a third party that data originated with the host (or client),
and proposals for this purpose, e.g., [9, 191], are currently seeing very limited adoption.
Some data of interest for blockchain systems may be digitally signed by its producers,
and we discuss approaches to support this potentially beneﬁcial practice in Section 7.1.
Today, however, the vast majority of web data isn’t digitally signed.
DONs therefore incorporate purpose-built mechanisms for ensuring the integrity of
a report r communicated to the DON from one or more other sources. These come in
three forms, each with its own associated trust and operational model.
To describe the functioning of the three mechanisms, we consider a simple model
in which players aim to ensure the integrity of what we call an enhanced report r =
(r˜,sid,S), where a basic report payload r˜ is tagged with: (1) sid, a session identiﬁer
and (2) an identiﬁer S for the source / entity with which the report originated. The
value sid provides a unique label for the protocol context in which r˜ is sent, and may
include such information as a unique identiﬁer of the relying smart contract, an unique
identiﬁer of the query to which the report corresponds, etc. We refer to an enhanced
report simply as a report where clear from context.
We denote by ρ = (r[,w]) a report that an oracle node O writes to L, where w
i i
denotes an (optional) witness. We refer to w (with or without a witness) as a recorded
report. Because players’ messages on L are authenticated, i.e., signed by the players
that post them, writing ρ can serve as an endorsement by O in a relying protocol.
i i
DONs support three basic mechanisms for ensuring the integrity of queries and
reports, meaning their being relayed from claimed source S without tampering. They
are:
• Cryptographic proofs: Digital signing of r by a source S with public key pk,
i.e., ρ = (r,w = Sig [r]), provides a direct assurance of the integrity of the
pk
message.
120
• Trusted execution environments (TEEs) / Town Crier: An application
instance A with public key pk running in a fully featured TEE, such as Intel
A
SGX,cangenerateanattestation, thatis, adigitallysignedwitnessw = Sig [r].
pk
A
Assuming trust in the TEE, then, the recorded report ρ = (r,w = Sig [r])
A pk
A
ensures the integrity of r.
• Thresholding: Any subset of f + 1 players generating recorded reports ρ =
i
(r,Sig [r]) or combined or aggregate witness ρ = (r,Sig [r]) provides a collec-
pk O O
i
tive view of r as originating correctly with source S.
Thresholding and TEEs are complementary. They can be used simultaneously for
a stronger combined security assurance, in the sense that integrity is assured if at least
one of the two mechanisms is sound.
We may extend our deﬁnition of integrity to encompass recording a transformation
conf(r˜)ofr˜, ratherthanr˜itself. Thisextensionisusefulforconﬁdentiality, asdiscussed
below.
Untrustworthy sources: A given data source S may, of course, provide untrustwor-
thydata. Adapterintegrityinthesensewehavedeﬁneditdoesnotincludemechanisms
to address corrupt sources. The predominant mechanism used in oracle systems is ag-
gregation over sources. For example, if an asset’s price reports r ,r ,r are fetched
1 2 3
from sources S ,S ,S , an aggregate report r = median(r ,r ,r ), given one faulty
1 2 3 1 2 3
source, r will be the value reported by a correct source. Ensuring correct aggregation
is a problem of computation integrity, as discussed in Appendix B.2.
B.1.2 Conﬁdentiality
We say that an adapter has weak conﬁdentiality if O learns both the query q and report
data r generated by the adapter. Weakly conﬁdential protocols may still provide other
forms of conﬁdentiality, however: the adapter may place only partial information about
(q,r) on L and thus partially conceal (q,r) from an observer, and auxiliary data in the
protocol may still be conﬁdential.
We say an adapter has strong conﬁdentiality, on the other hand, if q and r are
partially or fully concealed from O. It’s not obvious at ﬁrst glance how to achieve
strong conﬁdentiality: How, after all, can O process a hidden query and manage a
hidden report?
DONs can useDECO [234] and/or Town Crier [233] to achieve strong conﬁdentiality
in adapters. See Appendix C for an example.
DECO and Town Crier are designed to provide legacy compatibility, i.e., the ability
to use existing data sources, in a conﬁdentiality-preserving way. An alternative ap-
proach is to change the output of data sources by digitally signing it and providing
conﬁdentiality features, as in TLS-N [191], a nicely complementary approach that we
will also explore, and to a limited extent in OpenID Connect [9], an identity-oriented
data-signing protocol that runs on top of OAuth 2.0.
121
B.1.3 Availability
Theavailabilityofanadapterdependsonboththeavailabilityofthesystemtowhichit
is connecting as well as the availability of the DON nodes responsible for implementing
the adapter. While availability mechanisms may be adapter-speciﬁc, we expect that
they will commonly rely on a few basic techniques already used or slated for inclusion
in the current version of Chainlink. One, of course, is redundancy, i.e., having multiple
nodes operate the channel. Another is the use of cryptoeconomic incentives to reinforce
fast channel operation; for example, while redundant nodes receive payment for their
services, a premium may be paid for fast execution, e.g., a reward for the ﬁrst node to
relay data to the DON from an oﬀ-chain system.
See Appendix B.1 for further details on adapters in DONs.
B.2 Computation
In their support of layer-2 scaling approaches—whether based on optimistic computing
or validity proofs—DONs oﬀer the possibility of signiﬁcant performance improvements
for smart contracts. By employing additional technologies, DONs can provide further
performance enhancement and also support various forms of conﬁdentiality, whether
for oracle data as an adjunct to privacy-preserving layer-2 schemes (e.g., [217]), or to
provide privacy enhancement for schemes in which it isn’t present.
Zero-knowledgeproof(argument)systems,suchaszk-SNARKs[126],zk-STARKs[38],
and Bulletproofs [56, 66], are powerful tools for privacy and will play an important role
in the evolution of conﬁdentiality-preserving smart contract systems [149], as they do,
for instance, in DECO. It is worth noting that the goal of proving statements in zero-
knowledge to an oracle node admits use of a new form of zero-knowledge proof with a
designated veriﬁer (i.e., a proof that is veriﬁable only by a particular entity, not pub-
licly) [220]; such schemes can greatly outperform more general-purpose zero-knowledge
proof systems. We expect that zero-knowledge proofs will play an important role in
trustworthy and conﬁdential relaying of oracle results, in both adapters and executa-
bles. But they have a critical limitation: They don’t conceal secrets from the prover.
To enable more general conﬁdentiality-preserving functionality will require addi-
tional techniques. These same techniques can also enforce integrity, i.e., help ensure
that computation is performed correctly. We brieﬂy discuss the roles of Trusted Exe-
cution Environments (TEEs) and Secure Multi-party Computation (MPC) in the evo-
lution of Chainlink.
B.2.1 Trusted Execution Environments (TEEs)
TEEs such as Intel SGX [229, 133] and Keystone [152] allow applications to exe-
cute within a protected environment, known as an enclave, that in principle protects
both their integrity and conﬁdentiality. TEEs are designed to realize a powerful and
very general functionality [183], one that encompasses even powerful cryptographic
122
primitives such as virtual black-box obfuscation, that are provably unrealizable using
cryptography alone [27, 175].
The idea of leveraging TEEs for smart contracts was introduced in [139, 233] and
several general-purpose frameworks for this purpose have since emerged [58, 80, 99].
We expect that TEEs will eventually play a role in the Chainlink network, as
they are the basis for Town Crier [233], and Chainlink already supports TEE-based
blockchain systems, e.g., [8]. As the technology continues to mature, we believe it will
play an increasingly important role in blockchain systems in general, and Chainlink in
particular.
Concerns about TEE security have been one impediment to their adoption. We
therefore brieﬂy discuss this issue.
B.2.2 TEE Security
Recent attacks against Intel SGX, the only commodity TEE with attestation capabil-
ities, e.g., [211, 212], have cast doubt on the security of TEEs in practice. We believe
that the technology will evolve, particularly with open source eﬀorts emerging [152].
Mitigations: It is possible to deploy TEEs in ways that recognize their potential
for compromise. One is to employ them for defense-in-depth, that is, for harden-
ing systems. Town Crier may be viewed in this light: Trustworthy oracle operators
should provide their users with conﬁdentiality and integrity, but use of Town Crier
strengthens this assurance. Similarly, TEEs can be deployed in ways that don’t rely
on perfect security. Sealed-glass proofs [207], for instance, use TEEs for integrity, but
not conﬁdentiality (although recent side-channel attacks compromise both).
Finally,itispossibletodesignTEE-basedprotocolswithforward security,suchthat
if a break becomes known: (1) Players can avoid use of the TEE and (2) The break
does not retroactively impact previous protocol invocations. This approach would
greatly limit the window of opportunity for adversaries to exploit TEE vulnerabilities.
For example, in protocols where a TEE controls users’ funds, users might move those
fundsintoaddressesspeciﬁcallyfortemporary, TEE-onlyuse. InprotocolswhereTEEs
enforce conﬁdentiality for long-lived data, frequent key rotation would achieve a similar
goal.
For example, a TEE could be used to implement the ConfSwitch adapter for conﬁ-
dential DeFi discussed in Appendix C.3. The TEE ingests (q,switch) encrypted under
a public key pk (t) for an epoch t lasting, e.g., a week, and generates the output
TEE
s = switch(r). It then purges all the data it has processed. At the beginning of
each new epoch, it deletes its old key, generates a new one, and publishes it to L or
MAINCHAIN. (Such publication could be facilitated by an executable on L with a
per-epoch initiator.) Players can additionally abort by agreement at any time.
Of course, users have exposure in this model to zero-day, i.e., unpublished, attacks.
There is a cost to using a zero-day attack, however, namely the risk of its exposure
and invalidation through publication of a patch.
123
B.2.3 Secure Multi-Party Computation (MPC)
MPC is a term for generic computation on secret-shared values by a set of nodes. MPC
enables realization of a “black box” functionality, i.e., computation of a function g on
conﬁdential inputs x ,...,x such that players learn only g(x ,...,x ), and learn no
1 z 1 z
information about the inputs to the function or intermediate computations. Inputs
can be secret-shared, and also represented in a binding but conﬁdential way on chain
using a commitment scheme or encryption under a secret-shared key.
While quite ﬂexible, and despite impressive recent advances, generic MPC—i.e.,
MPC that supports any function g—incurs very high computation and communication
overhead by comparison with direct execution on a single node. For example, MPC
using fairly state-of-the-art tools operating in an adversarial model with malicious
players—such as EMP toolkit [218, 219]—require about 20 seconds of computation
for a single AES evaluation for 14 nodes on a WAN. (Only 250ms of computation is
online; the rest can be performed in a precomputation phase.) By comparison, an AES
evaluation on a modern, consumer-grade CPU requires around 2µs [213].
In short, generic MPC is reasonably practical, but only for modest computations.
Practical implementations have tended to focus on relatively modest computational
tasks, such as auctions in Hyperledger Fabric [42].
Considerably more eﬃcient protocols can be realized for certain functions g. One
example is threshold signing, which is especially practical for BLS signatures [54].
2PC, computation involving just two players can leverage special techniques (“garbled
circuits”) that makes it considerably more eﬃcient than computation involving n > 2
players. DECO [234], for example, uses both custom and generic 2PC techniques.
Most MPC schemes and implementations have some important limitations. One is
that a single player can abort the protocol and learn its output, while (anonymously)
preventingotherplayersfromlearningtheirs’. Thismeansafailureofrobustness(ability
to complete computation) but also fairness (in an MPC-speciﬁc sense), meaning that
all players receive outputs or none does.
Schemes that allow identiﬁcation of aborting players (ID-MPC), e.g., [37] are one
approach to this problem. But MPC protocols also generally make the strong assump-
tion of network synchrony, without which they may experience both conﬁdentiality
and integrity failures. A reasonably practical robust version of MPC that operates in
asynchronous networks is presented in [157].
Another limitation of most MPC protocols is their lack of public veriﬁability. This
isn’t problematic in a model that assumes a quorum of honest players, but would be
for the type of MAINCHAIN accountability discussed in Section 7.3 and Section 8.3.
To ensure correct MPC outputs in the case of a failure in a majority of nodes requires
use of publicly veriﬁable variants such as [37] with a public bulletin board—necessarily
MAINCHAIN in a majority-dishonest model—and is thus not terribly practical.
In summary, we expect that DONs will support MPC for specialized computations,
such as threshold signing and DECO, early in their development. We will track devel-
opments in the fast-moving ﬁeld of MPC to determine where support for generic MPC
124
may be appropriate.
B.3 Storage
Data sent to blockchains can play a multifarious role. It may be consumed immediately
by contracts. It can alternatively be placed on chain for fast future access by contracts
or for purposes not related to contract execution, such as archival storage facilitating
the audit of oﬀ-chain systems. The quantities of data required for these last two
purposes greatly exceeds that consumed by contracts today, as well as the data-storage
capacity of most permissionless blockchains.
We envision DONs accommodating two forms of storage. The ﬁrst is on-ledger
storage, achieved by inclusion within a DON’s ledger. The second option, particularly
attractive for bulk storage, is oﬀ-ledger storage.
Oﬀ-ledger storage may involve the use of oﬀ-chain systems that are innately de-
centralized, such as Filecoin [188], IPFS [40], Storj [226], or Sia [215]. Filecoin has a
built-in protocol called Proof of Replication (PoReps) [74, 112, 111, 188, 199], designed
to ensure storage of multiple copies of a ﬁle F (and prevent miners from gaming the
consensus protocol). The other three can only achieve this property by having an
end user encrypt F multiple times under diﬀerent keys, creating distinct correspond-
˜ ˜ ˜
ing ciphertexts F , F , F . A DON can perform such encryption on behalf of a user,
1 2 3
permitting proof of replication without native support in a target storage protocol.
Where compatible with users’ desired trust models, it is also possible to use existing
systems, such as conventional cloud storage providers. Replication across such services
ispossibleforrobustness[57]andcomplementarytoandcomposablewithdecentralized
storage services.
Conﬁdentiality: DONs include the ability for O to store data encrypted under a
secret-shared key. They can perform conﬁdentiality-preserving computation over such
data, as discussed above in Appendix B.2.
B.4 Resource Pricing
Accurate charging of users for resource use on blockchains remains a perennial chal-
lenge. Mispriced resources do not merely carry the risk of discouraging important ap-
plications within an ecosystem. They also constitute a security risk, as they can enable
denial-of-service attacks [184] and more subtle attacks such as drainage of funds [222].
Resource pricing of executable logic in a DON is a somewhat easier problem, as
DON nodes control resource usage and can apply whatever pricing strategies they
deemappropriate. Possibleapproachesincludemarket-drivenpricing, gasmeteringa`la
Ethereum, whichissupportedinEVMandWASM[3], andlanguage-drivenapproaches
such as non-Turing-complete languages [131]—potentially along with bounded code
sizes. Pricing of adapters, however, will certainly require application-speciﬁc pricing
125
strategies, as adapters access external resources, e.g., cloud storage, whose cost is
DON-independent.
C Adapter Examples
In this appendix, we give a few examples of adapters, to illustrate both the wide variety
that is desirable and achievable in practice and relevant notions of security and the
techniques to enforce them.
We use the notation Adapter(P,S) to denote an adapter that involves players in P
and a set of data sources (or a single data source) S. We let → T denote an input /
output to system T where there’s ambiguity. Otherwise inputs should be understood
as read by an adapter from L and outputs as written to L.
C.1 Oracle-Mediated Data-Source Access (MediatedReport)
In some cases, certain nodes may have access to a data source S that the full set of
nodes O does not. For example, some nodes may have API keys or other credentials
thatothernodesinO lack. NodeswithprivilegedaccesstoadatasourceS canmediate
access on behalf of O using DECO (or Town Crier). Here we describe an adapter that
does so with weak conﬁdentiality.
Technical approach: Using DECO, it is possible for a particular O to access S
i
using conﬁdential credentials and prove to another node O that it correctly relayed a
j
report r from S, without revealing its credentials to O . This approach can be scaled
j
of course to proofs across subsets of nodes.
Adapter MediatedReport(O,S)
Input: q
Output: hmedreport : (q,r); O i
i
Security:
• Availability: O must be available when invoked by players in O that
i
lack access to S.
• Integrity: r is correct under the cryptographic hardness assumptions of
DECO and assuming at least k honest nodes in O.
Example application: Suppose O submits a report r from data source S whose
i
value is disputed by another node or nodes in O. This might occur, for instance, as
part of the dispute mechanism in a staking protocol.
126
The dispute might be arbitrated by invoking the full set of nodes in O. Some nodes
in O, however, may lack access to S, which may be a specialized data source. Using
DECO, it is possible for O to prove to nodes in O that its report r was correctly relayed
i
from S, without other nodes having direct access to S.
Variants and extensions: Town Crier oﬀers an alternative way to achieve the same
adapter. The credentials of O can be placed in Town Crier instances run by individual
i
oracle nodes in O, with appropriate restrictions on their use [164].
It is also possible to extend MediatedReport so that O may call any node in O∗, a
subset of nodes with access to S. It is also possible to generalize MediatedReport to
involve nodes on MAINCHAIN. Such a variant can be helpful in protocols, e.g., staking
or optimistic rollups, e.g. [141], that use on-chain arbitration of oﬀ-chain computation.
C.2 Cross-Ledger Reports (XL-Report-Read)
For many applications, it can be useful to exchange data across DONs. Here we
describe a simple adapter to import a basic report from a DON B to another DON A.
For simplicity, we assume a unique report of the form hreport : (q,r)i on L for any
B
given q.
Technical approach: As messages on a ledger L are signed with respect to pk ,
B LB
they can easily be authenticated by the set of oracle nodes O operating Decentralized
A
Oracle Network A if they know pk .
LB
Adapter XL-Report-Read(O ,L )
A B
Input: (q,pk ) → L , for query q and target DON public key pk
LB A LB
Output: hXLreport : (q,r);pk i → L .
LB A
Security:
• Availability: At least one node in O must have access to L .
A B
• Integrity: r’s correctness depends upon an honest O .
B
Example application: A DON A may determine that it has suﬃcient trust in DON
B to treat its reports as trustworthy. In this case, it may be more cost-eﬀective to
import certain reports than to generate them independently.
PKI support: The main challenge in securing report transfer between DONs is
maintenance of a supporting public-key infrastructure (PKI), that is, a trustworthy,
127
up-to-date mapping of public keys to DONs. To support this essential functionality
in Chainlink, we plan to maintain smart-contract-based directories of Decentralized
Oracle Networks and their public keys on all blockchains that Chainlink supports.
Variants and extensions: Of course, many other possible cross-DON adapters are
possible. For example, DON A may have permission in DON B to import conﬁdential
data from L . In this case, the adapter would require participation from O . As
B B
another example, DON A may have selective write permissions on DON B, in which
case a cross-chain adapter for writing data would be possible.
Other extensions are possible to handle multiple or ambiguous reports on L . For
B
(cid:16) (cid:17)
example, XL-Report-Read could relay the message M = (q,∗),z with the highest
index z on L at a given time t.
B
C.3 Conﬁdential Switch (ConfSwitch)
Our previous two examples did not provide on-ledger conﬁdentiality of q or r. We
now describe one that does: ConfSwitch. This adapter reveals on chain only a function
switch of an aggregate (medianized) report r, and is thus appropriate for price feeds. It
provides on-ledger conﬁdentiality for q and r, revealing only a function of the latter. It
also enables recording of conﬁdential data for an auditor (with public key pk ). Such
aud
auditing may be important, as the details of transactions that use ConfSwitch are not
visible on the ledger or main chain. The data made available to the auditor includes
q,switch, and optional auxiliary data α.
Technical approach: To provide conﬁdentiality for q and switch (and optionally α),
they are encrypted under the public keys of O and the auditor. O accumulates reports
oﬀ ledger and aggregates them into a report r, and outputs switch(r). Neither q nor
any report data are written explicitly on L.
Strong conﬁdentiality: Strong conﬁdentiality is achievable in ConfSwitch using
DECO or Town Crier.
In such a variant, players place on L the commitment c = comm(q,switch) to the
query and switch. Either player can then use DECO or Town Crier to retrieve reports
and prove in zero knowledge their correctness with respect to c. As DECO enables
such proofs only for individual reports, an additional step would be required: The user
would prove the correctness of ciphertexts on individual reports and then prove the
correctness of a claimed output switch(r), i.e., correct medianization and application
of switch to the reports.
128
Adapter ConfSwitch (O,S)
Input: Enc [q,switch],Enc [q,switch,α]
pk pk
O aud
Output: hConfSwitch : switch(r)i, for r = median({r } )
i i:Oi∈O
Security:
• Conﬁdentiality: The adapter reveals Mixicle execution details to O, but
only switch(r) to observers of L and MAINCHAIN.
• Availability: Availability depends on full availability of S (although vari-
ants are possible that rely on a threshold subset of S).
• Integrity: r’s correctness depends upon cryptographic hardness assump-
tions, the honesty of O, and the accuracy of reports from S.
Figure 19: Adapter ConfSwitch
D Functional Signatures
A functional (digital) signature scheme [59], like a conventional signature, has a master
(private) key sk that permits signing of any message. Additionally, however, the master
key can be used to create a signing key sk , for a function F, that permits signing of
F
any value y in the range of F, i.e. such that F(x) = y for some input x.
A simple way to realize this primitive, given in [59], is as follows (with slight modi-
ﬁcation). A fresh key pair (sk0,pk0) is generated. To create the key sk for function F
F
is computed as:
(cid:16) (cid:17)
sk = sk0,cert = Sig (pk0 k F) ,
F sk
where cert here may be viewed as a “certiﬁcate” stating that pk0 is a valid public key
for a functional signature with function F and master public key pk.
A signature on message y using sk , then, takes the form:
F
Sig∗ (y) = (cert,Sig (y),x).
sk sk0
F
(cid:16) (cid:17)
To verify Sig∗ (y), i.e., compute verify∗ Sig∗ (y) , a veriﬁer checks that F(x) = y,
sk sk
F F
and also checks the validity of cert and Sig (y) in the obvious way.
sk0
The value x (the “witness”) can in principle be large—as in the oracle-oriented
use cases we consider. A straightforward remedy [59] that is computationally eﬃcient
for the veriﬁer is to substitute for x a SNARK (or zk-SNARK for conﬁdentiality)—a
compact proof (argument) of the existence of x.
129
Functional signatures are conceptually straightforward, as are their basic construc-
tions. But they provide a useful framework for reasoning about combining source data
in oracle networks.
D.1 Functional Signatures for Combining Data
Returning to Example 4, we can see how a functional signature might be applied
to create a proof σ that a value v was correctly computed from the value-signature
set pair (V,Σ). Let (sk ,pk ) denote the signing key pair for data source S in S =
i i i
{S ,S ,...,S }. Suppose pk is a public key for S whose corresponding private key
1 2 nS
is shared in a threshold manner among data sources; for simplicity, assume sk is S ’s
i i
share of sk.
We can then deﬁne a functional signature that medianizes a set of n validly signed
S
values as follows:
( )
median(V) if ∀i ∈ {1...n },verify(pk ,σ ,v ) = true
F(V,Σ) = S i i i
⊥ otherwise.
A functional signature scheme with master key sk, then, can be used to transmit a
correctlycomputedmedianvaluev toSC. Theoraclenetworkcomputesσ∗ = Sig∗ (v),
sk
and sends it to SC, which veriﬁes it by computing verify∗(σ∗,pk,v). F
Of course, to improve robustness to data source failures, F can be relaxed to medi-
anize a subset of at least k validly signed values for some threshold k ≤ n , i.e., to
S S S
acceptvalidsignaturesfromaquorumofsources, aswedoinourexampleconstructions
below.
D.2 Discretized Functional Signatures
Computing σ∗ using a SNARK-based function-signature construction is a computa-
tionally intensive task that may be incompatible with high performance DON ap-
plications. We therefore propose a relaxed variant we call discretized functional sig-
natures, the key idea of which is to place a grid over the space of possible signed
values, and constrain the values to that grid. For example if the required answer is
a single scalar, the grid could be all the integer multiples of some grid size a ∈ R+,
aZ = {...,−3a,−2a,−a,0,a,2a,3a,...}. Then a valid signed value is a representation
of some az for z ∈ Z plus a valid signature over az.
The value az need not be the precise answer F(V,Σ), but will be close to it. To
formalize this, in addition to the predicate function F from Appendix D.1, the speciﬁ-
cation of a discretized functional signature has an additional pair of parameters (δ,δ0),
corresponding to how coarse/ﬁne the constraining grid is. They are as follows:
130
• The parameter δ bounds permitted deviation from the correct output of F. In-
formally,21 given a pair (V,Σ), we require that it be infeasible for an adversarial
signer (the DON, for our purposes) to generate a signature σ∗ that deviates from
the correct output of F(V,Σ) by more than δ, i.e., such that:
verify∗(σ∗,pk,v) ^ (|F(V,Σ)−v| > δ).
• The parameter δ0 characterizes how precisely some quorum of values in V must
match, for a feasible signature to be guaranteed. I.e., a functional signature σ∗
can always be constructed, given k signers {S }kS with observations {v } such
S zi i=1 zi
that |v −v | ≤ δ0 for all i,j.
zi zj
Thus, δ may loosely be viewed as a soundness parameter, while δ0 is a completeness
parameter, in the sense that it speciﬁes that signatures can always be constructed from
observations v = (v ,...,v ) by honest participants as long as v lies within δ0 of the
1 kS
diagonal in VkS-space, under the max norm, i.e. so the larger δ0 is, the larger the set
of signable observation sets is.
Recall our assumption that sk is a secret share of sk. In describing an example
i
construction, we further assume that Sig is a non-interactive threshold signature, e.g.,
a BLS signature [54]. In an example below, we will use (k ,n )-threshold signatures
S S
for some threshold k ≤ n such that k > 2n .
S S S 3 S
With this machinery, we can build eﬃcient functional signatures for a variety of
diﬀerent message spaces. The idea, brieﬂy, is for data sources collectively—but non-
interactively—to compute partial (k ,n )-threshold signatures on grid values az ∈ aZ
S S i
in the neighborhood of their respective individual values v . In this way, the data
i
sources in S collectively constrain v, without explicitly computing it. If at least k
S
data sources emit values v that are suﬃciently close, their neighboring grid values will
i
have a common element which they have all signed, collectively creating a threshold
signature on a grid point within a δ-bounded neighborhood of a valid v = F(V,Σ). A
signature Sig∗ (v) for v = az is simply a threshold signature on az ∈ aZ.
sk
We illustrate by way of example, describing a construction for medianizing. It is
convenient here to deﬁne a cell for aZ as an interval of values contained within a pair
of successive grid points, i.e., [az,a(z +1)].
Example 6 (Discretized functional signature for median). Suppose the value to be
signed is a price quote (e.g., the USD price of ETH), and can thus be represented as a
positive integer in Z+ (e.g., denominated in some fraction of US dollars such as cents).
For the function F(V,Σ) that medianizes a set of at least k signed source values, the
S
following construction achieves (δ = a,δ0 = a) for any a ∈ N.
Let
21A more formal security deﬁnition would require application of the “discretized” property to the
existential unforgeability under a chosen message attack (EUF-CMA) for threshold signatures, for
which see, e.g. [118].
131
ι(v ) = abv /ac,
i i
ι0(v ) = ι(v )+a,
i i
i.e., [ι(v ),ι0(v )] is the highest cell in the grid aZ which contains v .
i i i
Each data source S emits a signature σ of the following form:
i i
(cid:18) (cid:16) (cid:17) (cid:16) (cid:17) (cid:16) (cid:17)(cid:19)
σ = (σ(1),σ(2),σ(3)) = Sig ι(v ) ,Sig ι(v ) ,Sig v
i i i sk i sk i sk i
i i i
A signature σ is valid if all the constituent signatures σ(j) are valid, and the mes-
i i
sages in σ(1),σ(2) are equal to ι(v ),ι0(v ), where v is the message in σ(3).22
i i i i i i
A functional signature Sig∗ (v) = F({v },{σ }) can be constructed from the signa-
sk i i
tures {σ } if there is a common grid point v = az ∈ aZ on which some suﬃciently
i i
large subset of {σ(1),σ(2)} contains partial signatures.
i i i
The scheme in Example 6 achieves δ = a and δ0 = a for the median function
F(V,Σ) that medianizes a set of at least k signed source values, as we will show in
S
the following lemmas.
Lemma 1. Given a valid discretized functional signature on v ∈ aZ, constructed from
k partial signatures on v,
S
nσ = (Sig (ι(v )),Sig (ι0(v )),Sig (v ))okS ,
i sk i sk i sk i
i i i i=1
it follows that each v lies in [v −a,v +a].
i
Proof. Since {σ } can be used to construct a functional signature on v, we must have
i
v ∈ {ι(v ),ι0(v )} for each i. Thus one of the following is true:
i i
v = ι(v ) = abv /ac =⇒ v ∈ [v,v +a]
i i i
v = ι0(v ) = abv /ac+a =⇒ v ∈ [v −a,v]
i i i
Therefore, v ∈ [v −a,v]∪[v,v +a] = [v −a,v +a].
i
22σ(3) = Sig (v ) is not necessary for the correctness of this construction, but including it avoids
i sk i
i
distracting questions about what the median of the observations is, when
• a dishonest oracle S could attest to arbitrary grid cell boundaries irrespective of its observed
i
value v , or even without having observed any value v at all, or
i i
• an aggregator of the partial signatures could choose an arbitrary k -sized subset of the σ ’s
S i
from which to construct the functional signature
It is not hard to optimize this construction to work with only Σ = {(σ(1),σ(2))}, and show that the
i i
range of possible values for the median implied by the resulting functionally-signed value covers all
possible actual median values, as long as less than nS answers are dishonest. It requires the minor
3
(butdistracting)ontologicalgymnasticsofreassigninginaccurately-reported/nonsensical/nonexistent
values of V to arbitrary integers.
132
Lemma 2. Let {v }m be a set of observations, and let I ⊂ {1,...,m} be a subset of in-
i i=1
diceswhichconstituteamajority. Themedianof{v }liesin[min({v } ),max({v } )].
i i i∈I i i∈I
Proof. Without loss of generality, assume the observations v ,...,v are sorted. The
1 m
subsequence
argminv ,...,argmaxv
i i
i∈I i∈I
is longer than m, since |I| > m. Therefore, the midpoint(s)23 of the sequence 1,...,m
2 2
lie(s) in subsequence, and thus the median lies in [min({v } ),max({v } )].
i i∈I i i∈I
Lemma 3. Given a valid discretized functional signature on v ∈ aZ, from a set of
n signers {S }, more than two thirds of which are honest, and a signature threshold
S i
k > 2n , the true median lies in [v −a,v +a].
S 3 S
Proof. By lemma 1, all the v ’s used by honest signers lie in [v − a,v + a]. While
i
dishonest signers could have signed v on the basis of any observation (or even no
observation), the honest participants form a majority of the signers, so by lemma 2 the
median observation lies between two honest values in [v−a,v+a], and therefore itself
lies in [v −a,v +a]. (The honest signers form a majority because at least k > 2n
S 3 S
signed, but the number of dishonest participants in the signing group is assumed to be
less than 1n = 1 × 2n < kS.)
3 S 2 3 S 2
Lemma 4. The discretized functional signature scheme in Example 6 achieves δ = a
for the medianization function.
Proof. By lemma 3, the true median lies in [v−a,v+a]. All points in this interval are
less than a units from v, so the distance from v to the true median is less than a. I.e.,
the condition from the deﬁnition of δ which we desire to be infeasible,
verify∗(σ∗,pk,v) ^ (|F(V,Σ)−v| > δ).
is indeed infeasible, for δ = a.
Lemma 5. The discretized functional signature scheme in Example 6 achieves δ0 = a.
I.e., given a quorum of at least k signers Q = {S } with observations |v − v | < a
S i i j
for S ,S ∈ Q, a valid discretized functional signature can be constructed from their
i j
signatures {σ = (Sig (ι(v )),Sig (ι0(v )),Sig (v ))}
i sk i sk i sk i
i i i
Proof. Let I = [min({v } ),max({v } )] be the smallest interval containing {v } . Since
i i i i i i
the length of I, |max({v } )−min({v } )|, is a diﬀerence between two elements of {v }
i i i i i
it is less than a. Thus I contains at most one point of aZ. If it contains one, say v,
then v ∈ {ι(v ),ι0(v )} for all I, because each v lies in either the cell below or the cell
i i i
above v. Therefore a functional signature on v can be constructed from the σ ’s. If it
i
does not, it lies entirely within one cell of aZ, and {ι(v ),ι0(v )} will be the same for
i i
all i, so a functional signature can be constructed on either boundary value.
23There are two midpoints if m is even, m and m +1, and one midpoint if m is odd, m +1.
2 2 2
133
The technique in Example 6 can be viewed as a means of reducing proximity testing
to equality testing by discretizing values within a lattice. Greater resilience to variance
(in the sense of larger δ0) can be achieved if participants send signatures over a larger
set of grid points in the neighborhood of their observed v ’s.
i
Enriching the discretized functional signature: As described here, a signature
Sig∗ (v) is on a grid point v ∈ aZ, and v will be close to but not necessary equal to
sk
the median v computed over a set of at least k node-supplied values. It is possible,
med S
however, for a DON also to include v in its signed message. If v is computed by
med med
the DON, then it is a trustworthy value assuming the DON is functioning correctly. In
some cases, contracts may wish to consume v if |v −v | ≤ a, use v as assurance
med med
against gross inaccuracy of v .
med
E Prospective Bribery
One class of adversarial behavior we expressly designed our proposed staking mech-
anisms to protect against is what we call prospective bribery. This novel attack is a
generalization of the bribery attacks described in [166]. Prospective bribes are feasi-
ble in and can impact the security of proof-of-work, proof-of-stake, and permissioned
systems.
In proof-of-work and proof-of-stake blockchains, a prospective briber commits to
paying the creator of a future block a speciﬁed bribe given that the future block meets
some speciﬁed condition. For example, a briber could post a bribe to ensure that a
future block does not include a speciﬁc transaction, or includes a speciﬁed ordering.
We use the term prospective because the briber actually does not know which node
will be chosen to lead the protocol in the relevant round. Still, the bribe can be
successful as long as the candidates for that leadership role are aware of the bribe.
To grasp the impact of prospective bribery in the context of staking, consider a
staking mechanism for an oracle network in which there is a pool of n oracles, and
in each round a node is selected at random—using fresh randomness—to unilaterally
report the next value. It may appear that this strategy is naturally resistant to bribery
attack, as a briber might have no way to determine ahead of time which node to bribe.
However a briber can oﬀer a guaranteed bribe to whichever node is selected as leader
of the target block, promising a payment if and only if the block returns false (to use
the language of Section 9).
A briber can guarantee payment of a prospective bribe using a smart contract
analogous to those shown in [166].
134
F Random vs. Committee-Based Oracle Selection
It is possible to operate an oracle network in a permissionless or quasi-permissionless
˜
way, selectingarandomsubcommitteeO ⊂ O producingagivenreportr orsequenceof
reports. An ostensible beneﬁt of this approach is its resistance to attacks that corrupt
˜
nodes, whether technical or bribery-based. Provided that O isn’t known in advance,
˜
an adversary must in principle control close to a majority of O, rather than just O, in
order to subvert r with high probability for suﬃciently large n.
This observation underlies many hybrid consensus protocols, e.g., [120, 182] as well
as some oracle protocols, e.g., [25].
We believe, however, that in many applications, it will be beneﬁcial for relying
parties to select stable oracle nodes (or committees), for several reasons:
• Non-uniform corruption: Rational nodes’ reliability is a function of incentives
that reﬂect factors beyond their staked assets, such as potential future revenue,
reputation, and so forth, as discussed in Section 9. Users may prefer to rely
on nodes they assess as being highly trustworthy, rather than randomly selected
nodes. Even as compared with stake-weighted randomized selection, this choice
can result in selection of a more trustworthy committee, i.e., one less likely to be
corrupted.
• Corruption thresholds: A related issue is the fact that unless n and k are quite
large or the fraction of adversarial nodes in O is quite low, the probability of a
˜
randomly selected subset O having a high proportion of corrupted nodes at some
time can be quite high.
Forexample, supposethatn = 100, f = 10, i.e., only10%ofnodesarecorrupted,
˜
and a subcommittee of size |O| = 10 is selected uniformly at random. The
probability of a majority corrupt subcommittee being selected is ≈ 0.000009.
Even in a system with low throughput, handling, e.g., one request a second, if
a new committee is selected for each job, a corrupt committee will surface on
expectation in just over a day.
For this reason, given adversarial fraction f/n = 1/4, with its proposed security
parameters, the random-committee-selection scheme in [41] requires a committee
size of 26,091!
We consequently believe that random selection is not suﬃcient to ensure the
trustworthiness of O over time, an issue that is particularly pertinent given the
next point we highlight.
• Conﬁdentiality: In order to access data stored with oracle nodes in a threshold
manner, a user must interact with the nodes that hold sk . It is possible to hand
L
oﬀ sk across committees of oracle nodes with dynamically changing member-
L
ship. Apart from the potentially large increase in communication cost, frequent
changes could be problematic because they result in an elevated probability of
135
the committee having f ≥ k corruptions at some time, resulting in a catastrophic
failure, as explained above.
• Prospective bribery: As noted in Section 9, an adversary can oﬀer a bribe to
nodes in a committee in advance of committee selection by making the bribe
contingent on a node’s selection. That is, a node can prove that it was selected
and generated a desired report in order to claim a bounty. Smart contracts can
in fact facilitate such malfeasance using techniques like those in [165].
• Innovation: Oracle providers may choose to diﬀerentiate themselves based on
performance, accuracy, or special features, such as enhanced conﬁdentiality or ac-
cess to proprietary data. Allowing users to choose providers, rather than drawing
providers from a pool with homogeneous capabilities, can help promote innova-
tion.
• Customization: Diﬀerent users may have diﬀerent preferences in terms of trade-
oﬀs among reliability, performance, and cost tradeoﬀs, and should be able to
express these preferences in terms of their selection of providers.
136
